
// Mason Yin's sphere test with three.js
let  polyCounter =0;




  
// input data: clusters, egdes, and labels.
// Later on in the real web site we will read them from json files generated by the web server.
// from the update baby test data:


const g_clusters = 
[[[-0.12162939555835713,0.8954564495490498,0.42821027205932244],[-0.03005163107603821,0.5183985597662603,0.8546109247499337],[-0.08300859081264991,0.4742358441634614,0.8764758627377409],[-0.34740749760314205,0.46339558434602635,0.8152132009589441],[-0.40324264417435574,0.7699852753361975,0.4944876597901247],[-0.3982824967722513,0.7966926195219085,0.454589840146237],[-0.3963817958033787,0.8046353624095713,0.4420898161185197],[-0.39621920579759523,0.805316221962899,0.4409944711677525],[-0.3949876500802385,0.8095551950304121,0.4342869356581691],[-0.38480665786618273,0.8389690377832618,0.38477888416970923],[-0.30290149107590025,0.9380745711183022,0.16812729024524814],[-0.18685521594322274,0.9680446732571866,0.16725620721874132],[-0.1704748653934829,0.9709134549494848,0.16812311937127747],[-0.1631635268009084,0.9721101634914497,0.1684621428051902],[-0.14807221115267277,0.9744449152505966,0.16891337255118652],[-0.08358818203247312,0.9813986933649644,0.17282829770048283],[-0.06035318077399652,0.9825909647443803,0.17570569021283688],[-0.022337657714822608,0.9829206912744326,0.18266894567059613],[0.051649767797245234,0.9780328844065229,0.20195043576567934],[0.1365086203842857,0.9798840603857686,0.14557686891356983],[0.1666301753757074,0.9851731203904357,0.040844920301466726],[0.1514372466252521,0.986551622202601,-0.06150330937420419],[0.1451984796365368,0.9838256872568577,-0.1049019475739599],[0.14293560850041215,0.9813467978270108,-0.1285607802453331],[0.1392985834348826,0.9755907415159428,-0.16976044804785403],[0.3410511126706584,0.9274234767205416,-0.15352469955576817],[0.3452915717461676,0.9254697630564672,-0.15581863864527787],[0.34469303160906223,0.9289332468251417,-0.135165590676971],[0.32371884018075,0.9447988466681577,-0.050608811945638904],[0.35871201675240516,0.9207610722411814,-0.15337775876147117],[0.3619849642643419,0.9196138646954215,-0.15256875665251438],[0.3598331170222336,0.9235719690022884,-0.1324195830204107],[0.369788635854123,0.9178034726130532,-0.14454463135159154],[0.3714479333261032,0.9176595179974522,-0.1411645913692615],[0.35834993671122756,0.9324836278637205,-0.04538288912325375],[0.4127357788424046,0.9090001455290411,-0.058033716850948665],[0.4151064502606352,0.9076095191076038,-0.06270243836789043],[0.4261424992533332,0.9019283147950323,-0.07019889814745028],[0.44323724900377637,0.8927824561750601,-0.08049985740106133],[0.45065105356335716,0.8887100181660486,-0.08430973569842265],[0.46254912185678193,0.8827388022453998,-0.08258642067481135],[0.4772133920596989,0.8756730323023959,-0.07391967895765861],[0.49204456870059904,0.8684200592919357,-0.0611452617267476],[0.4967679701970155,0.8656863395562647,-0.061715032949944675],[0.5003892656551555,0.8634243668713418,-0.06410105701091656],[0.5017407331777665,0.8626116153395212,-0.06447819593924328],[0.5038194964969939,0.8616202781158796,-0.061452512471255535],[0.5055789391500674,0.8606983152222069,-0.05990280846126827],[0.5126780040938718,0.8567186562521565,-0.05651909542644178],[0.5160270447672463,0.8545169221427041,-0.059303615745940945],[0.5175707601639803,0.8534202426197369,-0.061598682698164195],[0.5175707601639803,0.8534202426197369,-0.061598682698164195],[0.5160270447672463,0.8545169221427041,-0.059303615745940945],[0.5126780040938718,0.8567186562521565,-0.05651909542644178],[0.5055789391500674,0.8606983152222069,-0.05990280846126827],[0.5038194964969939,0.8616202781158796,-0.061452512471255535],[0.5017407331777665,0.8626116153395212,-0.06447819593924328],[0.5003892656551555,0.8634243668713418,-0.06410105701091656],[0.4967679701970155,0.8656863395562647,-0.061715032949944675],[0.49204456870059904,0.8684200592919357,-0.0611452617267476],[0.4772133920596989,0.8756730323023959,-0.07391967895765861],[0.46254912185678193,0.8827388022453998,-0.08258642067481135],[0.45065105356335716,0.8887100181660486,-0.08430973569842265],[0.4735227118518897,0.8737873509657984,-0.1107786380698236],[0.49553848499727626,0.8632597471912733,-0.09604279653291682],[0.49953451023302803,0.860811392146172,-0.09730889084568901],[0.5002161037775448,0.8607382388013106,-0.09441151299937148],[0.5002161037775448,0.8607382388013106,-0.09441151299937148],[0.49953451023302803,0.860811392146172,-0.09730889084568901],[0.5000964775649325,0.8603295998412748,-0.09867366803813067],[0.5061936396167963,0.8561601112571433,-0.10372011908813583],[0.5065823864359614,0.8559125890519264,-0.10386493949006331],[0.5088916787848283,0.8550411253350935,-0.09966911883455269],[0.5127568518399624,0.8531347036709371,-0.09613317993010144],[0.5201584801191093,0.8489035660164093,-0.09379707439362002],[0.5134314076790607,0.8538521697705598,-0.08558423795773075],[0.5173307037901348,0.8518667757528405,-0.0818042742432416],[0.5177161382383676,0.8516240493593931,-0.0818930934832812],[0.5211730435620207,0.84982433598265,-0.07859552554661185],[0.5215755796177529,0.849568832888776,-0.07868743819955165],[0.5215755796177529,0.849568832888776,-0.07868743819955165],[0.5211730435620207,0.84982433598265,-0.07859552554661185],[0.5177161382383676,0.8516240493593931,-0.0818930934832812],[0.5173307037901348,0.8518667757528405,-0.0818042742432416],[0.5134314076790607,0.8538521697705598,-0.08558423795773075],[0.5201584801191093,0.8489035660164093,-0.09379707439362002],[0.5127568518399624,0.8531347036709371,-0.09613317993010144],[0.5088916787848283,0.8550411253350935,-0.09966911883455269],[0.5065823864359614,0.8559125890519264,-0.10386493949006331],[0.507635678869417,0.8548615571384002,-0.10732071405696084],[0.5098897660093509,0.8530691849836083,-0.11083948822658791],[0.5133096731418721,0.8506273628823877,-0.11378167240262925],[0.5136739026882264,0.8504165000630755,-0.11371410694155665],[0.5194488782561768,0.8472754697393252,-0.11089247610368091],[0.5239348526251819,0.8450378626832384,-0.10678614533905223],[0.5245099385933809,0.8447886885176469,-0.10593109113665387],[0.5272932822382309,0.8429905635017415,-0.10643638641672222],[0.5475460690805497,0.8257943090700762,-0.13511869353244024],[0.535141293256417,0.8378771841384509,-0.10763652053122921],[0.5611523777670919,0.8234503953528244,-0.08388954237338637],[0.5707771892188549,0.8171128694081532,-0.08087001245825354],[0.5614253705020671,0.8150476877559009,-0.14317408997572256],[0.5764352215248382,0.8061429931395064,-0.1336260079389054],[0.5974314101207066,0.7935202514609229,-0.11576407354001449],[0.6026195442932446,0.7895027474000367,-0.11634043443101012],[0.6053947815086455,0.7871213319552108,-0.11805578047327632],[0.6057809425807081,0.7868113554765495,-0.11814118883430957],[0.6067370626643425,0.7860906684628494,-0.1180321894445604],[0.6074712110543273,0.7857347360199158,-0.11661754735845827],[0.6126092361990756,0.7826341749219682,-0.11042496080051546],[0.6166848128884768,0.7798246418884791,-0.10757959591023616],[0.6179091185562741,0.7789141529722097,-0.10714972470610334],[0.6179091185562741,0.7789141529722097,-0.10714972470610334],[0.6166848128884768,0.7798246418884791,-0.10757959591023616],[0.6126092361990756,0.7826341749219682,-0.11042496080051546],[0.6074712110543273,0.7857347360199158,-0.11661754735845827],[0.6067370626643425,0.7860906684628494,-0.1180321894445604],[0.6097111834050396,0.7825497040210342,-0.12596917705303182],[0.6122503045660218,0.7800087718016533,-0.1293672310567475],[0.6144585316093721,0.7780011610754857,-0.13097673952901095],[0.6151237167917768,0.7774784411582797,-0.13095833907911927],[0.6165472051344665,0.7764357339203275,-0.13044958770529227],[0.6194479159764192,0.7744687150390044,-0.12838414550989052],[0.6231452731087873,0.7722388234484843,-0.12384332101924395],[0.6251130539976898,0.7713005413999517,-0.11970440492238686],[0.6251130539976898,0.7713005413999517,-0.11970440492238686],[0.6231452731087873,0.7722388234484843,-0.12384332101924395],[0.6194479159764192,0.7744687150390044,-0.12838414550989052],[0.6165472051344665,0.7764357339203275,-0.13044958770529227],[0.6151237167917768,0.7774784411582797,-0.13095833907911927],[0.6144585316093721,0.7780011610754857,-0.13097673952901095],[0.6122503045660218,0.7800087718016533,-0.1293672310567475],[0.6097111834050396,0.7825497040210342,-0.12596917705303182],[0.6067370626643425,0.7860906684628494,-0.1180321894445604],[0.6057809425807081,0.7868113554765495,-0.11814118883430957],[0.6053947815086455,0.7871213319552108,-0.11805578047327632],[0.6026195442932446,0.7895027474000367,-0.11634043443101012],[0.5974314101207066,0.7935202514609229,-0.11576407354001449],[0.5764352215248382,0.8061429931395064,-0.1336260079389054],[0.5614253705020671,0.8150476877559009,-0.14317408997572256],[0.5707771892188549,0.8171128694081532,-0.08087001245825354],[0.5611523777670919,0.8234503953528244,-0.08388954237338637],[0.535141293256417,0.8378771841384509,-0.10763652053122921],[0.5475460690805497,0.8257943090700762,-0.13511869353244024],[0.5272932822382309,0.8429905635017415,-0.10643638641672222],[0.5245099385933809,0.8447886885176469,-0.10593109113665387],[0.5239348526251819,0.8450378626832384,-0.10678614533905223],[0.5194488782561768,0.8472754697393252,-0.11089247610368091],[0.5136739026882264,0.8504165000630755,-0.11371410694155665],[0.5133096731418721,0.8506273628823877,-0.11378167240262925],[0.5098897660093509,0.8530691849836083,-0.11083948822658791],[0.4902206695706862,0.8623375557484673,-0.12671872423374222],[0.4834791689012039,0.865610835880701,-0.13025273142823315],[0.4844021981227784,0.8645798677652744,-0.1336269535266039],[0.4553772594914494,0.8775449551225001,-0.15015459792196392],[0.4580599315170701,0.8753278196970605,-0.1548622200634085],[0.4594555514207789,0.8735694989312727,-0.1605519442597736],[0.45943921470659577,0.8728861906524891,-0.1642720492292381],[0.45793504083613323,0.873333682429003,-0.16608364612268842],[0.4540125988069098,0.8748209299653454,-0.1689997059736026],[0.4540125988069098,0.8748209299653454,-0.1689997059736026],[0.45793504083613323,0.873333682429003,-0.16608364612268842],[0.45943921470659577,0.8728861906524891,-0.1642720492292381],[0.4594555514207789,0.8735694989312727,-0.1605519442597736],[0.4580599315170701,0.8753278196970605,-0.1548622200634085],[0.4553772594914494,0.8775449551225001,-0.15015459792196392],[0.4844021981227784,0.8645798677652744,-0.1336269535266039],[0.4834791689012039,0.865610835880701,-0.13025273142823315],[0.4902206695706862,0.8623375557484673,-0.12671872423374222],[0.5098897660093509,0.8530691849836083,-0.11083948822658791],[0.507635678869417,0.8548615571384002,-0.10732071405696084],[0.5065823864359614,0.8559125890519264,-0.10386493949006331],[0.5061936396167963,0.8561601112571433,-0.10372011908813583],[0.5000964775649325,0.8603295998412748,-0.09867366803813067],[0.49953451023302803,0.860811392146172,-0.09730889084568901],[0.49553848499727626,0.8632597471912733,-0.09604279653291682],[0.4735227118518897,0.8737873509657984,-0.1107786380698236],[0.45065105356335716,0.8887100181660486,-0.08430973569842265],[0.44323724900377637,0.8927824561750601,-0.08049985740106133],[0.4261424992533332,0.9019283147950323,-0.07019889814745028],[0.4151064502606352,0.9076095191076038,-0.06270243836789043],[0.4127357788424046,0.9090001455290411,-0.058033716850948665],[0.35834993671122756,0.9324836278637205,-0.04538288912325375],[0.3714479333261032,0.9176595179974522,-0.1411645913692615],[0.369788635854123,0.9178034726130532,-0.14454463135159154],[0.3598331170222336,0.9235719690022884,-0.1324195830204107],[0.3619849642643419,0.9196138646954215,-0.15256875665251438],[0.36756659768616057,0.9173497662638298,-0.15285353316530512],[0.3685263042080012,0.9167795444181936,-0.15395983256408552],[0.3707905951090427,0.9150637346888219,-0.15865905595341087],[0.37184362685924194,0.9135518735331164,-0.16478862681719833],[0.40283695130204644,0.9025211087671949,-0.15224335419093324],[0.40432716350985637,0.9005904527407409,-0.15955056026320094],[0.40353172794115416,0.9008773996759455,-0.15994391297555868],[0.40353172794115416,0.9008773996759455,-0.15994391297555868],[0.40432716350985637,0.9005904527407409,-0.15955056026320094],[0.40283695130204644,0.9025211087671949,-0.15224335419093324],[0.37184362685924194,0.9135518735331164,-0.16478862681719833],[0.3707905951090427,0.9150637346888219,-0.15865905595341087],[0.3685263042080012,0.9167795444181936,-0.15395983256408552],[0.36756659768616057,0.9173497662638298,-0.15285353316530512],[0.3619849642643419,0.9196138646954215,-0.15256875665251438],[0.35871201675240516,0.9207610722411814,-0.15337775876147117],[0.32371884018075,0.9447988466681577,-0.050608811945638904],[0.34469303160906223,0.9289332468251417,-0.135165590676971],[0.3452915717461676,0.9254697630564672,-0.15581863864527787],[0.3410511126706584,0.9274234767205416,-0.15352469955576817],[0.1392985834348826,0.9755907415159428,-0.16976044804785403],[0.1358604088666207,0.9702016578318712,-0.20062575219269263],[0.1319392300868117,0.9642063043717841,-0.22999617860696264],[0.12468369759374359,0.9558492638194445,-0.2660942697808018],[0.1322268479697959,0.9509951131234033,-0.2795073442530227],[0.2036820013389941,0.8933667306553184,-0.4005115814664664],[0.2237478015560988,0.8744840544481047,-0.43036561179399196],[0.22454301289817752,0.8737724838113475,-0.4313955051837668],[0.2267482646283242,0.871870983624215,-0.4340808823274613],[0.36656424446982905,0.8188865332259093,-0.44165088064840907],[0.5257418000494735,0.7197531366759937,-0.4533773063639246],[0.5355069729941094,0.7126631975484908,-0.45314837386296203],[0.6353459207900484,0.6023408608404274,-0.48324015592400693],[0.6657344319069042,0.5654284893658796,-0.48691712804851195],[0.6835591892047462,0.5595376600297687,-0.46868373330227825],[0.7219355430065154,0.5368034208745031,-0.43663618617943123],[0.7746172325836708,0.5023498201974501,-0.38420411389260906],[0.7790649036772045,0.4965445520276825,-0.3827549917506712],[0.7921861952658603,0.4791908139644735,-0.37791162438097303],[0.8061086153596881,0.46062840035775626,-0.3714974791660651],[0.8090326629574117,0.4565742435470567,-0.370143364654119],[0.8280534172503311,0.42916780427883433,-0.3607527324228235],[0.9746784742684794,0.13099755048376327,-0.18122227667956056],[0.9800859934331632,0.11059121258365812,-0.1649273451414468],[0.9820196259191425,0.10275929947133239,-0.15836028757800488],[0.9839496015711657,0.09413393202136913,-0.15159810160467235],[0.9921229855670824,0.052543962533600254,-0.11371505401980227],[0.9944794696472806,0.0621967205363142,-0.0845112560822005],[0.9258826006196736,0.37120268887960745,-0.07035604905265365],[0.923907583715155,0.37550903236518857,-0.07340124907509213],[0.9695274884197275,0.20005378147049757,-0.14140344309064626],[0.9313181328604618,0.35140708605832116,-0.09570577450343806],[0.9272917166442233,0.362737097944169,-0.09247632139121818],[0.9202530871210508,0.3827285575800381,-0.08156657928881955],[0.9177304335458996,0.38697331107534333,-0.08956845348135022],[0.9161859168401608,0.39062269645656617,-0.08953923607422208],[0.9155253165515449,0.3922804022625504,-0.089047631938897],[0.913206662286128,0.3985431847663418,-0.08495246807792788],[0.9124638340366346,0.40077329352070334,-0.08240460409305664],[0.9127952565721664,0.4008824513924741,-0.07809020261795674],[0.9130249684042573,0.4005970961813529,-0.07685944054879075],[0.9056451806220637,0.4196382544098766,-0.060914220440397605],[0.8395002884659072,0.542543961889341,0.02975424479088924],[0.8398741624096486,0.5426643190315815,-0.011261801218329991],[0.8216307096984983,0.5410928367743391,-0.1792805591017627],[0.7498267718695517,0.6561373536803822,-0.08510925503723023],[0.744882791243564,0.6630738178376104,-0.07404552253480605],[0.744882791243564,0.6630738178376104,-0.07404552253480605],[0.7498267718695517,0.6561373536803822,-0.08510925503723023],[0.8216307096984983,0.5410928367743391,-0.1792805591017627],[0.8398741624096486,0.5426643190315815,-0.011261801218329991],[0.8395002884659072,0.542543961889341,0.02975424479088924],[0.9056451806220637,0.4196382544098766,-0.060914220440397605],[0.9130249684042573,0.4005970961813529,-0.07685944054879075],[0.9154523920998944,0.39643626264366116,-0.06917519396219708],[0.9157678561534951,0.39582113504749417,-0.06851906804492527],[0.917171646366055,0.3925637438472713,-0.06848268481006226],[0.917171646366055,0.3925637438472713,-0.06848268481006226],[0.9157678561534951,0.39582113504749417,-0.06851906804492527],[0.9154523920998944,0.39643626264366116,-0.06917519396219708],[0.9130249684042573,0.4005970961813529,-0.07685944054879075],[0.9127952565721664,0.4008824513924741,-0.07809020261795674],[0.9124638340366346,0.40077329352070334,-0.08240460409305664],[0.913206662286128,0.3985431847663418,-0.08495246807792788],[0.9155253165515449,0.3922804022625504,-0.089047631938897],[0.9161859168401608,0.39062269645656617,-0.08953923607422208],[0.9177304335458996,0.38697331107534333,-0.08956845348135022],[0.9202530871210508,0.3827285575800381,-0.08156657928881955],[0.9272917166442233,0.362737097944169,-0.09247632139121818],[0.9313181328604618,0.35140708605832116,-0.09570577450343806],[0.9695274884197275,0.20005378147049757,-0.14140344309064626],[0.923907583715155,0.37550903236518857,-0.07340124907509213],[0.9258826006196736,0.37120268887960745,-0.07035604905265365],[0.9944794696472806,0.0621967205363142,-0.0845112560822005],[0.9948268966460099,0.06394411000820178,-0.07893412763138699],[0.9761330124907921,0.16931948042170425,0.1359972627495689],[0.9671931242358551,0.1848262953353062,0.1742891304227316],[0.9576455025647188,0.19866277681479738,0.20844230023150578],[0.9285505804718522,0.23029759652714388,0.2911302741715591],[0.9259322139012764,0.23242729176224908,0.2977030219933071],[0.906879954464146,0.2638091735850114,0.32859316505901615],[0.9002253113269264,0.2732470023527946,0.3390139592281568],[0.8170399071526542,0.5184662781277527,0.2522667409000602],[0.8120668126496877,0.5308070396899648,0.24246933498600015],[0.7570290928452507,0.6128709404849159,0.22648656228357458],[0.7147466307242487,0.6727858913608407,0.1910403053131289],[0.6990698638752764,0.6921460161797903,0.17954168793861816],[0.6971590553530639,0.6944418553551892,0.17810042411534638],[0.6612988116525516,0.724075347118558,0.19595604966946786],[0.5921034380380664,0.7714407970904558,0.23300775791364509],[0.5842288798237337,0.7759080855044481,0.23799844291240058],[0.5735078617559949,0.781521159766556,0.24558788516782334],[0.5707537644884462,0.7828524960746237,0.24775413157402404],[0.5444776669865472,0.7942310967388932,0.26970545994810974],[0.5414827971688884,0.795492728067937,0.2720068013142095],[0.539418328698146,0.7939513788711289,0.2804800788882021],[0.5380217263808638,0.793066441959667,0.2856190479985344],[0.5348224809460083,0.791338553394077,0.2962232397819697],[0.5341471920214073,0.79103280153013,0.29825137746377645],[0.522528201713923,0.7872296252939285,0.3274657164852449],[0.5173134904706611,0.7847857027997748,0.34131825802046517],[0.5134288777648707,0.7816036039319413,0.3542408697450178],[0.5122955477562278,0.7805077531181225,0.35827492107548725],[0.5119410463100467,0.7801106742425638,0.35964385304880075],[0.47136696266901124,0.8203053646117506,0.32390167534820463],[0.45059884836850883,0.8195618855082204,0.3539477273146196],[0.47093486100710996,0.822628567932794,0.31859472046638615],[0.4708254021390783,0.8232356919565907,0.3171851764968352],[0.4727112131557126,0.8226923820802126,0.3157868797528489],[0.4731728240687146,0.8226308064134195,0.31525550733087043],[0.4765742912947679,0.823138395907466,0.3087395764390657],[0.47665946395860337,0.8232049600893673,0.30843046072487734],[0.4734943133364089,0.8262236067737796,0.3052174419128263],[0.4706480481277157,0.8283276175068158,0.3039140879739762],[0.48975499594472316,0.8262901687289934,0.2781808782231373],[0.4932563020025847,0.8262499667474364,0.27204634345014683],[0.4697927623000667,0.8303864331636613,0.299588270979031],[0.46905648029505886,0.832011590313735,0.2962139967604852],[0.49579918962018027,0.8312107001163714,0.2515391333053853],[0.4934724919780082,0.8330812729638978,0.24992097210491634],[0.4955877182043503,0.8329175071469185,0.24625442098197667],[0.5153550402726985,0.8311135411965491,0.20894847236880498],[0.5236396571589141,0.8282857422808181,0.19935957108904828],[0.5231821558488031,0.8296735224233962,0.1947364321100517],[0.5265308858847576,0.8281018406506667,0.19238650607667407],[0.5272082443567746,0.8278588140194887,0.19157570600807716],[0.5272082443567746,0.8278588140194887,0.19157570600807716],[0.5265308858847576,0.8281018406506667,0.19238650607667407],[0.5231821558488031,0.8296735224233962,0.1947364321100517],[0.5236396571589141,0.8282857422808181,0.19935957108904828],[0.5153550402726985,0.8311135411965491,0.20894847236880498],[0.4955877182043503,0.8329175071469185,0.24625442098197667],[0.4934724919780082,0.8330812729638978,0.24992097210491634],[0.47821994095427905,0.8441221362237812,0.24241185451764932],[0.48705449888866087,0.8426190416510511,0.22971953717387594],[0.4961770298307208,0.8414402374316013,0.21397822762938873],[0.5072555648313919,0.8403422336129369,0.19109349113459068],[0.5127467926464514,0.8373211796689604,0.18969440874353025],[0.5137273816605467,0.8368698960074176,0.18903162298603154],[0.5153547623660241,0.8359787980133612,0.18854420749202247],[0.5160216011970233,0.8362142164862895,0.1856542249567228],[0.51731649599568,0.836004928978258,0.1829737732430786],[0.520094144008019,0.8350225212338312,0.17955353073905872],[0.5212678235415988,0.834485849397121,0.17864272528197195],[0.5215717286142169,0.8343241802808044,0.17851076748796396],[0.5229960403790097,0.8333731430334618,0.17878575507687025],[0.5229960403790097,0.8333731430334618,0.17878575507687025],[0.5215717286142169,0.8343241802808044,0.17851076748796396],[0.5212678235415988,0.834485849397121,0.17864272528197195],[0.520094144008019,0.8350225212338312,0.17955353073905872],[0.51731649599568,0.836004928978258,0.1829737732430786],[0.5160216011970233,0.8362142164862895,0.1856542249567228],[0.5153547623660241,0.8359787980133612,0.18854420749202247],[0.5137273816605467,0.8368698960074176,0.18903162298603154],[0.5127467926464514,0.8373211796689604,0.18969440874353025],[0.5072555648313919,0.8403422336129369,0.19109349113459068],[0.4961770298307208,0.8414402374316013,0.21397822762938873],[0.48705449888866087,0.8426190416510511,0.22971953717387594],[0.47821994095427905,0.8441221362237812,0.24241185451764932],[0.4665096529041345,0.8515582956295878,0.23920119751308822],[0.45554224062936916,0.8574882778544528,0.2391550132123068],[0.4382742558558989,0.8662151816456635,0.23997278124930818],[0.4354905398041134,0.867549908407336,0.24021895463003115],[0.4692857004736288,0.8636806012992894,0.1839204998641355],[0.48227408982191583,0.8597132188951317,0.16824055261266194],[0.48228010388892617,0.8597606954417161,0.1679804987683497],[0.4844630830011194,0.8588654486351033,0.16626984798776187],[0.4865772214746106,0.8581988773577643,0.1635154257063253],[0.4865772214746106,0.8581988773577643,0.1635154257063253],[0.4844630830011194,0.8588654486351033,0.16626984798776187],[0.48228010388892617,0.8597606954417161,0.1679804987683497],[0.48227408982191583,0.8597132188951317,0.16824055261266194],[0.4692857004736288,0.8636806012992894,0.1839204998641355],[0.4354905398041134,0.867549908407336,0.24021895463003115],[0.4382742558558989,0.8662151816456635,0.23997278124930818],[0.45554224062936916,0.8574882778544528,0.2391550132123068],[0.4665096529041345,0.8515582956295878,0.23920119751308822],[0.47821994095427905,0.8441221362237812,0.24241185451764932],[0.4934724919780082,0.8330812729638978,0.24992097210491634],[0.49579918962018027,0.8312107001163714,0.2515391333053853],[0.46905648029505886,0.832011590313735,0.2962139967604852],[0.4604994650740666,0.8380389965622322,0.29262754980942157],[0.3923023669659902,0.8851613039294919,0.250176575439675],[0.4231629690020498,0.8730424498488134,0.2423426962533687],[0.4604416802235546,0.8697751778898797,0.17743900089759915],[0.4728368293407596,0.866102699739011,0.16214637314406383],[0.4736165713846759,0.8657255694080862,0.1618844704808627],[0.4737898903112897,0.8658199347570589,0.16086945146950227],[0.4428845205004622,0.8861906309113782,0.13608624907010047],[0.4428845205004622,0.8861906309113782,0.13608624907010047],[0.4737898903112897,0.8658199347570589,0.16086945146950227],[0.4736165713846759,0.8657255694080862,0.1618844704808627],[0.4728368293407596,0.866102699739011,0.16214637314406383],[0.4604416802235546,0.8697751778898797,0.17743900089759915],[0.4231629690020498,0.8730424498488134,0.2423426962533687],[0.3923023669659902,0.8851613039294919,0.250176575439675],[0.4604994650740666,0.8380389965622322,0.29262754980942157],[0.46905648029505886,0.832011590313735,0.2962139967604852],[0.4697927623000667,0.8303864331636613,0.299588270979031],[0.4932563020025847,0.8262499667474364,0.27204634345014683],[0.48975499594472316,0.8262901687289934,0.2781808782231373],[0.4706480481277157,0.8283276175068158,0.3039140879739762],[0.4692350195056516,0.8291883285654409,0.30375189257086377],[0.46818191136469006,0.8294950332657373,0.30453848304997355],[0.46818191136469006,0.8294950332657373,0.30453848304997355],[0.4692350195056516,0.8291883285654409,0.30375189257086377],[0.4706480481277157,0.8283276175068158,0.3039140879739762],[0.4734943133364089,0.8262236067737796,0.3052174419128263],[0.47665946395860337,0.8232049600893673,0.30843046072487734],[0.4765742912947679,0.823138395907466,0.3087395764390657],[0.4731728240687146,0.8226308064134195,0.31525550733087043],[0.4727112131557126,0.8226923820802126,0.3157868797528489],[0.4708254021390783,0.8232356919565907,0.3171851764968352],[0.47004785730150234,0.8237220142084564,0.3170757877142787],[0.4657910587036114,0.8268830591413583,0.3151239377400546],[0.4648031325892652,0.8277966740798188,0.31418261300968936],[0.463896021283734,0.8289288997146864,0.3125337752226483],[0.463896021283734,0.8289288997146864,0.3125337752226483],[0.4648031325892652,0.8277966740798188,0.31418261300968936],[0.4657910587036114,0.8268830591413583,0.3151239377400546],[0.47004785730150234,0.8237220142084564,0.3170757877142787],[0.4708254021390783,0.8232356919565907,0.3171851764968352],[0.47093486100710996,0.822628567932794,0.31859472046638615],[0.45059884836850883,0.8195618855082204,0.3539477273146196],[0.47136696266901124,0.8203053646117506,0.32390167534820463],[0.5119410463100467,0.7801106742425638,0.35964385304880075],[0.5001457815251698,0.7645960667032352,0.406505906481713],[0.4976428268907725,0.7615070014670093,0.4152814750995822],[0.4942518941951314,0.7580749736695277,0.4254848991215429],[0.46732622731347395,0.7320317156353984,0.4957174241126193],[0.42792549261280177,0.689894672429103,0.5838879290806002],[0.4143583538376285,0.6821438136773367,0.6024840015027035],[0.43029210229175346,0.6746971453268426,0.5996936457835392],[0.4540001114365555,0.6625393649100976,0.5957562326657774],[0.462836086255398,0.657724089966792,0.5942909882684921],[0.46522714083270994,0.6563711794950804,0.5939196765227256],[0.47085653981946407,0.6530931616093695,0.5930964855470986],[0.6009909836632321,0.5394839194480404,0.58971767670003],[0.606547920371141,0.5247981734354988,0.5972323647059059],[0.6146766477842464,0.4991897501527076,0.6107226964926054],[0.6219256995758237,0.4703376877767479,0.6260917533907828],[0.6257250599918727,0.45251200754796767,0.6353747180389501],[0.5179328077188632,0.5035875725461032,0.691480414375981],[0.5136802738641139,0.5060260055609327,0.6928710254722273],[0.5179017721015844,0.5064143279457493,0.6894362065523493],[0.5911395559406284,0.4848675837365658,0.6445598898812903],[0.5174551003626476,0.5090351992599583,0.6878396506621706],[0.5128405273170338,0.5087561950880859,0.6914923914987643],[0.5121753898871817,0.5099236934116839,0.691125312003041],[0.5121753898871817,0.5099236934116839,0.691125312003041],[0.5128405273170338,0.5087561950880859,0.6914923914987643],[0.5174551003626476,0.5090351992599583,0.6878396506621706],[0.5911395559406284,0.4848675837365658,0.6445598898812903],[0.5179017721015844,0.5064143279457493,0.6894362065523493],[0.5136802738641139,0.5060260055609327,0.6928710254722273],[0.5179328077188632,0.5035875725461032,0.691480414375981],[0.5153279634726642,0.5035625744422894,0.6934420117675092],[0.5132418489593824,0.5055392511770795,0.6935509137735111],[0.5128615609332628,0.5060867353679548,0.6934329351867439],[0.5123526705211109,0.5059640263662262,0.693898512055735],[0.5110968289662503,0.5060301090134288,0.6947759064565358],[0.5092320162808991,0.506629405439499,0.6957078403600968],[0.5090476990664151,0.5067312806644121,0.6957685313891346],[0.5089818660879202,0.5067850755074258,0.6957775127413872],[0.5080649823225035,0.5096423948462606,0.694359131223175],[0.5080420264836231,0.5101155962228096,0.6940283696050624],[0.5081844106156524,0.51069157786082,0.6935003367765931],[0.5078634988443284,0.5110257703359202,0.6934892418734239],[0.5078634988443284,0.5110257703359202,0.6934892418734239],[0.5081844106156524,0.51069157786082,0.6935003367765931],[0.5080420264836231,0.5101155962228096,0.6940283696050624],[0.5080649823225035,0.5096423948462606,0.694359131223175],[0.5089818660879202,0.5067850755074258,0.6957775127413872],[0.5090476990664151,0.5067312806644121,0.6957685313891346],[0.5092320162808991,0.506629405439499,0.6957078403600968],[0.5110968289662503,0.5060301090134288,0.6947759064565358],[0.5123526705211109,0.5059640263662262,0.693898512055735],[0.5128615609332628,0.5060867353679548,0.6934329351867439],[0.5132418489593824,0.5055392511770795,0.6935509137735111],[0.5153279634726642,0.5035625744422894,0.6934420117675092],[0.5179328077188632,0.5035875725461032,0.691480414375981],[0.6257250599918727,0.45251200754796767,0.6353747180389501],[0.6214019054837278,0.2772001272358,0.7328163216807119],[0.610822417057113,0.24356077974988585,0.7533751531528857],[0.5902690484065499,0.19764312072980914,0.7826363442374806],[0.5590151804690989,0.1487880209676411,0.8156985673774556],[0.5460645451565118,0.13255743062027303,0.8271892408091172],[0.38209692350191354,0.05558179093715881,0.9224492428131701],[0.3573334144399688,0.10860556342741232,0.9276409124856922],[0.3547703989944519,0.11238170745607069,0.9281747226824136],[0.3376816412219946,0.13357869128985203,0.9317337830168608],[0.3075127229267695,0.16004187281125595,0.9379885522676862],[0.3001231801295057,0.3079584429810262,0.9028220611757637],[0.2525053297114042,0.45051268657026,0.8563173346993401],[0.24810597996687847,0.4568627834377222,0.8542363957442998],[0.2397477249682216,0.4679449729066517,0.8506165591522159],[0.23622554865484163,0.4722910972412984,0.8491988045383304],[0.12676372468077246,0.5549080736604052,0.8221970493084706],[0.07185520872377506,0.5557754347539994,0.8282212838989746],[0.05051319557500166,0.5533532196836425,0.8314136343232219],[0.22227990185146596,0.8989636290732363,0.37743348928835047],[0.22399529302607835,0.9030770490153361,0.36643956151583],[0.22703340549927364,0.9030556494999067,0.3646180559074168],[0.22941306645142578,0.9016649989907624,0.36656496632430985],[0.23071114303385692,0.9011181921469325,0.3670945004516622],[0.2338836207936787,0.9001586224586303,0.3674410242988932],[0.2354093208036267,0.8998510277347843,0.3672200696631758],[0.23782345797474247,0.9002639061034303,0.3646435275777288],[0.23850203578484727,0.9005993278537269,0.3633698248285058],[0.23850203578484727,0.9005993278537269,0.3633698248285058],[0.23782345797474247,0.9002639061034303,0.3646435275777288],[0.2354093208036267,0.8998510277347843,0.3672200696631758],[0.2338836207936787,0.9001586224586303,0.3674410242988932],[0.23071114303385692,0.9011181921469325,0.3670945004516622],[0.22941306645142578,0.9016649989907624,0.36656496632430985],[0.22703340549927364,0.9030556494999067,0.3646180559074168],[0.22692316846438054,0.903728719518796,0.36301553290596805],[0.22756557102034025,0.9048030760976734,0.35992402583097227],[0.22826684105275377,0.9051723822527245,0.35854875217008453],[0.23034893737642012,0.9055705989188976,0.3562039548113178],[0.23057891753833057,0.9055475821050313,0.3561136606907735],[0.23114817336294574,0.9054328432178544,0.35603635821837903],[0.23398195474071887,0.904583685902772,0.35634365443244165],[0.23398195474071887,0.904583685902772,0.35634365443244165],[0.23114817336294574,0.9054328432178544,0.35603635821837903],[0.27471467523549425,0.9242085234327463,0.2652742965771842],[0.296281920632784,0.9313099026304065,0.21184638011703577],[0.3077556212782771,0.926411774063747,0.21690482347721715],[0.33956021834615474,0.9215583830398923,0.18822594073509363],[0.38603527016410516,0.9182075170995307,0.08872274641399104],[0.3885971133682983,0.9177334061442706,0.0822051015975364],[0.39707350176877054,0.9161910393660854,0.05409818461259626],[0.403485831801207,0.9135159380896672,0.05184413555883941],[0.4042888335346522,0.9131992359247111,0.05116341061456123],[0.4069024238735302,0.912094568854171,0.050138956037895865],[0.40911633784069007,0.9109494973280001,0.05286620309504296],[0.41164312049693097,0.9097062345568063,0.05463065216548447],[0.41164312049693097,0.9097062345568063,0.05463065216548447],[0.40911633784069007,0.9109494973280001,0.05286620309504296],[0.4069024238735302,0.912094568854171,0.050138956037895865],[0.40695883790436244,0.9122181039724591,0.04735646773591446],[0.4083205583857425,0.911852521810171,0.042418157291273885],[0.4113496140166318,0.910712588920825,0.037337319527475286],[0.41193482186995295,0.9104722049468799,0.036743251763242356],[0.4126739500442766,0.9101364620634275,0.036767259586774306],[0.418975097321848,0.9071686901799876,0.03879220773910496],[0.42419890992940684,0.9045661645206635,0.04260679310953427],[0.42148129572014903,0.9053462599518901,0.05197756197811684],[0.4370982803627735,0.8977024910116083,0.055455666396317986],[0.4587636796219431,0.8859101972238359,0.06854931593064521],[0.4597340569201608,0.8845763075071897,0.07854522967485741],[0.4626321880474218,0.8816112948029385,0.09345043316294088],[0.4648300710625534,0.8804496445985224,0.09349560611235916],[0.46670509248459957,0.8794313961305152,0.09373780533420932],[0.47811884692588297,0.8730376537633582,0.09595636156938712],[0.49624504578508016,0.8659428086668639,0.06232099687831474],[0.49953653462186876,0.865052211883287,0.0463456717915195],[0.5069348096147557,0.860545069521588,0.04979239021112383],[0.5107707119137785,0.8584461339077941,0.04672809679254798],[0.5109275860218202,0.8583647138413644,0.046508277477759215],[0.5109275860218202,0.8583647138413644,0.046508277477759215],[0.5107707119137785,0.8584461339077941,0.04672809679254798],[0.5069348096147557,0.860545069521588,0.04979239021112383],[0.49953653462186876,0.865052211883287,0.0463456717915195],[0.49624504578508016,0.8659428086668639,0.06232099687831474],[0.47811884692588297,0.8730376537633582,0.09595636156938712],[0.46670509248459957,0.8794313961305152,0.09373780533420932],[0.4648300710625534,0.8804496445985224,0.09349560611235916],[0.48367709714396956,0.8733012399245214,0.058321608728470496],[0.48760834807429254,0.8718688375292055,0.045638021799061824],[0.4854434574240549,0.8731707577125828,0.04378901140484849],[0.48753052311590084,0.8721961423325515,0.039848191057458085],[0.4857686437856561,0.8733015949632714,0.03705602446635007],[0.48605122919298177,0.8732833838581439,0.03362044136030077],[0.48422043471705295,0.8744860265374942,0.028368292036943476],[0.4863819396921236,0.8733324413607079,0.026889693346584195],[0.48980314527332114,0.8715424898512334,0.022507049212959252],[0.49126534435286506,0.8708133125784318,0.018507730115807357],[0.49806754170267725,0.8668203077051971,0.023479311150869205],[0.49881449253611876,0.8663922873255226,0.023420215600704966],[0.49881449253611876,0.8663922873255226,0.023420215600704966],[0.49806754170267725,0.8668203077051971,0.023479311150869205],[0.49126534435286506,0.8708133125784318,0.018507730115807357],[0.48980314527332114,0.8715424898512334,0.022507049212959252],[0.4863819396921236,0.8733324413607079,0.026889693346584195],[0.48422043471705295,0.8744860265374942,0.028368292036943476],[0.48605122919298177,0.8732833838581439,0.03362044136030077],[0.4857686437856561,0.8733015949632714,0.03705602446635007],[0.48753052311590084,0.8721961423325515,0.039848191057458085],[0.4854434574240549,0.8731707577125828,0.04378901140484849],[0.48760834807429254,0.8718688375292055,0.045638021799061824],[0.48367709714396956,0.8733012399245214,0.058321608728470496],[0.4648300710625534,0.8804496445985224,0.09349560611235916],[0.4626321880474218,0.8816112948029385,0.09345043316294088],[0.4597340569201608,0.8845763075071897,0.07854522967485741],[0.4587636796219431,0.8859101972238359,0.06854931593064521],[0.4588544010041363,0.8862382766238783,0.06351657835458004],[0.4602694399814624,0.885634823996835,0.06166847771143956],[0.4602694399814624,0.885634823996835,0.06166847771143956],[0.4588544010041363,0.8862382766238783,0.06351657835458004],[0.4587636796219431,0.8859101972238359,0.06854931593064521],[0.4370982803627735,0.8977024910116083,0.055455666396317986],[0.42148129572014903,0.9053462599518901,0.05197756197811684],[0.42419890992940684,0.9045661645206635,0.04260679310953427],[0.4242356836054483,0.904549570758606,0.04259294303332074],[0.42452869242089375,0.9044134170872415,0.042564777739176315],[0.4257543097027615,0.9038592060225544,0.04209279579456223],[0.4275742902657241,0.9030619647254854,0.04073468018665056],[0.4275742902657241,0.9030619647254854,0.04073468018665056],[0.4257543097027615,0.9038592060225544,0.04209279579456223],[0.42452869242089375,0.9044134170872415,0.042564777739176315],[0.4242356836054483,0.904549570758606,0.04259294303332074],[0.42419890992940684,0.9045661645206635,0.04260679310953427],[0.418975097321848,0.9071686901799876,0.03879220773910496],[0.4126739500442766,0.9101364620634275,0.036767259586774306],[0.41193482186995295,0.9104722049468799,0.036743251763242356],[0.4113496140166318,0.910712588920825,0.037337319527475286],[0.4083205583857425,0.911852521810171,0.042418157291273885],[0.40695883790436244,0.9122181039724591,0.04735646773591446],[0.4069024238735302,0.912094568854171,0.050138956037895865],[0.4042888335346522,0.9131992359247111,0.05116341061456123],[0.403485831801207,0.9135159380896672,0.05184413555883941],[0.39707350176877054,0.9161910393660854,0.05409818461259626],[0.3885971133682983,0.9177334061442706,0.0822051015975364],[0.38603527016410516,0.9182075170995307,0.08872274641399104],[0.33956021834615474,0.9215583830398923,0.18822594073509363],[0.3077556212782771,0.926411774063747,0.21690482347721715],[0.296281920632784,0.9313099026304065,0.21184638011703577],[0.27471467523549425,0.9242085234327463,0.2652742965771842],[0.23114817336294574,0.9054328432178544,0.35603635821837903],[0.23057891753833057,0.9055475821050313,0.3561136606907735],[0.23034893737642012,0.9055705989188976,0.3562039548113178],[0.22826684105275377,0.9051723822527245,0.35854875217008453],[0.22756557102034025,0.9048030760976734,0.35992402583097227],[0.22692316846438054,0.903728719518796,0.36301553290596805],[0.22703340549927364,0.9030556494999067,0.3646180559074168],[0.22399529302607835,0.9030770490153361,0.36643956151583],[0.22227990185146596,0.8989636290732363,0.37743348928835047],[0.05051319557500166,0.5533532196836425,0.8314136343232219],[0.04672722788155702,0.5527545195447245,0.8320330566133691],[0.041899740684719446,0.5519140994321964,0.8328476682914475],[-0.028799239763038244,0.5192054760913324,0.8541640810674751],[-0.03005163107603821,0.5183985597662603,0.8546109247499337],[-0.12162939555835713,0.8954564495490498,0.42821027205932244],[-0.13344106275837972,0.9148388590386768,0.3811342870468704],[-0.13079907763079543,0.9166277446583065,0.37773691772655715],[-0.13034666559549546,0.9172834195003138,0.37629891718944347],[-0.12996052412406056,0.9175713667681432,0.37573002150033363],[-0.12869122708222122,0.9176197628605415,0.3760485857968834],[-0.12452725155204816,0.9181793125973632,0.37608471590736925],[-0.12266222152801645,0.9186366478588839,0.3755804689016788],[-0.12266222152801645,0.9186366478588839,0.3755804689016788],[-0.12452725155204816,0.9181793125973632,0.37608471590736925],[-0.12869122708222122,0.9176197628605415,0.3760485857968834],[-0.12996052412406056,0.9175713667681432,0.37573002150033363],[-0.13065964706639818,0.9178909457771989,0.3747055754705601],[-0.1311308524887445,0.9183552132309855,0.37340112728411307],[-0.13141370220908938,0.920697943603251,0.367485694301759],[-0.12938142252097146,0.9214755391082119,0.3662557553563905],[-0.12789817962887134,0.9218442473789833,0.36584865617068624],[-0.12353069099317675,0.9224175322430228,0.36590444735400557],[-0.12201266656673951,0.9224535771068945,0.3663226819075888],[-0.12201266656673951,0.9224535771068945,0.3663226819075888],[-0.12353069099317675,0.9224175322430228,0.36590444735400557],[-0.12789817962887134,0.9218442473789833,0.36584865617068624],[-0.12938142252097146,0.9214755391082119,0.3662557553563905],[-0.13141370220908938,0.920697943603251,0.367485694301759],[-0.1311308524887445,0.9183552132309855,0.37340112728411307],[-0.13065964706639818,0.9178909457771989,0.3747055754705601],[-0.12996052412406056,0.9175713667681432,0.37573002150033363],[-0.13034666559549546,0.9172834195003138,0.37629891718944347],[-0.13079907763079543,0.9166277446583065,0.37773691772655715],[-0.13344106275837972,0.9148388590386768,0.3811342870468704],[-0.12162939555835713,0.8954564495490498,0.42821027205932244],],
[[-0.321291610669539,-0.015912638889311694,0.9468466025903837],[-0.3191264508538067,-0.019864457531084945,0.9475039375603928],[-0.3062391501293413,-0.0394647303730855,0.9511362247252696],[-0.3763032795292225,-0.07682126741157312,0.9233061976878697],[-0.38130335311658087,-0.0801012173513909,0.9209731526384889],[-0.3835491007998189,-0.07477653884856521,0.9204882163903455],[-0.39706245592597,-0.02581791461519379,0.9174283848775118],[-0.3972693349288826,-0.02496272586891889,0.9173624898819205],[-0.3979282615619807,-0.02333677962387001,0.9171196723258349],[-0.39811226340141875,-0.02357553587647518,0.9170337070345541],[-0.44845107205520435,-0.03797635405104079,0.8930002421643165],[-0.3943878048735787,-0.07704015324810123,0.9157090554070704],[-0.3913215895226217,-0.07875043033799052,0.9168782816137975],[-0.4401553409230263,-0.10276723213684359,0.8920213965235736],[-0.44353987680376206,-0.10392465823197249,0.8902089884382607],[-0.444296219318182,-0.10286403578303632,0.8899549761881194],[-0.44394954300126815,-0.10495327914397355,0.889884044393365],[-0.4440030752370477,-0.10510062381360069,0.8898399451890416],[-0.44414746708705893,-0.10510804037735995,0.889767007327301],[-0.46647460086612674,-0.02042613602055397,0.8842987163363167],[-0.47066759138312625,-0.015917704233410084,0.8821670165640655],[-0.4769281416110019,-0.008628500691904344,0.8788999355531244],[-0.484980777616279,0.00751651816273075,0.8744925084284134],[-0.4828165174894559,0.13485381434914792,0.8652760595294656],[-0.5382571578005787,-0.11797762477323322,0.8344821820322524],[-0.5384292354661372,-0.11847445821247855,0.8343007618039258],[-0.538396556840398,-0.11882960171917009,0.8342713427522652],[-0.5386117105877137,-0.11972998394142875,0.8340036907371347],[-0.5385002630331025,-0.11984590451595552,0.8340590062363885],[-0.5378114100315604,-0.1210184266553837,0.8343341223093542],[-0.5377570032474774,-0.12201955590824505,0.8342233714265306],[-0.5379314596513893,-0.12225405771100722,0.8340765492989954],[-0.5384174379318796,-0.12262319680046897,0.8337087106041918],[-0.5391393918191907,-0.12286556300109981,0.8332063187573988],[-0.5280291498042571,-0.1474432915212919,0.8363286989828586],[-0.5261061511510586,-0.15129987441657208,0.8368516390152733],[-0.5360407148665235,-0.1323332705886191,0.8337555142250669],[-0.5396385085863774,-0.12352607789950534,0.8327854394316916],[-0.5396385085863774,-0.12352607789950534,0.8327854394316916],[-0.5360407148665235,-0.1323332705886191,0.8337555142250669],[-0.5261061511510586,-0.15129987441657208,0.8368516390152733],[-0.5280291498042571,-0.1474432915212919,0.8363286989828586],[-0.5391393918191907,-0.12286556300109981,0.8332063187573988],[-0.5384174379318796,-0.12262319680046897,0.8337087106041918],[-0.5379314596513893,-0.12225405771100722,0.8340765492989954],[-0.5377570032474774,-0.12201955590824505,0.8342233714265306],[-0.5378114100315604,-0.1210184266553837,0.8343341223093542],[-0.5385002630331025,-0.11984590451595552,0.8340590062363885],[-0.5386117105877137,-0.11972998394142875,0.8340036907371347],[-0.538396556840398,-0.11882960171917009,0.8342713427522652],[-0.5384292354661372,-0.11847445821247855,0.8343007618039258],[-0.5382571578005787,-0.11797762477323322,0.8344821820322524],[-0.4828165174894559,0.13485381434914792,0.8652760595294656],[-0.484980777616279,0.00751651816273075,0.8744925084284134],[-0.4966889926504399,-0.023299752629144115,0.8676157940628513],[-0.48259092466328724,-0.11920855488274168,0.8676954073149182],[-0.4828048453860004,-0.11996200627648283,0.8674725346210803],[-0.4828626181501873,-0.1200472625962675,0.8674285830754538],[-0.502059095890269,-0.042809430712671084,0.8637731281279262],[-0.5056904476053709,-0.06044321097682274,0.8605950205802326],[-0.5065209599130449,-0.06523302052286212,0.859756459820007],[-0.5075197719081342,-0.07155290529436119,0.8586639988180778],[-0.4862245302309574,-0.11933142427598435,0.8656475711176864],[-0.4857191996511771,-0.12095889582705459,0.8657053797976074],[-0.48495473343826123,-0.1213056406803595,0.8660853584116017],[-0.490976861413749,-0.1250507077787242,0.8621508232556206],[-0.4843278120124518,-0.12185583526204259,0.8663588897932664],[-0.48408361127548,-0.12255061953036257,0.8663973701179005],[-0.48393314690524175,-0.12277680448695469,0.8664494016423359],[-0.48574285826050817,-0.124607519160086,0.8651744574464046],[-0.5078793413985966,-0.13917286119109118,0.8501114569798557],[-0.5076113246921161,-0.14189336066110864,0.8498217561610267],[-0.5017717362778702,-0.1785091720814012,0.8463802928681079],[-0.5007599743955424,-0.1826353717180849,0.8460991484694762],[-0.4972232158473833,-0.19515885639000735,0.8453887238394721],[-0.48154671126215925,-0.23368753819009624,0.8446910082197224],[-0.5974107375430199,-0.25466929866665505,0.760423539210182],[-0.4727144786393674,-0.3608553626226568,0.8039430508134154],[-0.4694999228043795,-0.36335394998077,0.8047010187144377],[-0.4695453784341368,-0.36342436149852453,0.8046426977612691],[-0.46978300441739335,-0.3642144897324192,0.804146587525882],[-0.46978039314574027,-0.36547447222769613,0.8035762517432435],[-0.47577849313163606,-0.36294135528353416,0.8011918609785931],[-0.49683383729474306,-0.3553105793150932,0.7917768185200635],[-0.49733757089395864,-0.35511861106043613,0.791546658546294],[-0.4741281806740547,-0.36515826380498284,0.8011628490298596],[-0.4741281806740547,-0.36515826380498284,0.8011628490298596],[-0.49733757089395864,-0.35511861106043613,0.791546658546294],[-0.49683383729474306,-0.3553105793150932,0.7917768185200635],[-0.47577849313163606,-0.36294135528353416,0.8011918609785931],[-0.46978039314574027,-0.36547447222769613,0.8035762517432435],[-0.46970404429506163,-0.3657786900833889,0.8034824582115921],[-0.46947451560977704,-0.3659761156013092,0.8035267027313668],[-0.46947451560977704,-0.3659761156013092,0.8035267027313668],[-0.46970404429506163,-0.3657786900833889,0.8034824582115921],[-0.46978039314574027,-0.36547447222769613,0.8035762517432435],[-0.46978300441739335,-0.3642144897324192,0.804146587525882],[-0.4695453784341368,-0.36342436149852453,0.8046426977612691],[-0.4694999228043795,-0.36335394998077,0.8047010187144377],[-0.4727144786393674,-0.3608553626226568,0.8039430508134154],[-0.4704834766243168,-0.36137519981600963,0.805017554579672],[-0.4704834766243168,-0.36137519981600963,0.805017554579672],[-0.4727144786393674,-0.3608553626226568,0.8039430508134154],[-0.5974107375430199,-0.25466929866665505,0.760423539210182],[-0.48154671126215925,-0.23368753819009624,0.8446910082197224],[-0.4972232158473833,-0.19515885639000735,0.8453887238394721],[-0.5007599743955424,-0.1826353717180849,0.8460991484694762],[-0.5017717362778702,-0.1785091720814012,0.8463802928681079],[-0.5076113246921161,-0.14189336066110864,0.8498217561610267],[-0.5078793413985966,-0.13917286119109118,0.8501114569798557],[-0.48574285826050817,-0.124607519160086,0.8651744574464046],[-0.48393314690524175,-0.12277680448695469,0.8664494016423359],[-0.48408361127548,-0.12255061953036257,0.8663973701179005],[-0.4843278120124518,-0.12185583526204259,0.8663588897932664],[-0.490976861413749,-0.1250507077787242,0.8621508232556206],[-0.48495473343826123,-0.1213056406803595,0.8660853584116017],[-0.4857191996511771,-0.12095889582705459,0.8657053797976074],[-0.4862245302309574,-0.11933142427598435,0.8656475711176864],[-0.5075197719081342,-0.07155290529436119,0.8586639988180778],[-0.5065209599130449,-0.06523302052286212,0.859756459820007],[-0.5056904476053709,-0.06044321097682274,0.8605950205802326],[-0.502059095890269,-0.042809430712671084,0.8637731281279262],[-0.4828626181501873,-0.1200472625962675,0.8674285830754538],[-0.4828048453860004,-0.11996200627648283,0.8674725346210803],[-0.48259092466328724,-0.11920855488274168,0.8676954073149182],[-0.4966889926504399,-0.023299752629144115,0.8676157940628513],[-0.484980777616279,0.00751651816273075,0.8744925084284134],[-0.4769281416110019,-0.008628500691904344,0.8788999355531244],[-0.47066759138312625,-0.015917704233410084,0.8821670165640655],[-0.46647460086612674,-0.02042613602055397,0.8842987163363167],[-0.44414746708705893,-0.10510804037735995,0.889767007327301],[-0.44456204363278595,-0.10525412921217765,0.8895426676921278],[-0.44490837495233837,-0.10551599048507951,0.8893384696780086],[-0.4451849281259343,-0.105897236622631,0.8891547419010919],[-0.44549114682737695,-0.10576153980667904,0.889017510961482],[-0.44558444250804,-0.10575406588306334,0.8889716430483032],[-0.4502838311920269,-0.1078238200807182,0.8863512256381391],[-0.4514105237512324,-0.10841478735899854,0.8857058049536207],[-0.46286928532580474,-0.1137958192860853,0.8790918815544752],[-0.4612225385137507,-0.11770472597477265,0.8794426459128165],[-0.461055564747098,-0.11811962069629192,0.8794745712198271],[-0.4463750512309556,-0.10908911527934056,0.8881716492695164],[-0.4463750512309556,-0.10908911527934056,0.8881716492695164],[-0.461055564747098,-0.11811962069629192,0.8794745712198271],[-0.4612225385137507,-0.11770472597477265,0.8794426459128165],[-0.46286928532580474,-0.1137958192860853,0.8790918815544752],[-0.4514105237512324,-0.10841478735899854,0.8857058049536207],[-0.4502838311920269,-0.1078238200807182,0.8863512256381391],[-0.44558444250804,-0.10575406588306334,0.8889716430483032],[-0.44549114682737695,-0.10576153980667904,0.889017510961482],[-0.4451849281259343,-0.105897236622631,0.8891547419010919],[-0.445152625877698,-0.10627911699325346,0.8891253505357524],[-0.4451050737895075,-0.10642114437660605,0.8891321686433411],[-0.4451050737895075,-0.10642114437660605,0.8891321686433411],[-0.445152625877698,-0.10627911699325346,0.8891253505357524],[-0.4451849281259343,-0.105897236622631,0.8891547419010919],[-0.44490837495233837,-0.10551599048507951,0.8893384696780086],[-0.44456204363278595,-0.10525412921217765,0.8895426676921278],[-0.44414746708705893,-0.10510804037735995,0.889767007327301],[-0.4440030752370477,-0.10510062381360069,0.8898399451890416],[-0.44394954300126815,-0.10495327914397355,0.889884044393365],[-0.444296219318182,-0.10286403578303632,0.8899549761881194],[-0.44353987680376206,-0.10392465823197249,0.8902089884382607],[-0.4401553409230263,-0.10276723213684359,0.8920213965235736],[-0.3913215895226217,-0.07875043033799052,0.9168782816137975],[-0.3943878048735787,-0.07704015324810123,0.9157090554070704],[-0.44845107205520435,-0.03797635405104079,0.8930002421643165],[-0.39811226340141875,-0.02357553587647518,0.9170337070345541],[-0.3979282615619807,-0.02333677962387001,0.9171196723258349],[-0.3972693349288826,-0.02496272586891889,0.9173624898819205],[-0.39706245592597,-0.02581791461519379,0.9174283848775118],[-0.3835491007998189,-0.07477653884856521,0.9204882163903455],[-0.38130335311658087,-0.0801012173513909,0.9209731526384889],[-0.3843865556769574,-0.08225526175551987,0.9195004337836585],[-0.3803697242492338,-0.1786654551119331,0.9074125456616784],[-0.44211483583346095,-0.10705292277903997,0.8905471035607363],[-0.44211483583346095,-0.10705292277903997,0.8905471035607363],[-0.3803697242492338,-0.1786654551119331,0.9074125456616784],[-0.37719161253487576,-0.18932122685372332,0.9065781601692935],[-0.3719281402820873,-0.2034096546471632,0.9057008175234412],[-0.35896321913892837,-0.22954070022038697,0.9046858428469808],[-0.27414541839770773,-0.2500259284047284,0.9286179648794758],[-0.24007365690351049,-0.22851545218437175,0.9434751334157927],[-0.2351249951983273,-0.22519565049919069,0.9455174010187402],[-0.2302880674751497,-0.2218891690857809,0.9474875210898467],[-0.21528427950227522,-0.21124825025476546,0.9534289988056197],[-0.2152037701924339,-0.20943758845116842,0.9538465462739387],[-0.21403651132975798,-0.19511876409129428,0.9571400314046384],[-0.12403959851286438,-0.18884023332270083,0.9741424661102684],[-0.1224815259969581,-0.18825565561579058,0.974452709944472],[-0.12196996590681583,-0.18798357140138514,0.9745693942967174],[-0.12196996590681583,-0.18798357140138514,0.9745693942967174],[-0.1224815259969581,-0.18825565561579058,0.974452709944472],[-0.12403959851286438,-0.18884023332270083,0.9741424661102684],[-0.21403651132975798,-0.19511876409129428,0.9571400314046384],[-0.20192115018237589,-0.14436974278663672,0.9687028576796637],[-0.15034005323027208,-0.14172529141575058,0.9784231243014647],[-0.1326344421246154,-0.15208155958850839,0.9794280494224264],[-0.13205309395239492,-0.1523444714083038,0.979465743356512],[-0.12118870885531532,-0.15644341109169077,0.9802238295266943],[-0.09997192883928306,-0.17559654709192726,0.9793729964081845],[-0.12075778278703543,-0.1875052151351914,0.974812470269777],[-0.12075778278703543,-0.1875052151351914,0.974812470269777],[-0.09997192883928306,-0.17559654709192726,0.9793729964081845],[-0.09818601362592246,-0.17676429294354462,0.9793436023523199],[-0.0659061352109602,-0.18989538991417185,0.9795897724205267],[-0.08655339413674727,-0.2275637642858394,0.9699088839408926],[-0.08882529886714383,-0.23140735348470287,0.9687934263992343],[-0.09216288847365767,-0.237043540117578,0.9671175533908576],[-0.10698732008179015,-0.2608374340382035,0.9594360564133925],[-0.11059889925041443,-0.26203186578567944,0.9587007795957362],[-0.10901377780096076,-0.3002489122472582,0.947610989248173],[-0.1059914987169805,-0.32320083790826754,0.9403759995741715],[-0.10503152370255588,-0.3285727228609147,0.9386204476893117],[-0.10482894915350427,-0.32961994045264287,0.9382758583036058],[-0.15846043490077294,-0.3840750181083778,0.9096024796778575],[-0.16228379785549565,-0.3875753085809113,0.9074410995387018],[-0.16228379785549565,-0.3875753085809113,0.9074410995387018],[-0.15846043490077294,-0.3840750181083778,0.9096024796778575],[-0.10482894915350427,-0.32961994045264287,0.9382758583036058],[-0.059626494095408045,-0.4417665528456745,0.8951463533907403],[-0.04631348543295321,-0.46041111920273087,0.886496848489345],[-0.021940875650139646,-0.4881944951829299,0.8724590149965724],[-0.03171907665999811,-0.504478954139443,0.862841170208174],[0.08968881959410581,-0.7046533626978452,0.7038604649207363],[0.12457216414926278,-0.734356957418255,0.6672343179203033],[0.12068629591959709,-0.7425143320590462,0.6588681845893882],[0.11669206637367831,-0.7505136119405876,0.6504708140549692],[0.11478634272134444,-0.7542636858856017,0.6464598886852336],[-0.2479632447636975,-0.6919814118716873,0.6779940669875548],[-0.2481253922781626,-0.6912927818116845,0.6786369276143693],[-0.23998249561218113,-0.6944496683356084,0.6783421407728647],[-0.24123258625231594,-0.6934214859255861,0.6789502796131475],[-0.2449899414781112,-0.6889678751958713,0.6821313623655184],[-0.2458212062827679,-0.6888102264456634,0.6819915003030163],[-0.24633136170227807,-0.6881348602237009,0.6824890287666237],[-0.24793362373359873,-0.686795468532765,0.6832575668261466],[-0.24806022752139048,-0.6867279049588488,0.6832795241135697],[-0.24806022752139048,-0.6867279049588488,0.6832795241135697],[-0.24793362373359873,-0.686795468532765,0.6832575668261466],[-0.24633136170227807,-0.6881348602237009,0.6824890287666237],[-0.2458212062827679,-0.6888102264456634,0.6819915003030163],[-0.2449899414781112,-0.6889678751958713,0.6821313623655184],[-0.24123258625231594,-0.6934214859255861,0.6789502796131475],[-0.23998249561218113,-0.6944496683356084,0.6783421407728647],[-0.2481253922781626,-0.6912927818116845,0.6786369276143693],[-0.2479632447636975,-0.6919814118716873,0.6779940669875548],[0.11478634272134444,-0.7542636858856017,0.6464598886852336],[0.0920389042106842,-0.7932229274000336,0.6019354014830972],[0.06736920815114109,-0.8264587780686623,0.5589519460081894],[-0.2566291987248738,-0.8921832615681744,0.3716859993857771],[-0.2616195082718352,-0.8906240123657836,0.3719463691032293],[-0.3528192391560054,-0.854052189575483,0.3822478802592644],[-0.3910287926511657,-0.8336581728691015,0.3900135050563288],[-0.45631680696096416,-0.7904326037563275,0.40864565408669484],[-0.47693987259856874,-0.774189867481734,0.41612306714994346],[-0.4812923723450936,-0.7705907377597638,0.41778890267848745],[-0.25780019270026233,-0.6909947628027795,0.675326068223964],[-0.2556279302930435,-0.6881415238461709,0.679054934753268],[-0.41771235928958367,-0.5309454503650525,0.7373013723257144],[-0.4392891912074097,-0.5360412636137444,0.7208916494118378],[-0.46664619517229466,-0.3717217641043794,0.8025361416299885],[-0.46664619517229466,-0.3717217641043794,0.8025361416299885],[-0.4392891912074097,-0.5360412636137444,0.7208916494118378],[-0.41771235928958367,-0.5309454503650525,0.7373013723257144],[-0.2556279302930435,-0.6881415238461709,0.679054934753268],[-0.25780019270026233,-0.6909947628027795,0.675326068223964],[-0.4812923723450936,-0.7705907377597638,0.41778890267848745],[-0.6322901069297151,-0.5711606966368894,0.5234354585773426],[-0.6424256261115799,-0.572975534345512,0.5089089819964072],[-0.7167850672007781,-0.5773039862691932,0.391074513201353],[-0.7188932231995421,-0.5771515537745254,0.38741272257558185],[-0.9736918927525023,-0.09285775838162849,0.20809020807425951],[-0.9734424015060485,-0.08994848138851885,0.21052116674110588],[-0.9735199870275658,-0.08721396041934135,0.21131152350456814],[-0.9734135683267181,-0.08524619685008762,0.21260082530423483],[-0.9720378683786295,-0.08709957606799916,0.21807348827105286],[-0.9718722159879045,-0.0871182966822539,0.2188031036661564],[-0.9712244609685263,-0.08631002198753325,0.22197663507880064],[-0.9706328685613305,-0.08442279912354718,0.22526567749337284],[-0.9706126118064337,-0.08404229887530515,0.22549512145952802],[-0.9706259582397785,-0.08324287817425788,0.22573407457532305],[-0.9708968971164439,-0.07947887517526399,0.22592548233994328],[-0.9708968971164439,-0.07947887517526399,0.22592548233994328],[-0.9706259582397785,-0.08324287817425788,0.22573407457532305],[-0.9706126118064337,-0.08404229887530515,0.22549512145952802],[-0.9706328685613305,-0.08442279912354718,0.22526567749337284],[-0.9712244609685263,-0.08631002198753325,0.22197663507880064],[-0.9718722159879045,-0.0871182966822539,0.2188031036661564],[-0.9720378683786295,-0.08709957606799916,0.21807348827105286],[-0.9734135683267181,-0.08524619685008762,0.21260082530423483],[-0.9735199870275658,-0.08721396041934135,0.21131152350456814],[-0.9734424015060485,-0.08994848138851885,0.21052116674110588],[-0.9736918927525023,-0.09285775838162849,0.20809020807425951],[-0.7188932231995421,-0.5771515537745254,0.38741272257558185],[-0.8045219590600333,-0.5522804289456965,0.21847367162604198],[-0.8341973286948677,-0.5312630154629083,0.14790005138472534],[-0.9790865542866815,-0.20038399437985774,-0.03515357750508956],[-0.9861271595469107,-0.1595809736250848,-0.04568520614829278],[-0.9871767753054752,-0.15251958089041803,-0.047114665896029875],[-0.9901967446559908,-0.12972196230588376,-0.05179400899900871],[-0.9937790688186433,-0.09581139878855821,-0.05677445059293896],[-0.9946981704715339,-0.08467880749629189,-0.05835279960369828],[-0.961341809209047,0.2704116710397323,-0.05195627038362174],[-0.9575498807599403,0.2853180474739471,-0.0411319540294224],[-0.9522996546164212,0.30398558767680356,-0.02679795332172567],[-0.9477425959013908,0.3183395769029005,-0.02106859490748171],[-0.8995511881053894,0.42695035619311567,0.09230955164420429],[-0.8932570257437098,0.4370322951822136,0.10533118686916979],[-0.8012436390033472,0.4639345443288499,0.37785363506926406],[-0.9420002851807173,0.09462703566922118,0.32199563170934986],[-0.941695071714499,0.09273674576123205,0.32343513707425375],[-0.9417097584688324,0.09155563200279349,0.32372873992455864],[-0.9414189114187784,0.089291051508023,0.32520384583161666],[-0.9455254746630014,0.08744101504363784,0.31358514896506867],[-0.9422622707906713,0.08245846015194257,0.3245649632874415],[-0.9423882349032013,0.08066308089720245,0.3246503998090872],[-0.9813481337021347,0.10275637974967967,0.16247143410481973],[-0.97935715046365,0.08010222737236766,0.18558880625109142],[-0.9769462896572882,0.06121858722344589,0.20451951423574052],[-0.9776604741041217,0.04931443951574266,0.2043234774316265],[-0.9780003912534139,-0.03546111094227905,0.20556688526829667],[-0.9748401408713264,-0.07250695104362172,0.21078292577040098],[-0.9748401408713264,-0.07250695104362172,0.21078292577040098],[-0.9780003912534139,-0.03546111094227905,0.20556688526829667],[-0.9776604741041217,0.04931443951574266,0.2043234774316265],[-0.9769462896572882,0.06121858722344589,0.20451951423574052],[-0.9749428203519765,0.05052105330592897,0.21664284021631855],[-0.9716054034717977,0.036791729306854364,0.23372913510946056],[-0.9721615439533272,-0.05596310828811722,0.22753035614839492],[-0.9709982840430126,-0.06643076479255634,0.22967212689963304],[-0.9709982840430126,-0.06643076479255634,0.22967212689963304],[-0.9721615439533272,-0.05596310828811722,0.22753035614839492],[-0.9716054034717977,0.036791729306854364,0.23372913510946056],[-0.9749428203519765,0.05052105330592897,0.21664284021631855],[-0.9769462896572882,0.06121858722344589,0.20451951423574052],[-0.97935715046365,0.08010222737236766,0.18558880625109142],[-0.9813481337021347,0.10275637974967967,0.16247143410481973],[-0.9423882349032013,0.08066308089720245,0.3246503998090872],[-0.942363206222241,0.07923629587780034,0.32507414073423907],[-0.9423184734111515,0.07885253342485855,0.32529705292326067],[-0.9417764246931891,0.07782244101450922,0.3271098188172548],[-0.9413412155591994,0.07747492428930762,0.3284423115189257],[-0.9413412155591994,0.07747492428930762,0.3284423115189257],[-0.9417764246931891,0.07782244101450922,0.3271098188172548],[-0.9423184734111515,0.07885253342485855,0.32529705292326067],[-0.942363206222241,0.07923629587780034,0.32507414073423907],[-0.9423882349032013,0.08066308089720245,0.3246503998090872],[-0.9422622707906713,0.08245846015194257,0.3245649632874415],[-0.9412093346213684,0.08859810207827808,0.3259990256576363],[-0.9399152278688822,0.08972400301537273,0.32940699401057777],[-0.9398831018040179,0.08972519346536968,0.3294983226070508],[-0.9379383117004794,0.0879602503245756,0.3354619468841322],[-0.9378307251384059,0.0877442734279759,0.33581910825170197],[-0.9378307251384059,0.0877442734279759,0.33581910825170197],[-0.9379383117004794,0.0879602503245756,0.3354619468841322],[-0.9398831018040179,0.08972519346536968,0.3294983226070508],[-0.9399152278688822,0.08972400301537273,0.32940699401057777],[-0.9412093346213684,0.08859810207827808,0.3259990256576363],[-0.9422622707906713,0.08245846015194257,0.3245649632874415],[-0.9455254746630014,0.08744101504363784,0.31358514896506867],[-0.9414189114187784,0.089291051508023,0.32520384583161666],[-0.9417097584688324,0.09155563200279349,0.32372873992455864],[-0.941695071714499,0.09273674576123205,0.32343513707425375],[-0.9420002851807173,0.09462703566922118,0.32199563170934986],[-0.8012436390033472,0.4639345443288499,0.37785363506926406],[-0.7541099787684421,0.45916234795298844,0.46956158077951676],[-0.7512629457273523,0.4587031332200604,0.47454759713980305],[-0.847253571150891,0.34440324674170786,0.40441042247428843],[-0.9344690294119039,0.10359464725167482,0.3406402532449381],[-0.9354381819706863,0.09226436870930851,0.3412370055812384],[-0.9354381819706863,0.09226436870930851,0.3412370055812384],[-0.9344690294119039,0.10359464725167482,0.3406402532449381],[-0.847253571150891,0.34440324674170786,0.40441042247428843],[-0.7512629457273523,0.4587031332200604,0.47454759713980305],[-0.7406754250779312,0.4570927065748556,0.4924085420478598],[-0.7254810869610906,0.4540165066139024,0.5172486869812847],[-0.6989244509836147,0.4469921606018703,0.5583033406471115],[-0.4623895138336234,0.34033210689778404,0.8187612561126845],[-0.7434762121326033,0.23597590966616996,0.62574634801186],[-0.8029463885185975,0.03897162233363079,0.5947758483812423],[-0.8038813478390355,0.011603601269160366,0.5946764961170755],[-0.8012257686407019,-0.04967326054780673,0.5962967674343591],[-0.8018232501947199,-0.0510059369543982,0.5953804412664054],[-0.8021536321310418,-0.05083295875501872,0.5949500489647745],[-0.8037850305388717,-0.05070319050986649,0.5927552708780793],[-0.8051197864145775,-0.05127724938562405,0.5908915071476234],[-0.8054446802023246,-0.05159012187702368,0.5904213126729835],[-0.8055408862324515,-0.05151321702624197,0.5902967635684986],[-0.8076356314824639,-0.04198118645079419,0.5881855716898414],[-0.8076744332285941,-0.04862201151975119,0.5876205492532086],[-0.8076744332285941,-0.04862201151975119,0.5876205492532086],[-0.8076356314824639,-0.04198118645079419,0.5881855716898414],[-0.8055408862324515,-0.05151321702624197,0.5902967635684986],[-0.8054446802023246,-0.05159012187702368,0.5904213126729835],[-0.8051197864145775,-0.05127724938562405,0.5908915071476234],[-0.8037850305388717,-0.05070319050986649,0.5927552708780793],[-0.8021536321310418,-0.05083295875501872,0.5949500489647745],[-0.8018232501947199,-0.0510059369543982,0.5953804412664054],[-0.8012223744984143,-0.05259214239653308,0.5960509820151844],[-0.8011292145868546,-0.0530843356798378,0.5961325648216844],[-0.8010771730164317,-0.05547655845296967,0.5959846594789301],[-0.801334835046717,-0.05719899249591262,0.5954752365951951],[-0.8016947448028948,-0.0575538637147234,0.5949563756502897],[-0.8022486119492962,-0.05779934862306829,0.5941854928590706],[-0.8022486119492962,-0.05779934862306829,0.5941854928590706],[-0.8016947448028948,-0.0575538637147234,0.5949563756502897],[-0.801334835046717,-0.05719899249591262,0.5954752365951951],[-0.8010771730164317,-0.05547655845296967,0.5959846594789301],[-0.8011292145868546,-0.0530843356798378,0.5961325648216844],[-0.8012223744984143,-0.05259214239653308,0.5960509820151844],[-0.8018232501947199,-0.0510059369543982,0.5953804412664054],[-0.8012257686407019,-0.04967326054780673,0.5962967674343591],[-0.8038813478390355,0.011603601269160366,0.5946764961170755],[-0.8001783714670561,-0.04751647688309128,0.597876875502765],[-0.7267722453223415,-0.029843931541961535,0.6862298763382727],[-0.7371675316862036,-0.03712509876299421,0.6746893783582989],[-0.7539414487784871,-0.05051889401002962,0.6549962848457992],[-0.7576712626486172,-0.05402103751500853,0.6503967906303445],[-0.7777257858806043,-0.0752941626506323,0.6240780328189229],[-0.7744187428284006,-0.11051640910376298,0.6229460121670972],[-0.7750933383169183,-0.1125108037392906,0.6217488527843651],[-0.7751421434998614,-0.1130355238457366,0.6215928150480506],[-0.7753792593742237,-0.11382099349223312,0.6211535925781332],[-0.7753893438044914,-0.11381858104062176,0.6211414461492161],[-0.7808637521355603,-0.09998949970655198,0.6166473064477034],[-0.7848898028488813,-0.08290242311068628,0.6140644800232472],[-0.786229009229165,-0.08398837342555505,0.6122008642397159],[-0.7846502399647639,-0.0931689513609576,0.6128976647251464],[-0.7795540573452678,-0.11450427714992865,0.615779377854523],[-0.7795540573452678,-0.11450427714992865,0.615779377854523],[-0.7846502399647639,-0.0931689513609576,0.6128976647251464],[-0.786229009229165,-0.08398837342555505,0.6122008642397159],[-0.7848898028488813,-0.08290242311068628,0.6140644800232472],[-0.7808637521355603,-0.09998949970655198,0.6166473064477034],[-0.7753893438044914,-0.11381858104062176,0.6211414461492161],[-0.777052427199427,-0.11406522675279492,0.6190142562407693],[-0.777052427199427,-0.11406522675279492,0.6190142562407693],[-0.7753893438044914,-0.11381858104062176,0.6211414461492161],[-0.7753792593742237,-0.11382099349223312,0.6211535925781332],[-0.7748875975951575,-0.11471979209883298,0.6216016251539291],[-0.7743894596130709,-0.11618531719177254,0.621950108054676],[-0.7743894596130709,-0.11618531719177254,0.621950108054676],[-0.7748875975951575,-0.11471979209883298,0.6216016251539291],[-0.7753792593742237,-0.11382099349223312,0.6211535925781332],[-0.7751421434998614,-0.1130355238457366,0.6215928150480506],[-0.7750933383169183,-0.1125108037392906,0.6217488527843651],[-0.7744187428284006,-0.11051640910376298,0.6229460121670972],[-0.7777257858806043,-0.0752941626506323,0.6240780328189229],[-0.7576712626486172,-0.05402103751500853,0.6503967906303445],[-0.7539414487784871,-0.05051889401002962,0.6549962848457992],[-0.7371675316862036,-0.03712509876299421,0.6746893783582989],[-0.7267722453223415,-0.029843931541961535,0.6862298763382727],[-0.8001783714670561,-0.04751647688309128,0.597876875502765],[-0.8038813478390355,0.011603601269160366,0.5946764961170755],[-0.8029463885185975,0.03897162233363079,0.5947758483812423],[-0.7434762121326033,0.23597590966616996,0.62574634801186],[-0.4623895138336234,0.34033210689778404,0.8187612561126845],[-0.4490999896383396,0.3355447150372867,0.8280814836218652],[-0.43202929474145485,0.21409325538276353,0.8760792010342512],[-0.3387166188385578,0.1598625444090175,0.9272081853702814],[-0.33214540558811917,0.15627241373251358,0.9301926479245674],[-0.32519733004067397,0.1525108581309731,0.9332669150283702],[-0.3209735192032633,0.15024793542241532,0.935094411207539],[-0.3344812853363464,0.11597694198751571,0.9352388030267832],[-0.3961451745241385,-0.02078952316425405,0.9179525022722269],[-0.39635498275023134,-0.021002878535994234,0.9178570731558733],[-0.39642926303528836,-0.02127525410219983,0.9178187201033683],[-0.39664254134612814,-0.021579634012508717,0.9177194635564679],[-0.39709545367401017,-0.021414658581332482,0.9175274454038294],[-0.3972039909906974,-0.021410991706045962,0.9174805496440922],[-0.39747579637215324,-0.021483127845229606,0.9173611429073656],[-0.39774447183760775,-0.021647151184667854,0.9172408276827905],[-0.397807116576413,-0.021869071024308868,0.917208396022242],[-0.397807116576413,-0.021869071024308868,0.917208396022242],[-0.39774447183760775,-0.021647151184667854,0.9172408276827905],[-0.39747579637215324,-0.021483127845229606,0.9173611429073656],[-0.3972039909906974,-0.021410991706045962,0.9174805496440922],[-0.39709545367401017,-0.021414658581332482,0.9175274454038294],[-0.39664254134612814,-0.021579634012508717,0.9177194635564679],[-0.39642926303528836,-0.02127525410219983,0.9178187201033683],[-0.39635498275023134,-0.021002878535994234,0.9178570731558733],[-0.3961451745241385,-0.02078952316425405,0.9179525022722269],[-0.3344812853363464,0.11597694198751571,0.9352388030267832],[-0.32315939197975757,-0.012263327712778126,0.9462650887402972],[-0.321291610669539,-0.015912638889311694,0.9468466025903837],],
[[0.43221429967978453,-0.29923396833540866,-0.8506761024894005],[0.4324256925454707,-0.29982326374896384,-0.8503611179619454],[0.4267155841616981,-0.3323403566995538,-0.841108612215066],[0.42819491487775435,-0.3992470924319953,-0.8107101048201082],[0.41271050800080245,-0.6098353083477069,-0.676587712922853],[0.5744738623840904,-0.6306505580924577,-0.5217850659181201],[0.610210253592531,-0.6118308063027603,-0.5032956495634086],[0.6170976917208738,-0.6080106413533969,-0.4995132619598809],[0.7231937974703823,-0.5414298562006588,-0.42877085035587664],[0.7362777128320225,-0.5306599033859767,-0.41987521542147727],[0.8089751232902783,-0.46414678103906076,-0.3607312234178755],[0.8099393327407183,-0.462756790225787,-0.36035320226056966],[0.8049925856356662,-0.42156882609485646,-0.41745258645337113],[0.8041482939843957,-0.417106499478957,-0.4235182279127983],[0.7918757040589431,-0.36526283926232717,-0.48940364483233717],[0.7591625458295425,-0.26625847803485,-0.5939517252135676],[0.74508939676282,-0.2264329433495662,-0.6273515067310105],[0.6227808285346964,0.07498863624001667,-0.778794417060433],[0.626024275505152,0.09930283623553594,-0.7734549458073353],[0.6304629210680915,0.14945864398145361,-0.7616945706105004],[0.6322599480363982,0.2420023051070353,-0.7359906537666715],[0.6334469242623996,0.27346337786525265,-0.7238527302628844],[0.6360985048501354,0.3443728258061862,-0.690496957975692],[0.6354200135277809,0.48593474119154106,-0.6000906879059739],[0.6577581387127344,0.5454618599563135,-0.5194473893380913],[0.2780274919430601,0.6310078824061753,-0.7242442723730206],[0.2780274919430601,0.6310078824061753,-0.7242442723730206],[0.6577581387127344,0.5454618599563135,-0.5194473893380913],[0.6579301515328245,0.5459177729453188,-0.518750133384482],[0.6657344319069042,0.5654284893658796,-0.48691712804851195],[0.6353459207900484,0.6023408608404274,-0.48324015592400693],[0.5355069729941094,0.7126631975484908,-0.45314837386296203],[0.5257418000494735,0.7197531366759937,-0.4533773063639246],[0.36656424446982905,0.8188865332259093,-0.44165088064840907],[0.2267482646283242,0.871870983624215,-0.4340808823274613],[0.22454301289817752,0.8737724838113475,-0.4313955051837668],[0.2237478015560988,0.8744840544481047,-0.43036561179399196],[0.2036820013389941,0.8933667306553184,-0.4005115814664664],[0.1322268479697959,0.9509951131234033,-0.2795073442530227],[0.12468369759374359,0.9558492638194445,-0.2660942697808018],[0.1319392300868117,0.9642063043717841,-0.22999617860696264],[0.1358604088666207,0.9702016578318712,-0.20062575219269263],[0.1392985834348826,0.9755907415159428,-0.16976044804785403],[0.14293560850041215,0.9813467978270108,-0.1285607802453331],[0.1451984796365368,0.9838256872568577,-0.1049019475739599],[0.1514372466252521,0.986551622202601,-0.06150330937420419],[0.1666301753757074,0.9851731203904357,0.040844920301466726],[0.1365086203842857,0.9798840603857686,0.14557686891356983],[0.051649767797245234,0.9780328844065229,0.20195043576567934],[-0.022337657714822608,0.9829206912744326,0.18266894567059613],[-0.06035318077399652,0.9825909647443803,0.17570569021283688],[-0.08358818203247312,0.9813986933649644,0.17282829770048283],[-0.14807221115267277,0.9744449152505966,0.16891337255118652],[-0.1631635268009084,0.9721101634914497,0.1684621428051902],[-0.1704748653934829,0.9709134549494848,0.16812311937127747],[-0.18685521594322274,0.9680446732571866,0.16725620721874132],[-0.30290149107590025,0.9380745711183022,0.16812729024524814],[-0.38480665786618273,0.8389690377832618,0.38477888416970923],[-0.3949876500802385,0.8095551950304121,0.4342869356581691],[-0.39621920579759523,0.805316221962899,0.4409944711677525],[-0.3963817958033787,0.8046353624095713,0.4420898161185197],[-0.3982824967722513,0.7966926195219085,0.454589840146237],[-0.40324264417435574,0.7699852753361975,0.4944876597901247],[-0.34740749760314205,0.46339558434602635,0.8152132009589441],[-0.4490999896383396,0.3355447150372867,0.8280814836218652],[-0.4623895138336234,0.34033210689778404,0.8187612561126845],[-0.6989244509836147,0.4469921606018703,0.5583033406471115],[-0.5855596010739023,0.7943602122979099,0.16159148092703488],[-0.5676774586480058,0.8030568956496856,0.18122341264977745],[-0.5527947269201607,0.808906485601191,0.2002205969464561],[-0.5654607200616618,0.8052823769878066,0.17825394071440662],[-0.5796358462160137,0.8011586824968738,0.14888603440658643],[-0.577285053574911,0.8034156997976969,0.14582585586098631],[-0.5771119377511141,0.80361257010409,0.14542574901252286],[-0.5771119377511141,0.80361257010409,0.14542574901252286],[-0.577285053574911,0.8034156997976969,0.14582585586098631],[-0.5796358462160137,0.8011586824968738,0.14888603440658643],[-0.5654607200616618,0.8052823769878066,0.17825394071440662],[-0.5527947269201607,0.808906485601191,0.2002205969464561],[-0.5676774586480058,0.8030568956496856,0.18122341264977745],[-0.5852120663558256,0.7958656714902077,0.15532118443723583],[-0.585137910788139,0.7965717046680069,0.15194454475497848],[-0.5860580927590422,0.7960112378460219,0.15133413737315846],[-0.5903150544883231,0.7937451101800624,0.14661799517688376],[-0.5909574754910509,0.7934890114883824,0.14541131595730097],[-0.5918657434214609,0.7934112035173639,0.14210420084321737],[-0.5906990621127445,0.7948246103906121,0.13902682020579954],[-0.5894232854121834,0.7960684938709405,0.13731403307732354],[-0.5894232854121834,0.7960684938709405,0.13731403307732354],[-0.5906990621127445,0.7948246103906121,0.13902682020579954],[-0.5918657434214609,0.7934112035173639,0.14210420084321737],[-0.5909574754910509,0.7934890114883824,0.14541131595730097],[-0.5903150544883231,0.7937451101800624,0.14661799517688376],[-0.5860580927590422,0.7960112378460219,0.15133413737315846],[-0.585137910788139,0.7965717046680069,0.15194454475497848],[-0.5852120663558256,0.7958656714902077,0.15532118443723583],[-0.5676774586480058,0.8030568956496856,0.18122341264977745],[-0.5855596010739023,0.7943602122979099,0.16159148092703488],[-0.6989244509836147,0.4469921606018703,0.5583033406471115],[-0.7254810869610906,0.4540165066139024,0.5172486869812847],[-0.7406754250779312,0.4570927065748556,0.4924085420478598],[-0.7512629457273523,0.4587031332200604,0.47454759713980305],[-0.7541099787684421,0.45916234795298844,0.46956158077951676],[-0.8012436390033472,0.4639345443288499,0.37785363506926406],[-0.8932570257437098,0.4370322951822136,0.10533118686916979],[-0.8995511881053894,0.42695035619311567,0.09230955164420429],[-0.9477425959013908,0.3183395769029005,-0.02106859490748171],[-0.7203510254375635,0.505767115735304,-0.47465147718283],[-0.6523554664991892,0.6603513604995409,-0.37197906663551766],[-0.6427808292850914,0.6815202110203642,-0.3498042416471367],[-0.6427808292850914,0.6815202110203642,-0.3498042416471367],[-0.6523554664991892,0.6603513604995409,-0.37197906663551766],[-0.7203510254375635,0.505767115735304,-0.47465147718283],[-0.9477425959013908,0.3183395769029005,-0.02106859490748171],[-0.9522996546164212,0.30398558767680356,-0.02679795332172567],[-0.9575498807599403,0.2853180474739471,-0.0411319540294224],[-0.961341809209047,0.2704116710397323,-0.05195627038362174],[-0.9946981704715339,-0.08467880749629189,-0.05835279960369828],[-0.9937790688186433,-0.09581139878855821,-0.05677445059293896],[-0.9901967446559908,-0.12972196230588376,-0.05179400899900871],[-0.9871767753054752,-0.15251958089041803,-0.047114665896029875],[-0.9861271595469107,-0.1595809736250848,-0.04568520614829278],[-0.9790865542866815,-0.20038399437985774,-0.03515357750508956],[-0.8341973286948677,-0.5312630154629083,0.14790005138472534],[-0.8045219590600333,-0.5522804289456965,0.21847367162604198],[-0.7188932231995421,-0.5771515537745254,0.38741272257558185],[-0.7167850672007781,-0.5773039862691932,0.391074513201353],[-0.6424256261115799,-0.572975534345512,0.5089089819964072],[-0.6322901069297151,-0.5711606966368894,0.5234354585773426],[-0.4812923723450936,-0.7705907377597638,0.41778890267848745],[-0.47693987259856874,-0.774189867481734,0.41612306714994346],[-0.45631680696096416,-0.7904326037563275,0.40864565408669484],[-0.3910287926511657,-0.8336581728691015,0.3900135050563288],[-0.3528192391560054,-0.854052189575483,0.3822478802592644],[-0.2616195082718352,-0.8906240123657836,0.3719463691032293],[-0.2566291987248738,-0.8921832615681744,0.3716859993857771],[-0.2511717436807564,-0.9172172627296064,0.3092333231189304],[-0.1729205427380198,-0.9836841652457241,-0.049638180305201327],[-0.15705195631564464,-0.9824123117164932,-0.10099867724522164],[-0.13271844699841662,-0.9744321864912229,-0.1812945883259156],[-0.21262020236980828,-0.873935223167796,-0.4370696457669834],[-0.37177911972616523,-0.8443200792910351,-0.3858806678775422],[-0.5036256683952072,-0.8050366170909191,-0.3134919955537775],[-0.4971806585066316,-0.8185506787597034,-0.2877258749381795],[-0.5130362528475119,-0.7982211423096586,-0.3156529918027833],[-0.5156516987167762,-0.7962809717950476,-0.3162909097138864],[-0.5172006542138261,-0.7960673822355014,-0.3142931851337319],[-0.5172006542138261,-0.7960673822355014,-0.3142931851337319],[-0.5156516987167762,-0.7962809717950476,-0.3162909097138864],[-0.5155992519437306,-0.7956525239414587,-0.31795356978755895],[-0.5173112270037007,-0.791379256208916,-0.32574217912046405],[-0.5194194142715575,-0.7885284710672592,-0.32928152452593334],[-0.5221264128821246,-0.785800717417344,-0.3315135615283824],[-0.5255435314923981,-0.7837883176815833,-0.3308774237876803],[-0.5295630460767029,-0.7819195010330442,-0.3288842868459954],[-0.5405202647743702,-0.7646139075695911,-0.35100344117886606],[-0.5385541841036704,-0.7785020911678082,-0.3223257433587634],[-0.5595090886621742,-0.7510643476571531,-0.35050238998152095],[-0.5488253216688853,-0.7706573585139107,-0.32384873330523667],[-0.5488253216688853,-0.7706573585139107,-0.32384873330523667],[-0.5595090886621742,-0.7510643476571531,-0.35050238998152095],[-0.6065062708811494,-0.6674470306901503,-0.43204699351429754],[-0.7755277213985209,-0.5364003759510828,-0.33291348729355347],[-0.7933116431900376,-0.5392363839142194,-0.2826318436451197],[-0.8795501665991797,-0.24850379947950318,-0.4057553032057699],[-0.881213276343033,-0.22767101798110273,-0.4142813888750324],[-0.7061418168753041,-0.3012265093061982,-0.6408013144112983],[-0.7665494072790359,-0.49819057727771227,-0.40522605408815776],[-0.5864375013003782,-0.5674030303186922,-0.5780526431508936],[-0.5443856397520574,-0.5725637918830141,-0.6130375024876438],[-0.6500696093305104,-0.1870176964859046,-0.7365011094533286],[-0.6419866293823635,-0.1728477949998379,-0.7469784518029725],[-0.671643524694202,-0.14411231861320437,-0.7267232040882382],[-0.7242448687292564,-0.09161894550630155,-0.6834291030850644],[-0.7508253783020608,-0.0649710342652021,-0.6572975095069791],[-0.7438979316275864,0.12099082438169916,-0.6572496388250325],[-0.7356095883911069,0.1911976790297429,-0.649863047880633],[-0.7322027275513565,0.2582537978807943,-0.6302254688970448],[-0.7282475920329703,0.2640141567544682,-0.6324175596324058],[-0.7284635092967051,0.2651730594387131,-0.631683594983313],[-0.7284635092967051,0.2651730594387131,-0.631683594983313],[-0.7282475920329703,0.2640141567544682,-0.6324175596324058],[-0.7322027275513565,0.2582537978807943,-0.6302254688970448],[-0.7356095883911069,0.1911976790297429,-0.649863047880633],[-0.7438979316275864,0.12099082438169916,-0.6572496388250325],[-0.7508253783020608,-0.0649710342652021,-0.6572975095069791],[-0.7242448687292564,-0.09161894550630155,-0.6834291030850644],[-0.671643524694202,-0.14411231861320437,-0.7267232040882382],[-0.7039422302476893,0.254096345174336,-0.6632498653169513],[-0.6706931307289961,0.2658269025036458,-0.6924642823267169],[-0.6191882526952569,0.2762307982139184,-0.7350526878001985],[-0.5724915339015342,0.2825701412446976,-0.7696801666198891],[-0.5237619749387372,0.2854905554633392,-0.8026011066211582],[-0.5458813504400547,0.31515167698538,-0.7763330288832525],[-0.5653961067094376,0.3350227843180163,-0.7537154479680075],[-0.5666849855191499,0.3365345295947813,-0.7520722289631364],[-0.6675369903168535,0.4509227705420375,-0.5925057143736338],[-0.6914981484279149,0.34953818341952175,-0.6321814368142632],[-0.697338726354745,0.3033601345022461,-0.6493776478450125],[-0.697338726354745,0.3033601345022461,-0.6493776478450125],[-0.6914981484279149,0.34953818341952175,-0.6321814368142632],[-0.6675369903168535,0.4509227705420375,-0.5925057143736338],[-0.5666849855191499,0.3365345295947813,-0.7520722289631364],[-0.5391808238402926,0.4910922194881379,-0.6841874532327511],[-0.5319638040721771,0.49819907443018546,-0.6846986150080668],[-0.5305033350202296,0.500660533157823,-0.6840359947185078],[-0.526268015254478,0.5051250774180206,-0.6840253155282714],[-0.5267107833179132,0.5068873123929433,-0.6823789293872496],[-0.5263394103492754,0.5145440038728015,-0.6769130617677013],[-0.5237495249341114,0.5224195872743771,-0.672877559414313],[-0.5216657467751912,0.5260004792635524,-0.6717055489245235],[-0.5227808334695289,0.5283768828847408,-0.6689679138717415],[-0.5247447250227206,0.5300246616272515,-0.6661207335218945],[-0.5247758760959197,0.5300955411340622,-0.6660397864523904],[-0.48327365277570905,0.7002734594422745,-0.5254176039433517],[-0.5187613130754098,0.674781920110045,-0.524934339083354],[-0.6513475548697684,0.5693697786741969,-0.5015619781220166],[-0.6746016439671553,0.548072923828935,-0.49449842479265194],[-0.693289889453681,0.5292661509428674,-0.48910783130862323],[-0.630167786569496,0.6917317678135413,-0.3526977773783884],[-0.6321359604227152,0.6915250177741656,-0.3495672715413893],[-0.6319858499255165,0.6936952185733157,-0.34551530967880745],[-0.6308993824062412,0.6964968267688727,-0.341845198270086],[-0.6308993824062412,0.6964968267688727,-0.341845198270086],[-0.6319858499255165,0.6936952185733157,-0.34551530967880745],[-0.6321359604227152,0.6915250177741656,-0.3495672715413893],[-0.630167786569496,0.6917317678135413,-0.3526977773783884],[-0.693289889453681,0.5292661509428674,-0.48910783130862323],[-0.6746016439671553,0.548072923828935,-0.49449842479265194],[-0.6513475548697684,0.5693697786741969,-0.5015619781220166],[-0.5187613130754098,0.674781920110045,-0.524934339083354],[-0.48327365277570905,0.7002734594422745,-0.5254176039433517],[-0.5247758760959197,0.5300955411340622,-0.6660397864523904],[-0.5247447250227206,0.5300246616272515,-0.6661207335218945],[-0.5227808334695289,0.5283768828847408,-0.6689679138717415],[-0.5216657467751912,0.5260004792635524,-0.6717055489245235],[-0.5237495249341114,0.5224195872743771,-0.672877559414313],[-0.5263394103492754,0.5145440038728015,-0.6769130617677013],[-0.5267107833179132,0.5068873123929433,-0.6823789293872496],[-0.526268015254478,0.5051250774180206,-0.6840253155282714],[-0.5305033350202296,0.500660533157823,-0.6840359947185078],[-0.5319638040721771,0.49819907443018546,-0.6846986150080668],[-0.5391808238402926,0.4910922194881379,-0.6841874532327511],[-0.5666849855191499,0.3365345295947813,-0.7520722289631364],[-0.5653961067094376,0.3350227843180163,-0.7537154479680075],[-0.5458813504400547,0.31515167698538,-0.7763330288832525],[-0.5237619749387372,0.2854905554633392,-0.8026011066211582],[-0.5724915339015342,0.2825701412446976,-0.7696801666198891],[-0.6191882526952569,0.2762307982139184,-0.7350526878001985],[-0.6706931307289961,0.2658269025036458,-0.6924642823267169],[-0.7039422302476893,0.254096345174336,-0.6632498653169513],[-0.671643524694202,-0.14411231861320437,-0.7267232040882382],[-0.6419866293823635,-0.1728477949998379,-0.7469784518029725],[-0.6500696093305104,-0.1870176964859046,-0.7365011094533286],[-0.5443856397520574,-0.5725637918830141,-0.6130375024876438],[-0.5864375013003782,-0.5674030303186922,-0.5780526431508936],[-0.7665494072790359,-0.49819057727771227,-0.40522605408815776],[-0.7061418168753041,-0.3012265093061982,-0.6408013144112983],[-0.881213276343033,-0.22767101798110273,-0.4142813888750324],[-0.8795501665991797,-0.24850379947950318,-0.4057553032057699],[-0.7933116431900376,-0.5392363839142194,-0.2826318436451197],[-0.7755277213985209,-0.5364003759510828,-0.33291348729355347],[-0.6065062708811494,-0.6674470306901503,-0.43204699351429754],[-0.5595090886621742,-0.7510643476571531,-0.35050238998152095],[-0.5385541841036704,-0.7785020911678082,-0.3223257433587634],[-0.5405202647743702,-0.7646139075695911,-0.35100344117886606],[-0.5295630460767029,-0.7819195010330442,-0.3288842868459954],[-0.5255435314923981,-0.7837883176815833,-0.3308774237876803],[-0.5221264128821246,-0.785800717417344,-0.3315135615283824],[-0.5194194142715575,-0.7885284710672592,-0.32928152452593334],[-0.5173112270037007,-0.791379256208916,-0.32574217912046405],[-0.5155992519437306,-0.7956525239414587,-0.31795356978755895],[-0.5156516987167762,-0.7962809717950476,-0.3162909097138864],[-0.5130362528475119,-0.7982211423096586,-0.3156529918027833],[-0.4971806585066316,-0.8185506787597034,-0.2877258749381795],[-0.5036256683952072,-0.8050366170909191,-0.3134919955537775],[-0.37177911972616523,-0.8443200792910351,-0.3858806678775422],[-0.21262020236980828,-0.873935223167796,-0.4370696457669834],[-0.21702852701700204,-0.8657621205144768,-0.45094852161095644],[-0.22286574340266677,-0.8524603638340322,-0.472908224193158],[-0.2286068156860072,-0.8380535201600127,-0.4953839129092863],[-0.4641706041966114,-0.7389610306935877,-0.4883464398518979],[-0.47875071756448306,-0.732066113567579,-0.48464105872032054],[-0.4949207143578371,-0.6919754890218439,-0.5255696044222006],[-0.530395342405725,-0.6086750261454273,-0.5900809209770956],[-0.5295799290892771,-0.6061979563066596,-0.5933541408597612],[-0.5273824651737613,-0.6041100684003013,-0.5974267826977879],[-0.5296136047756484,-0.6006068582980431,-0.5989831645396201],[-0.5319760821938445,-0.5945230329257604,-0.602945943924033],[-0.5323361561415222,-0.5912092988427167,-0.605879345931492],[-0.5323361561415222,-0.5912092988427167,-0.605879345931492],[-0.5319760821938445,-0.5945230329257604,-0.602945943924033],[-0.5296136047756484,-0.6006068582980431,-0.5989831645396201],[-0.5273824651737613,-0.6041100684003013,-0.5974267826977879],[-0.5295799290892771,-0.6061979563066596,-0.5933541408597612],[-0.530395342405725,-0.6086750261454273,-0.5900809209770956],[-0.4949207143578371,-0.6919754890218439,-0.5255696044222006],[-0.47875071756448306,-0.732066113567579,-0.48464105872032054],[-0.4641706041966114,-0.7389610306935877,-0.4883464398518979],[-0.2286068156860072,-0.8380535201600127,-0.4953839129092863],[-0.22234906410501634,-0.8263138692565418,-0.5174613832605347],[-0.21136930237716337,-0.8015251688679793,-0.559357150382248],[-0.201624660559283,-0.7745154205958558,-0.5995609723068861],[-0.17573023131656287,-0.696312026380498,-0.6958939917252569],[-0.16374219763072817,-0.6617532864019016,-0.7316222253672605],[-0.1615340236156961,-0.6559916834107615,-0.7372799132693357],[-0.14513117071251094,-0.6149054225251815,-0.7751311273821637],[-0.11052230421617362,-0.5369456556425904,-0.8363457318342076],[-0.023611753975673295,-0.5269290460507239,-0.8495812294903098],[0.001816495363077252,-0.5240635414408633,-0.8516772304559143],[0.11973976387482586,-0.5604643352825689,-0.8194767341562964],[0.15623120191414103,-0.5698400744085205,-0.8067676872226321],[0.1880104354796975,-0.5772059096488411,-0.7946605652838126],[0.19578594257717188,-0.5788478101873721,-0.7915826408723555],[0.3031974326116359,-0.5949552299633554,-0.7443786611644395],[0.37042075704305755,-0.6036416276411863,-0.7059782207195542],[0.41271050800080245,-0.6098353083477069,-0.676587712922853],[0.42819491487775435,-0.3992470924319953,-0.8107101048201082],[0.4267155841616981,-0.3323403566995538,-0.841108612215066],[0.4185641084761944,-0.300332427118632,-0.8570907305043965],[0.407384675065014,-0.32754386623495535,-0.8524979426450429],[0.407384675065014,-0.32754386623495535,-0.8524979426450429],[0.4185641084761944,-0.300332427118632,-0.8570907305043965],[0.4188011705251457,-0.29743195736216826,-0.8579859033262011],[0.401747335976162,-0.2959668810664189,-0.8666041099301764],[0.4016719306771236,-0.29574901007997506,-0.8667134377306186],[0.3604115306414012,-0.28815749213649317,-0.8871689739313077],[0.18064759163256344,-0.2856523284937086,-0.9411531197756703],[0.18057888425416668,-0.28565418583305907,-0.9411657413429223],[0.1936595867021624,-0.26266740989797593,-0.9452522394873426],[0.26779863587105013,-0.12008239955031172,-0.9559623988127589],[0.07317730114969377,-0.09145020042629443,-0.9931172858421293],[0.07109196597977312,-0.1315779103473793,-0.9887533493656282],[0.057557676035766114,-0.07820676915789818,-0.9952742411954834],[0.05708458113365979,-0.07776025765877366,-0.9953364722171271],[0.05558113920562832,-0.0783683088243063,-0.9953738720383527],[0.05558113920562832,-0.0783683088243063,-0.9953738720383527],[0.05708458113365979,-0.07776025765877366,-0.9953364722171271],[0.057168700942726976,-0.07755716159794963,-0.9953474902351392],[0.059817798263063854,-0.060259000192648245,-0.9963888216488289],[0.058230894697868546,-0.04937783357585568,-0.9970812366372366],[0.05742406709515686,-0.04748590078097,-0.9972199184459117],[0.05067023827333636,-0.044519250115175074,-0.9977226885876185],[0.03962211407447316,-0.04295526347311252,-0.9982910063785133],[0.03140296599196128,-0.0440856632607824,-0.9985340795494988],[0.027942058645298033,-0.045495531292580244,-0.9985736818037358],[0.026953680315141528,-0.047795967851777615,-0.9984933873464467],[0.02443897455624587,-0.06435956206090644,-0.9976274772148006],[0.02599474071257101,-0.07518666247122724,-0.9968305970633746],[0.0033796484204141383,-0.07159381698162172,-0.9974281444528005],[0.0010668991189918171,-0.06416978633666515,-0.9979384250783094],[0.003570646498066085,-0.06113058699598982,-0.9981233900761528],[0.0015329272260439554,-0.05284901517376833,-0.9986013377365778],[-0.021998526375600576,-0.05842097299692872,-0.9980496253951475],[-0.02383106525987769,-0.05722093124108135,-0.9980770738557634],[-0.034855560916412426,-0.06222466668584985,-0.9974533476454112],[-0.03711081537941686,-0.06253112470847168,-0.9973528191290023],[-0.052595533865566785,-0.060307149347298715,-0.9967932371133938],[-0.053990211120578294,-0.05973287346692184,-0.9967532497717478],[-0.05567528935233136,-0.05577313696103493,-0.996889973542246],[-0.05567528935233136,-0.05577313696103493,-0.996889973542246],[-0.053990211120578294,-0.05973287346692184,-0.9967532497717478],[-0.052595533865566785,-0.060307149347298715,-0.9967932371133938],[-0.03711081537941686,-0.06253112470847168,-0.9973528191290023],[-0.034855560916412426,-0.06222466668584985,-0.9974533476454112],[-0.02383106525987769,-0.05722093124108135,-0.9980770738557634],[-0.021687463788733107,-0.0428852106532045,-0.9988445888233278],[-0.02327282192509824,-0.03216531500325621,-0.9992115733268826],[-0.024329018414377394,-0.029727025622760906,-0.9992619290309306],[-0.0280029749217207,-0.02809693792745504,-0.999212887964639],[-0.039218059515431176,-0.026405227635007435,-0.9988817286152488],[-0.04979331483086498,-0.027993127348828372,-0.998367172246457],[-0.05487599867678051,-0.030284198505150635,-0.9980338130995997],[-0.060417899491660675,-0.024176350046248005,-0.9978803442895631],[-0.06561970226566566,-0.021342533989052084,-0.9976164347671361],[-0.07089119512953335,-0.014043615264165133,-0.9973851890435403],[-0.46202541688706283,0.06279058716159407,-0.884641088981423],[-0.4407943028897837,0.11861310061212764,-0.8897366548047163],[-0.39333235883859896,0.15118325207640784,-0.9068810725679883],[-0.36093799487223155,0.4575882305249452,-0.8126110848017413],[-0.36093799487223155,0.4575882305249452,-0.8126110848017413],[-0.39333235883859896,0.15118325207640784,-0.9068810725679883],[-0.37572741687442884,0.16239448800695208,-0.9123907816685948],[-0.34404733349253935,0.45617291752029343,-0.8206934273147903],[-0.3446718741487391,0.49759676024245303,-0.7959891728955932],[-0.3458079313262379,0.49793326031004065,-0.7952856989213885],[-0.3487883818480694,0.5056809834544219,-0.7890712310434173],[-0.3450609542040995,0.5193108916936765,-0.7818242357794206],[-0.3353389604504304,0.5234812955228443,-0.7832720567221514],[-0.33753267234555695,0.5386619996448185,-0.771955274117557],[-0.3388457798829296,0.5384606908337567,-0.771520331476989],[-0.3447104030556737,0.5305501374118136,-0.7743973719722329],[-0.34618794338254233,0.5376405810202225,-0.7688280129501027],[-0.3527052980944083,0.5336617114752354,-0.7686378538697253],[-0.3532270636629249,0.5278129385079334,-0.7724274357113997],[-0.3532270636629249,0.5278129385079334,-0.7724274357113997],[-0.3527052980944083,0.5336617114752354,-0.7686378538697253],[-0.34618794338254233,0.5376405810202225,-0.7688280129501027],[-0.3447104030556737,0.5305501374118136,-0.7743973719722329],[-0.3388457798829296,0.5384606908337567,-0.771520331476989],[-0.33753267234555695,0.5386619996448185,-0.771955274117557],[-0.3303000059021066,0.5444176488702502,-0.771045608054191],[-0.3289490219228976,0.5469398702326471,-0.7698372031318468],[-0.34659581979102644,0.5450644685911294,-0.7633977094430243],[-0.3540389862724953,0.5506625377459495,-0.7559280162306029],[-0.3533173970852651,0.5518901368306741,-0.7553701700397712],[-0.35090453547804074,0.5601474093652612,-0.7504004842497951],[-0.35108050685250547,0.5681536700576936,-0.744274065723213],[-0.3513758520309642,0.5690093063419303,-0.7434806116542579],[-0.3563708216985119,0.5703631443703494,-0.7400579173185674],[-0.36688514650293036,0.5703408828239632,-0.7349194286825635],[-0.3686969061975186,0.5698946538984535,-0.73435868267376],[-0.3686969061975186,0.5698946538984535,-0.73435868267376],[-0.36688514650293036,0.5703408828239632,-0.7349194286825635],[-0.3563708216985119,0.5703631443703494,-0.7400579173185674],[-0.3513758520309642,0.5690093063419303,-0.7434806116542579],[-0.347843033277917,0.5724162946885542,-0.7425259657244615],[-0.3458646774405159,0.5736176609682775,-0.742522998919394],[-0.2861983552499277,0.5832518789367369,-0.7602024382814108],[-0.26895379923691215,0.5956765864187197,-0.7568574887444615],[-0.09202255185688701,0.6990548647002858,-0.7091220953323989],[-0.09533041839349621,0.7146776433895046,-0.6929271082647476],[-0.09831654257764044,0.7272411479044776,-0.6793041809455886],[-0.09866398358276518,0.727357019153905,-0.6791297262166677],[-0.10170015330058305,0.7282770475735872,-0.6776943417176632],[-0.1014736386619759,0.8394659690820199,-0.5338539008098416],[-0.10502266491629753,0.8828734713916134,-0.4577168047677528],[-0.11005305320171442,0.8828714084531087,-0.4565374044007838],[-0.11378221091658201,0.8833758763158007,-0.4546434532930455],[-0.11734783576854113,0.8816569023577555,-0.4570673823030549],[-0.12610658391507026,0.8579555969595528,-0.49800534448843914],[-0.12700238283006215,0.8772340093119634,-0.4629588401380241],[-0.12130822450431386,0.8805196023806012,-0.4582243386062323],[-0.15192946637174323,0.8800103156059559,-0.4499992018605181],[-0.37832834144003413,0.8391201527820269,-0.3908260933692899],[-0.378056905965176,0.8420579915715308,-0.38472238651079044],[-0.37688417176645406,0.8632566510864768,-0.3357771216549377],[-0.14419474946723568,0.8947455207726297,-0.4226562755755521],[-0.14419474946723568,0.8947455207726297,-0.4226562755755521],[-0.37688417176645406,0.8632566510864768,-0.3357771216549377],[-0.378056905965176,0.8420579915715308,-0.38472238651079044],[-0.37832834144003413,0.8391201527820269,-0.3908260933692899],[-0.15192946637174323,0.8800103156059559,-0.4499992018605181],[-0.12130822450431386,0.8805196023806012,-0.4582243386062323],[-0.12700238283006215,0.8772340093119634,-0.4629588401380241],[-0.12610658391507026,0.8579555969595528,-0.49800534448843914],[-0.11734783576854113,0.8816569023577555,-0.4570673823030549],[-0.11378221091658201,0.8833758763158007,-0.4546434532930455],[-0.11601666031205708,0.8859980947622913,-0.4489404310235677],[-0.11628713431302984,0.887799567732587,-0.4452967885883472],[-0.11628713431302984,0.887799567732587,-0.4452967885883472],[-0.11601666031205708,0.8859980947622913,-0.4489404310235677],[-0.11378221091658201,0.8833758763158007,-0.4546434532930455],[-0.11005305320171442,0.8828714084531087,-0.4565374044007838],[-0.10502266491629753,0.8828734713916134,-0.4577168047677528],[-0.1014736386619759,0.8394659690820199,-0.5338539008098416],[-0.10170015330058305,0.7282770475735872,-0.6776943417176632],[-0.09866398358276518,0.727357019153905,-0.6791297262166677],[-0.09117888726051641,0.8241302371602285,-0.5590132044202173],[-0.08167774983461445,0.8798083657471433,-0.4682584593398128],[-0.08167774983461445,0.8798083657471433,-0.4682584593398128],[-0.09117888726051641,0.8241302371602285,-0.5590132044202173],[-0.09866398358276518,0.727357019153905,-0.6791297262166677],[-0.09831654257764044,0.7272411479044776,-0.6793041809455886],[-0.09533041839349621,0.7146776433895046,-0.6929271082647476],[-0.09202255185688701,0.6990548647002858,-0.7091220953323989],[-0.26895379923691215,0.5956765864187197,-0.7568574887444615],[-0.2861983552499277,0.5832518789367369,-0.7602024382814108],[-0.3458646774405159,0.5736176609682775,-0.742522998919394],[-0.347843033277917,0.5724162946885542,-0.7425259657244615],[-0.3513758520309642,0.5690093063419303,-0.7434806116542579],[-0.35108050685250547,0.5681536700576936,-0.744274065723213],[-0.35090453547804074,0.5601474093652612,-0.7504004842497951],[-0.3533173970852651,0.5518901368306741,-0.7553701700397712],[-0.3540389862724953,0.5506625377459495,-0.7559280162306029],[-0.34659581979102644,0.5450644685911294,-0.7633977094430243],[-0.3289490219228976,0.5469398702326471,-0.7698372031318468],[-0.3303000059021066,0.5444176488702502,-0.771045608054191],[-0.33753267234555695,0.5386619996448185,-0.771955274117557],[-0.3353389604504304,0.5234812955228443,-0.7832720567221514],[-0.3450609542040995,0.5193108916936765,-0.7818242357794206],[-0.3487883818480694,0.5056809834544219,-0.7890712310434173],[-0.3458079313262379,0.49793326031004065,-0.7952856989213885],[-0.3446718741487391,0.49759676024245303,-0.7959891728955932],[-0.3312849798021921,0.4971491071931748,-0.8019308120869845],[-0.3278836496603544,0.49789392174214686,-0.8028660878238855],[-0.3278836496603544,0.49789392174214686,-0.8028660878238855],[-0.3312849798021921,0.4971491071931748,-0.8019308120869845],[-0.3446718741487391,0.49759676024245303,-0.7959891728955932],[-0.34404733349253935,0.45617291752029343,-0.8206934273147903],[-0.37572741687442884,0.16239448800695208,-0.9123907816685948],[-0.39333235883859896,0.15118325207640784,-0.9068810725679883],[-0.4407943028897837,0.11861310061212764,-0.8897366548047163],[-0.46202541688706283,0.06279058716159407,-0.884641088981423],[-0.07089119512953335,-0.014043615264165133,-0.9973851890435403],[-0.06561970226566566,-0.021342533989052084,-0.9976164347671361],[-0.060417899491660675,-0.024176350046248005,-0.9978803442895631],[-0.05487599867678051,-0.030284198505150635,-0.9980338130995997],[-0.04979331483086498,-0.027993127348828372,-0.998367172246457],[-0.039218059515431176,-0.026405227635007435,-0.9988817286152488],[-0.0280029749217207,-0.02809693792745504,-0.999212887964639],[-0.024329018414377394,-0.029727025622760906,-0.9992619290309306],[-0.02327282192509824,-0.03216531500325621,-0.9992115733268826],[-0.021687463788733107,-0.0428852106532045,-0.9988445888233278],[-0.02383106525987769,-0.05722093124108135,-0.9980770738557634],[-0.021998526375600576,-0.05842097299692872,-0.9980496253951475],[0.0015329272260439554,-0.05284901517376833,-0.9986013377365778],[0.001738799355447488,-0.05248975571507744,-0.9986199487902158],[-0.00022389091365857225,-0.04412450122487201,-0.999026014808681],[0.0018652074715677883,-0.04116650831138681,-0.999150559022281],[0.0018652074715677883,-0.04116650831138681,-0.999150559022281],[-0.00022389091365857225,-0.04412450122487201,-0.999026014808681],[0.001738799355447488,-0.05248975571507744,-0.9986199487902158],[0.0015329272260439554,-0.05284901517376833,-0.9986013377365778],[0.003570646498066085,-0.06113058699598982,-0.9981233900761528],[0.0010668991189918171,-0.06416978633666515,-0.9979384250783094],[0.0033796484204141383,-0.07159381698162172,-0.9974281444528005],[0.02599474071257101,-0.07518666247122724,-0.9968305970633746],[0.02443897455624587,-0.06435956206090644,-0.9976274772148006],[0.026953680315141528,-0.047795967851777615,-0.9984933873464467],[0.027942058645298033,-0.045495531292580244,-0.9985736818037358],[0.03140296599196128,-0.0440856632607824,-0.9985340795494988],[0.03962211407447316,-0.04295526347311252,-0.9982910063785133],[0.05067023827333636,-0.044519250115175074,-0.9977226885876185],[0.05742406709515686,-0.04748590078097,-0.9972199184459117],[0.058230894697868546,-0.04937783357585568,-0.9970812366372366],[0.059817798263063854,-0.060259000192648245,-0.9963888216488289],[0.057168700942726976,-0.07755716159794963,-0.9953474902351392],[0.05708458113365979,-0.07776025765877366,-0.9953364722171271],[0.057557676035766114,-0.07820676915789818,-0.9952742411954834],[0.07109196597977312,-0.1315779103473793,-0.9887533493656282],[0.07317730114969377,-0.09145020042629443,-0.9931172858421293],[0.26779863587105013,-0.12008239955031172,-0.9559623988127589],[0.29668765250343876,-0.06566002998254614,-0.9527146463210745],[0.30329186235455885,-0.053694274272622244,-0.9513837139345196],[0.3087229378235688,-0.045156041185768436,-0.9500795122546397],[0.3181866302529803,-0.030881903512801498,-0.9475249740052656],[0.29344857374968175,-0.025569899314089616,-0.9556328347296074],[0.0955677243667693,0.021418391220636518,-0.9951924751408027],[0.07841569132459394,0.021817743974329385,-0.9966819780662017],[0.07290952705861233,0.02255106769874686,-0.9970835723296899],[0.05713576473664538,0.022918245201235272,-0.9981033305348974],[0.067722287746635,0.08854718530937537,-0.9937671194581502],[0.05556691110488695,0.09031467839296552,-0.9943618945117703],[0.05086382051622147,0.09236780455506273,-0.9944249898530162],[0.04913581960095956,0.09619971888676503,-0.9941485227662159],[0.04733261132848037,0.10788503026746267,-0.9930359732401519],[0.04733261132848037,0.10788503026746267,-0.9930359732401519],[0.04913581960095956,0.09619971888676503,-0.9941485227662159],[0.05086382051622147,0.09236780455506273,-0.9944249898530162],[0.05556691110488695,0.09031467839296552,-0.9943618945117703],[0.067722287746635,0.08854718530937537,-0.9937671194581502],[0.05713576473664538,0.022918245201235272,-0.9981033305348974],[0.07290952705861233,0.02255106769874686,-0.9970835723296899],[0.07841569132459394,0.021817743974329385,-0.9966819780662017],[0.0955677243667693,0.021418391220636518,-0.9951924751408027],[0.29344857374968175,-0.025569899314089616,-0.9556328347296074],[0.3181866302529803,-0.030881903512801498,-0.9475249740052656],[0.35133978562917695,0.001295349325922379,-0.9362471239497443],[0.3264009766566916,0.030886148697630324,-0.9447266526653019],[0.09637089629931385,0.07744577290002126,-0.9923279712909362],[0.09077250613647139,0.08546130647533909,-0.9921979224052188],[0.26270707433927554,0.10288480325843373,-0.959374645459516],[0.2614203431523094,0.10406060104506643,-0.95959928902447],[0.24943368995149706,0.11638199036471564,-0.9613730111855272],[0.23413138492201385,0.13308322455460353,-0.9630531397262815],[0.12756249812404313,0.2641812763988824,-0.9560000325693565],[0.11177130095745122,0.2803756323475666,-0.9533607297702067],[0.09452938133686914,0.13829397674246827,-0.985869652672615],[0.08639159781982171,0.13235688053570743,-0.9874300724613336],[0.07578999097667073,0.2125258744107731,-0.9742117993402115],[0.07696335057845544,0.3148221185499199,-0.9460251985753224],[0.04839749254282385,0.34495104058053433,-0.9373721045123831],[0.1924991682499803,0.3270753194468838,-0.9251842009198952],[0.1924991682499803,0.3270753194468838,-0.9251842009198952],[0.04839749254282385,0.34495104058053433,-0.9373721045123831],[0.07696335057845544,0.3148221185499199,-0.9460251985753224],[0.07578999097667073,0.2125258744107731,-0.9742117993402115],[0.08639159781982171,0.13235688053570743,-0.9874300724613336],[0.09452938133686914,0.13829397674246827,-0.985869652672615],[0.11177130095745122,0.2803756323475666,-0.9533607297702067],[0.12756249812404313,0.2641812763988824,-0.9560000325693565],[0.23413138492201385,0.13308322455460353,-0.9630531397262815],[0.24943368995149706,0.11638199036471564,-0.9613730111855272],[0.2614203431523094,0.10406060104506643,-0.95959928902447],[0.26270707433927554,0.10288480325843373,-0.959374645459516],[0.2659508011725224,0.10009735178692708,-0.9587756210505864],[0.2620234061494616,0.2372769016582662,-0.9354375481929769],[0.2553372353021613,0.2668878747357307,-0.9292866934306623],[0.2553372353021613,0.2668878747357307,-0.9292866934306623],[0.2620234061494616,0.2372769016582662,-0.9354375481929769],[0.2659508011725224,0.10009735178692708,-0.9587756210505864],[0.26270707433927554,0.10288480325843373,-0.959374645459516],[0.09077250613647139,0.08546130647533909,-0.9921979224052188],[0.09637089629931385,0.07744577290002126,-0.9923279712909362],[0.3264009766566916,0.030886148697630324,-0.9447266526653019],[0.29225508920630355,0.07265156759687982,-0.9535767995073766],[0.27632512216122856,0.09002825504760033,-0.9568381995696379],[0.27984712399505113,0.2380108542460513,-0.9300733414375253],[0.2718313428250188,0.28047005482277865,-0.9205673627745309],[0.26909175679157527,0.28173376743867234,-0.9209862706423131],[0.26909175679157527,0.28173376743867234,-0.9209862706423131],[0.2718313428250188,0.28047005482277865,-0.9205673627745309],[0.27984712399505113,0.2380108542460513,-0.9300733414375253],[0.27632512216122856,0.09002825504760033,-0.9568381995696379],[0.29225508920630355,0.07265156759687982,-0.9535767995073766],[0.3264009766566916,0.030886148697630324,-0.9447266526653019],[0.35133978562917695,0.001295349325922379,-0.9362471239497443],[0.3181866302529803,-0.030881903512801498,-0.9475249740052656],[0.3087229378235688,-0.045156041185768436,-0.9500795122546397],[0.30329186235455885,-0.053694274272622244,-0.9513837139345196],[0.29668765250343876,-0.06566002998254614,-0.9527146463210745],[0.26779863587105013,-0.12008239955031172,-0.9559623988127589],[0.1936595867021624,-0.26266740989797593,-0.9452522394873426],[0.18057888425416668,-0.28565418583305907,-0.9411657413429223],[0.18064759163256344,-0.2856523284937086,-0.9411531197756703],[0.3604115306414012,-0.28815749213649317,-0.8871689739313077],[0.4016719306771236,-0.29574901007997506,-0.8667134377306186],[0.40044765087545525,-0.28056742799123735,-0.8723093472264937],[0.4018414000087321,-0.27355842110628864,-0.8738931739525471],[0.4018414000087321,-0.27355842110628864,-0.8738931739525471],[0.40044765087545525,-0.28056742799123735,-0.8723093472264937],[0.4016719306771236,-0.29574901007997506,-0.8667134377306186],[0.401747335976162,-0.2959668810664189,-0.8666041099301764],[0.4188011705251457,-0.29743195736216826,-0.8579859033262011],[0.4185641084761944,-0.300332427118632,-0.8570907305043965],[0.4267155841616981,-0.3323403566995538,-0.841108612215066],[0.4324256925454707,-0.29982326374896384,-0.8503611179619454],[0.43221429967978453,-0.29923396833540866,-0.8506761024894005],[0.426644707295312,-0.2932962017076219,-0.8555417183286738],[0.4300063802136197,-0.2862285133790606,-0.8562521539268634],[0.43063590826395093,-0.28305722391055416,-0.856989686347352],[0.43063590826395093,-0.28305722391055416,-0.856989686347352],[0.4300063802136197,-0.2862285133790606,-0.8562521539268634],[0.426644707295312,-0.2932962017076219,-0.8555417183286738],[0.43221429967978453,-0.29923396833540866,-0.8506761024894005],],
[[0.12665256818872297,-0.7534779018345205,-0.6451590334314864],[0.12331117592556487,-0.8030874016953835,-0.5829622450296521],[-0.201624660559283,-0.7745154205958558,-0.5995609723068861],[-0.21136930237716337,-0.8015251688679793,-0.559357150382248],[-0.22234906410501634,-0.8263138692565418,-0.5174613832605347],[0.0036026714939966197,-0.8332559889190311,-0.5528756439640601],[0.0036026714939966197,-0.8332559889190311,-0.5528756439640601],[-0.22234906410501634,-0.8263138692565418,-0.5174613832605347],[-0.2286068156860072,-0.8380535201600127,-0.4953839129092863],[-0.22286574340266677,-0.8524603638340322,-0.472908224193158],[-0.21702852701700204,-0.8657621205144768,-0.45094852161095644],[-0.21262020236980828,-0.873935223167796,-0.4370696457669834],[-0.13271844699841662,-0.9744321864912229,-0.1812945883259156],[0.08883733815371705,-0.9561331015414448,-0.27913691888838243],[0.12273786467143016,-0.9498167666064118,-0.287721265201651],[0.13429526612993628,-0.9474933054566672,-0.2902089206242437],[0.17747082611959447,-0.9382140632333877,-0.29708328365548536],[0.16635325947513155,-0.8264127635230694,-0.5379298628521781],[0.3882038713277687,-0.8086027983310123,-0.44210775702015176],[0.24581963441367416,-0.9135541056638182,-0.3240240783668846],[0.40355378781245216,-0.8784046655530884,-0.2560265296347025],[0.4399449593144945,-0.8657152879831549,-0.23871630217899023],[0.4426455064253362,-0.8660935607968762,-0.23226471877503374],[0.4427644785787127,-0.8668683617168227,-0.22912629697027903],[0.4439979677740316,-0.8672301128425723,-0.22533915769699106],[0.45135739544470527,-0.8635362477415428,-0.22490364695537723],[0.45239329652191024,-0.8630969899500647,-0.22450810943299385],[0.4595163166167913,-0.8606771165157159,-0.21927073646323572],[0.4603955751867995,-0.8604686801526793,-0.2182419868511147],[0.460412285441927,-0.8606410486107063,-0.21752589009220324],[0.460412285441927,-0.8606410486107063,-0.21752589009220324],[0.4603955751867995,-0.8604686801526793,-0.2182419868511147],[0.4595163166167913,-0.8606771165157159,-0.21927073646323572],[0.45239329652191024,-0.8630969899500647,-0.22450810943299385],[0.45135739544470527,-0.8635362477415428,-0.22490364695537723],[0.4439979677740316,-0.8672301128425723,-0.22533915769699106],[0.4427644785787127,-0.8668683617168227,-0.22912629697027903],[0.4426455064253362,-0.8660935607968762,-0.23226471877503374],[0.4399449593144945,-0.8657152879831549,-0.23871630217899023],[0.40355378781245216,-0.8784046655530884,-0.2560265296347025],[0.24581963441367416,-0.9135541056638182,-0.3240240783668846],[0.22125013172599922,-0.9274623841895131,-0.3014330856504175],[0.2270837722881746,-0.928023722276199,-0.2953048107566159],[0.2692945198452849,-0.9319612096377184,-0.24275247745779666],[0.42886502764556517,-0.8795503250419756,-0.20607283610685723],[0.4336799986824543,-0.8767363267729613,-0.20797853749712203],[0.435263317294231,-0.8759635153899887,-0.2079273053825174],[0.4006565620426168,-0.9091353766438814,-0.113785703086015],[0.39028225538841177,-0.9164869896304246,-0.08792814661470245],[0.400857958537789,-0.9134662820252231,-0.06994461151462546],[0.4009857254106751,-0.9134288764576319,-0.06970032761919213],[0.4198165000289976,-0.902722648115912,-0.09405278774176778],[0.44282564210027614,-0.8883516046614867,-0.12139554025515112],[0.45865831692529996,-0.8681535137249422,-0.18958382030723955],[0.48632298715828176,-0.8563318016199496,-0.17374060462591162],[0.48749641458761467,-0.8552037622993582,-0.17599366668503552],[0.48790702529523755,-0.8547574305111674,-0.17702109945850938],[0.4883697792811851,-0.8543090543542818,-0.17790727453687602],[0.49022135700957475,-0.8522679244533795,-0.18254425786537312],[0.5166052164888209,-0.8395411564428479,-0.16819541294323204],[0.5331802470398544,-0.8229592450524765,-0.19610432210733578],[0.5194733399797563,-0.8395077305326781,-0.15929287311787962],[0.5207464780081864,-0.8395042101424673,-0.15509928044688479],[0.5229986481618251,-0.8381733379491162,-0.15471867880815268],[0.5229986481618251,-0.8381733379491162,-0.15471867880815268],[0.5207464780081864,-0.8395042101424673,-0.15509928044688479],[0.5194733399797563,-0.8395077305326781,-0.15929287311787962],[0.5331802470398544,-0.8229592450524765,-0.19610432210733578],[0.5166052164888209,-0.8395411564428479,-0.16819541294323204],[0.49022135700957475,-0.8522679244533795,-0.18254425786537312],[0.4883697792811851,-0.8543090543542818,-0.17790727453687602],[0.48790702529523755,-0.8547574305111674,-0.17702109945850938],[0.48749641458761467,-0.8552037622993582,-0.17599366668503552],[0.48632298715828176,-0.8563318016199496,-0.17374060462591162],[0.45865831692529996,-0.8681535137249422,-0.18958382030723955],[0.44282564210027614,-0.8883516046614867,-0.12139554025515112],[0.4198165000289976,-0.902722648115912,-0.09405278774176778],[0.4009857254106751,-0.9134288764576319,-0.06970032761919213],[0.400857958537789,-0.9134662820252231,-0.06994461151462546],[0.39028225538841177,-0.9164869896304246,-0.08792814661470245],[0.4006565620426168,-0.9091353766438814,-0.113785703086015],[0.435263317294231,-0.8759635153899887,-0.2079273053825174],[0.4336799986824543,-0.8767363267729613,-0.20797853749712203],[0.42886502764556517,-0.8795503250419756,-0.20607283610685723],[0.2692945198452849,-0.9319612096377184,-0.24275247745779666],[0.277152520867231,-0.9324159021139579,-0.23192038647336147],[0.24476770784124732,-0.9657306892876822,-0.08633078805432062],[0.248759843122547,-0.9651789386344397,-0.08092068256102664],[0.24952146940172706,-0.9652370586917383,-0.07782324097417793],[0.25098772235754135,-0.9650535025478036,-0.07534520851381446],[0.24950695677704324,-0.9655912894525969,-0.07334671262660718],[0.24748950919430682,-0.9664907601942515,-0.06815095962566445],[0.24686601234431507,-0.9671263676822449,-0.06102262599203605],[0.2470022356633478,-0.9671462501730101,-0.0601500320331854],[0.24762077410062308,-0.9670177385723072,-0.05967114478798976],[0.2538794478759113,-0.9655580755066319,-0.05694584067473183],[0.26109986282205316,-0.9636789593664719,-0.05612241003965274],[0.26195627123094817,-0.96343884101265,-0.0562539917781823],[0.26195627123094817,-0.96343884101265,-0.0562539917781823],[0.26109986282205316,-0.9636789593664719,-0.05612241003965274],[0.2538794478759113,-0.9655580755066319,-0.05694584067473183],[0.24762077410062308,-0.9670177385723072,-0.05967114478798976],[0.2470022356633478,-0.9671462501730101,-0.0601500320331854],[0.24473480484678398,-0.9678111564805217,-0.05870639393151159],[0.24400637052042798,-0.9680073133471455,-0.058504123375099665],[0.24400637052042798,-0.9680073133471455,-0.058504123375099665],[0.24473480484678398,-0.9678111564805217,-0.05870639393151159],[0.2470022356633478,-0.9671462501730101,-0.0601500320331854],[0.24686601234431507,-0.9671263676822449,-0.06102262599203605],[0.24748950919430682,-0.9664907601942515,-0.06815095962566445],[0.24950695677704324,-0.9655912894525969,-0.07334671262660718],[0.25098772235754135,-0.9650535025478036,-0.07534520851381446],[0.24952146940172706,-0.9652370586917383,-0.07782324097417793],[0.248759843122547,-0.9651789386344397,-0.08092068256102664],[0.24476770784124732,-0.9657306892876822,-0.08633078805432062],[0.277152520867231,-0.9324159021139579,-0.23192038647336147],[0.2692945198452849,-0.9319612096377184,-0.24275247745779666],[0.2270837722881746,-0.928023722276199,-0.2953048107566159],[0.22125013172599922,-0.9274623841895131,-0.3014330856504175],[0.24581963441367416,-0.9135541056638182,-0.3240240783668846],[0.3882038713277687,-0.8086027983310123,-0.44210775702015176],[0.16635325947513155,-0.8264127635230694,-0.5379298628521781],[0.17747082611959447,-0.9382140632333877,-0.29708328365548536],[0.13429526612993628,-0.9474933054566672,-0.2902089206242437],[0.12273786467143016,-0.9498167666064118,-0.287721265201651],[0.08883733815371705,-0.9561331015414448,-0.27913691888838243],[-0.13271844699841662,-0.9744321864912229,-0.1812945883259156],[-0.15705195631564464,-0.9824123117164932,-0.10099867724522164],[-0.1729205427380198,-0.9836841652457241,-0.049638180305201327],[-0.2511717436807564,-0.9172172627296064,0.3092333231189304],[-0.2566291987248738,-0.8921832615681744,0.3716859993857771],[0.06736920815114109,-0.8264587780686623,0.5589519460081894],[0.0920389042106842,-0.7932229274000336,0.6019354014830972],[0.11478634272134444,-0.7542636858856017,0.6464598886852336],[0.11669206637367831,-0.7505136119405876,0.6504708140549692],[0.12068629591959709,-0.7425143320590462,0.6588681845893882],[0.12457216414926278,-0.734356957418255,0.6672343179203033],[0.2409409961744403,-0.7036863131113557,0.6684108086365865],[0.5001047206703931,-0.7945083946737509,0.34445853038664503],[0.5307176714030366,-0.7918068845928237,0.30229226052273545],[0.5270589222691217,-0.7962397717346079,0.29700356624884405],[0.535976060321241,-0.7893730327982408,0.2993657927242671],[0.5309423787985512,-0.7967696513420061,0.2885451664749802],[0.5404201787063225,-0.7877251870011387,0.29569420050289713],[0.5430821355142914,-0.7869134736951789,0.29296583248260183],[0.5442536218282132,-0.7863859495750907,0.2922073466526042],[0.5442124113125171,-0.7873332617832987,0.2897226022648],[0.5439061347693241,-0.7878889207245379,0.2887856733977929],[0.5439862536650981,-0.7891315251892003,0.2852199007362184],[0.4099436529706857,-0.8979608117839416,0.16003931357443052],[0.4431965563428408,-0.887512593833282,0.1260880971113738],[0.43905249585207323,-0.893299211836203,0.09617392587850412],[0.5224868183181399,-0.8457394060469934,-0.10831611949781922],[0.5301658815975724,-0.8394532850866885,-0.11934119216362689],[0.5301658815975724,-0.8394532850866885,-0.11934119216362689],[0.5224868183181399,-0.8457394060469934,-0.10831611949781922],[0.43905249585207323,-0.893299211836203,0.09617392587850412],[0.4431965563428408,-0.887512593833282,0.1260880971113738],[0.4099436529706857,-0.8979608117839416,0.16003931357443052],[0.5439862536650981,-0.7891315251892003,0.2852199007362184],[0.5439061347693241,-0.7878889207245379,0.2887856733977929],[0.5442124113125171,-0.7873332617832987,0.2897226022648],[0.5442536218282132,-0.7863859495750907,0.2922073466526042],[0.5445146164771111,-0.786179518183798,0.2922765772878074],[0.5485102627400564,-0.78241781953558,0.2948878555349863],[0.5486101705757674,-0.7823889949309827,0.2947784614786401],[0.5594106730859186,-0.7773864934183965,0.28762812569046337],[0.5694356885332282,-0.7737411231071467,0.2776106464773635],[0.6471206694677526,-0.7385098023148873,0.18930956402790095],[0.6464567657195602,-0.7393541362126085,0.1882793438503368],[0.7314481754814147,-0.6768596978670459,0.08273159002606582],[0.7462218225963618,-0.6621121538667627,0.06899628383384444],[0.7456221843587719,-0.6631426398776542,0.06549349103650948],[0.7462842792425092,-0.6625772685520404,0.06364854871563054],[0.7486900222376343,-0.6602275197105911,0.059689804980515224],[0.7486900222376343,-0.6602275197105911,0.059689804980515224],[0.7462842792425092,-0.6625772685520404,0.06364854871563054],[0.7456221843587719,-0.6631426398776542,0.06549349103650948],[0.7462218225963618,-0.6621121538667627,0.06899628383384444],[0.7314481754814147,-0.6768596978670459,0.08273159002606582],[0.6464567657195602,-0.7393541362126085,0.1882793438503368],[0.6471206694677526,-0.7385098023148873,0.18930956402790095],[0.651861176467732,-0.7325419436968683,0.19611044678680067],[0.6562508674161108,-0.7267689583293386,0.20283411997119793],[0.6967867183694085,-0.7014201027372307,0.14999369513444033],[0.7417703823607424,-0.6641030790914909,0.09350828943788383],[0.7512045762258023,-0.6556243428668695,0.07647486971416351],[0.7512524231122311,-0.6556179836444226,0.07605824274871816],[0.7512480156637003,-0.6556326829992754,0.07597502184616038],[0.7565944297147497,-0.6500121430032745,0.07105689884102301],[0.7567955964067148,-0.649812584705529,0.07073916890750459],[0.7567955964067148,-0.649812584705529,0.07073916890750459],[0.7565944297147497,-0.6500121430032745,0.07105689884102301],[0.7512480156637003,-0.6556326829992754,0.07597502184616038],[0.7512524231122311,-0.6556179836444226,0.07605824274871816],[0.7512045762258023,-0.6556243428668695,0.07647486971416351],[0.7417703823607424,-0.6641030790914909,0.09350828943788383],[0.7500998697675019,-0.6556574330264863,0.086391642488701],[0.7500998697675019,-0.6556574330264863,0.086391642488701],[0.7417703823607424,-0.6641030790914909,0.09350828943788383],[0.6967867183694085,-0.7014201027372307,0.14999369513444033],[0.6562508674161108,-0.7267689583293386,0.20283411997119793],[0.651861176467732,-0.7325419436968683,0.19611044678680067],[0.6471206694677526,-0.7385098023148873,0.18930956402790095],[0.5694356885332282,-0.7737411231071467,0.2776106464773635],[0.556551455870431,-0.7758533523140411,0.29715661303691077],[0.6695338337550893,-0.6050559683138427,0.43084999787050116],[0.6803757487343952,-0.6276990624162804,0.3782627758263211],[0.68630252211064,-0.6438291417686306,0.3383384169053867],[0.6869588286829894,-0.6467270164709095,0.33140871120284615],[0.6869588286829894,-0.6467270164709095,0.33140871120284615],[0.68630252211064,-0.6438291417686306,0.3383384169053867],[0.687532881884254,-0.6431239224418592,0.3371797098150035],[0.8130490467657544,-0.5416813425289277,0.21338362333917923],[0.8131257466898638,-0.5419824834893279,0.21232406283978306],[0.8153381866136133,-0.540270812486131,0.2081612130662203],[0.8153381866136133,-0.540270812486131,0.2081612130662203],[0.8131257466898638,-0.5419824834893279,0.21232406283978306],[0.8130490467657544,-0.5416813425289277,0.21338362333917923],[0.687532881884254,-0.6431239224418592,0.3371797098150035],[0.68630252211064,-0.6438291417686306,0.3383384169053867],[0.6803757487343952,-0.6276990624162804,0.3782627758263211],[0.6695338337550893,-0.6050559683138427,0.43084999787050116],[0.556551455870431,-0.7758533523140411,0.29715661303691077],[0.5694356885332282,-0.7737411231071467,0.2776106464773635],[0.5594106730859186,-0.7773864934183965,0.28762812569046337],[0.5486101705757674,-0.7823889949309827,0.2947784614786401],[0.5485102627400564,-0.78241781953558,0.2948878555349863],[0.5498454675105902,-0.7799046872035083,0.2990294981035457],[0.549584869487266,-0.7798206746006026,0.2997268534785065],[0.547702405938103,-0.779977585838933,0.30274913727124564],[0.547702405938103,-0.779977585838933,0.30274913727124564],[0.549584869487266,-0.7798206746006026,0.2997268534785065],[0.5498454675105902,-0.7799046872035083,0.2990294981035457],[0.5485102627400564,-0.78241781953558,0.2948878555349863],[0.5445146164771111,-0.786179518183798,0.2922765772878074],[0.5442536218282132,-0.7863859495750907,0.2922073466526042],[0.5430821355142914,-0.7869134736951789,0.29296583248260183],[0.5404201787063225,-0.7877251870011387,0.29569420050289713],[0.5309423787985512,-0.7967696513420061,0.2885451664749802],[0.535976060321241,-0.7893730327982408,0.2993657927242671],[0.5270589222691217,-0.7962397717346079,0.29700356624884405],[0.5307176714030366,-0.7918068845928237,0.30229226052273545],[0.5001047206703931,-0.7945083946737509,0.34445853038664503],[0.2409409961744403,-0.7036863131113557,0.6684108086365865],[0.26734798500450274,-0.6915473935430053,0.6710344681146475],[0.5138915040873383,-0.7849928793692539,0.34597933661769603],[0.5231280474067767,-0.7838957186148664,0.33443167965020204],[0.5289625356471329,-0.7827645083032805,0.32783892450787344],[0.543447562651584,-0.780557668343823,0.3088599569994582],[0.543447562651584,-0.780557668343823,0.3088599569994582],[0.5289625356471329,-0.7827645083032805,0.32783892450787344],[0.5231280474067767,-0.7838957186148664,0.33443167965020204],[0.5138915040873383,-0.7849928793692539,0.34597933661769603],[0.26734798500450274,-0.6915473935430053,0.6710344681146475],[0.48800171934488373,-0.36786328042397776,0.7915370672508947],[0.4702896296298842,-0.2861231342332412,0.834842030757396],[0.35528670351153996,-0.15510405522390702,0.9217993764160411],[0.35456317346670996,-0.057996925023598225,0.9332316500789195],[0.36966233574632484,-0.02686720964175495,0.9287776432368716],[0.8805371654983806,-0.028814556516260754,0.4731004349066369],[0.889913389596211,-0.029432321520239325,0.4551789730065655],[0.8912105428324227,-0.026803633169453136,0.4527972323162498],[0.8914011770577689,-0.026029169301432207,0.4524670417671343],[0.8919111794512135,-0.024889789433241175,0.4515251336879425],[0.8925055630365781,-0.025555002115944685,0.45031184951721476],[0.8925055630365781,-0.025555002115944685,0.45031184951721476],[0.8919111794512135,-0.024889789433241175,0.4515251336879425],[0.8918915601752399,-0.0247494769174504,0.45157159817739767],[0.8917910825200874,-0.02091745206485225,0.4519636327590586],[0.8919425268760528,-0.019336754050716238,0.4517351200568137],[0.8924645951418086,-0.01707810790618986,0.45079406013024625],[0.8931561291183869,-0.016473708776754966,0.4494449309285821],[0.8940214044258314,-0.016255537103100376,0.44772925517767287],[0.8951968593724199,-0.016711378186644178,0.44535751122986467],[0.8961957277071732,-0.017824955682159305,0.4433006751566474],[0.8962713783576713,-0.018313857086258455,0.4431277682288306],[0.8963872136508536,-0.02213464818424002,0.44271889563584144],[0.8962907474510594,-0.02312171238341318,0.4428637289845262],[0.9041964875057734,-0.028677433650095053,0.4261529265198893],[0.9455792070499112,-0.03916563412883227,0.323026339944822],[0.9421834909830092,-0.06884420136253391,0.32794930287747937],[0.9373660148945824,-0.09633049870753213,0.33476169007132217],[0.9365609362781658,-0.1001807103891825,0.33588307177302656],[0.976641779358705,-0.11140859246685038,0.1837361160349751],[0.972696626581529,-0.14056834179438904,0.18466676453030054],[0.9780088341606915,-0.10771582188639045,0.17859457443882346],[0.9786118350575651,-0.10594362134888446,0.1763372489882645],[0.9789193901738856,-0.10754764248402478,0.1736385099501732],[0.9790501857642643,-0.10779184573101167,0.17274736394186027],[0.9803494303351752,-0.10762302435311674,0.1653247684728034],[0.9805130047690955,-0.10738046047598265,0.16451043792612546],[0.980564671585826,-0.10987329624522693,0.16254471264851922],[0.9764206353832302,-0.13938832420369066,0.16484428371495308],[0.97081677187396,-0.1684139466841297,0.1707382148509782],[0.9726956112970007,-0.16424110839857073,0.16397593139105293],[0.9851033539106964,-0.12647451346186195,0.11651428907427015],[0.9875207162962291,-0.1176007201846747,0.1047516372083442],[0.9811098237479876,-0.15948621484450995,0.10948817753421415],[0.9787122511194112,-0.17081334254906103,0.11377667386591993],[0.9787122511194112,-0.17081334254906103,0.11377667386591993],[0.9811098237479876,-0.15948621484450995,0.10948817753421415],[0.9875207162962291,-0.1176007201846747,0.1047516372083442],[0.9851033539106964,-0.12647451346186195,0.11651428907427015],[0.9726956112970007,-0.16424110839857073,0.16397593139105293],[0.97081677187396,-0.1684139466841297,0.1707382148509782],[0.9764206353832302,-0.13938832420369066,0.16484428371495308],[0.980564671585826,-0.10987329624522693,0.16254471264851922],[0.9805130047690955,-0.10738046047598265,0.16451043792612546],[0.9803494303351752,-0.10762302435311674,0.1653247684728034],[0.9790501857642643,-0.10779184573101167,0.17274736394186027],[0.9789193901738856,-0.10754764248402478,0.1736385099501732],[0.9786118350575651,-0.10594362134888446,0.1763372489882645],[0.9780088341606915,-0.10771582188639045,0.17859457443882346],[0.972696626581529,-0.14056834179438904,0.18466676453030054],[0.976641779358705,-0.11140859246685038,0.1837361160349751],[0.9365609362781658,-0.1001807103891825,0.33588307177302656],[0.9373660148945824,-0.09633049870753213,0.33476169007132217],[0.9421834909830092,-0.06884420136253391,0.32794930287747937],[0.9455792070499112,-0.03916563412883227,0.323026339944822],[0.9041964875057734,-0.028677433650095053,0.4261529265198893],[0.8962907474510594,-0.02312171238341318,0.4428637289845262],[0.8963872136508536,-0.02213464818424002,0.44271889563584144],[0.8962713783576713,-0.018313857086258455,0.4431277682288306],[0.8961957277071732,-0.017824955682159305,0.4433006751566474],[0.8951968593724199,-0.016711378186644178,0.44535751122986467],[0.8940214044258314,-0.016255537103100376,0.44772925517767287],[0.8931561291183869,-0.016473708776754966,0.4494449309285821],[0.8924645951418086,-0.01707810790618986,0.45079406013024625],[0.8919425268760528,-0.019336754050716238,0.4517351200568137],[0.8917910825200874,-0.02091745206485225,0.4519636327590586],[0.8918915601752399,-0.0247494769174504,0.45157159817739767],[0.8919111794512135,-0.024889789433241175,0.4515251336879425],[0.8914011770577689,-0.026029169301432207,0.4524670417671343],[0.8912105428324227,-0.026803633169453136,0.4527972323162498],[0.889913389596211,-0.029432321520239325,0.4551789730065655],[0.8805371654983806,-0.028814556516260754,0.4731004349066369],[0.36966233574632484,-0.02686720964175495,0.9287776432368716],[0.37814612437153,0.0018896669045357591,0.92574399149105],[0.38182263598549504,0.027068172760834987,0.9238391573604562],[0.38209692350191354,0.05558179093715881,0.9224492428131701],[0.5460645451565118,0.13255743062027303,0.8271892408091172],[0.8397204768928918,0.23642961266142623,0.4888461505868102],[0.8414453412607407,0.23724508840358619,0.48547348609267055],[0.8470801049881034,0.2400951628613175,0.47414091629381794],[0.8541174644521176,0.24405364584288963,0.4592615538760882],[0.8686472800755184,0.2529108089558566,0.426014114238834],[0.8879346445568552,0.2655820971919493,0.3755505513866504],[0.8891522437065026,0.26639453927899265,0.3720782672422907],[0.9002253113269264,0.2732470023527946,0.3390139592281568],[0.906879954464146,0.2638091735850114,0.32859316505901615],[0.9259322139012764,0.23242729176224908,0.2977030219933071],[0.9285505804718522,0.23029759652714388,0.2911302741715591],[0.9576455025647188,0.19866277681479738,0.20844230023150578],[0.9671931242358551,0.1848262953353062,0.1742891304227316],[0.9761330124907921,0.16931948042170425,0.1359972627495689],[0.9948268966460099,0.06394411000820178,-0.07893412763138699],[0.9944794696472806,0.0621967205363142,-0.0845112560822005],[0.9921229855670824,0.052543962533600254,-0.11371505401980227],[0.9839496015711657,0.09413393202136913,-0.15159810160467235],[0.9820196259191425,0.10275929947133239,-0.15836028757800488],[0.9800859934331632,0.11059121258365812,-0.1649273451414468],[0.9746784742684794,0.13099755048376327,-0.18122227667956056],[0.8280534172503311,0.42916780427883433,-0.3607527324228235],[0.8090326629574117,0.4565742435470567,-0.370143364654119],[0.8061086153596881,0.46062840035775626,-0.3714974791660651],[0.7921861952658603,0.4791908139644735,-0.37791162438097303],[0.7790649036772045,0.4965445520276825,-0.3827549917506712],[0.7746172325836708,0.5023498201974501,-0.38420411389260906],[0.7219355430065154,0.5368034208745031,-0.43663618617943123],[0.8470132216057865,0.13372673420833528,-0.5144762025428972],[0.8510345621634561,0.1281430442999023,-0.5092342625951322],[0.8522269667242087,0.12507809840977682,-0.5080006559899789],[0.8542886230024979,0.121819734393458,-0.5053225711570816],[0.855027115642326,0.12232376719728662,-0.5039499255829177],[0.855027115642326,0.12232376719728662,-0.5039499255829177],[0.8542886230024979,0.121819734393458,-0.5053225711570816],[0.8533217407020789,0.11610091504692424,-0.5082937972968398],[0.853219048526807,0.10760955315687204,-0.5103307156152652],[0.8536329123718702,0.10447133804455216,-0.510290692098827],[0.8554851486608572,0.09785769819096872,-0.5084968351184462],[0.8613094787040649,0.09555614849955676,-0.49901403224605095],[0.8648426721624601,0.09621437609361833,-0.49273719794613785],[0.8665214294978315,0.09758215455211249,-0.48950825869846404],[0.866690594654749,0.10849059080292255,-0.48690574533910624],[0.866690594654749,0.10849059080292255,-0.48690574533910624],[0.8665214294978315,0.09758215455211249,-0.48950825869846404],[0.8648426721624601,0.09621437609361833,-0.49273719794613785],[0.8613094787040649,0.09555614849955676,-0.49901403224605095],[0.8554851486608572,0.09785769819096872,-0.5084968351184462],[0.8536329123718702,0.10447133804455216,-0.510290692098827],[0.853219048526807,0.10760955315687204,-0.5103307156152652],[0.8533217407020789,0.11610091504692424,-0.5082937972968398],[0.8542886230024979,0.121819734393458,-0.5053225711570816],[0.8522269667242087,0.12507809840977682,-0.5080006559899789],[0.8510345621634561,0.1281430442999023,-0.5092342625951322],[0.8470132216057865,0.13372673420833528,-0.5144762025428972],[0.7219355430065154,0.5368034208745031,-0.43663618617943123],[0.6835591892047462,0.5595376600297687,-0.46868373330227825],[0.6657344319069042,0.5654284893658796,-0.48691712804851195],[0.6579301515328245,0.5459177729453188,-0.518750133384482],[0.6577581387127344,0.5454618599563135,-0.5194473893380913],[0.6354200135277809,0.48593474119154106,-0.6000906879059739],[0.6360985048501354,0.3443728258061862,-0.690496957975692],[0.6334469242623996,0.27346337786525265,-0.7238527302628844],[0.6322599480363982,0.2420023051070353,-0.7359906537666715],[0.6304629210680915,0.14945864398145361,-0.7616945706105004],[0.626024275505152,0.09930283623553594,-0.7734549458073353],[0.6227808285346964,0.07498863624001667,-0.778794417060433],[0.74508939676282,-0.2264329433495662,-0.6273515067310105],[0.7591625458295425,-0.26625847803485,-0.5939517252135676],[0.7918757040589431,-0.36526283926232717,-0.48940364483233717],[0.849697028881363,0.08680549950767576,-0.5200766908499238],[0.849697028881363,0.08680549950767576,-0.5200766908499238],[0.7918757040589431,-0.36526283926232717,-0.48940364483233717],[0.8041482939843957,-0.417106499478957,-0.4235182279127983],[0.8049925856356662,-0.42156882609485646,-0.41745258645337113],[0.8099393327407183,-0.462756790225787,-0.36035320226056966],[0.8089751232902783,-0.46414678103906076,-0.3607312234178755],[0.7362777128320225,-0.5306599033859767,-0.41987521542147727],[0.7231937974703823,-0.5414298562006588,-0.42877085035587664],[0.6170976917208738,-0.6080106413533969,-0.4995132619598809],[0.610210253592531,-0.6118308063027603,-0.5032956495634086],[0.5744738623840904,-0.6306505580924577,-0.5217850659181201],[0.41271050800080245,-0.6098353083477069,-0.676587712922853],[0.37042075704305755,-0.6036416276411863,-0.7059782207195542],[0.3031974326116359,-0.5949552299633554,-0.7443786611644395],[0.19578594257717188,-0.5788478101873721,-0.7915826408723555],[0.1880104354796975,-0.5772059096488411,-0.7946605652838126],[0.15623120191414103,-0.5698400744085205,-0.8067676872226321],[0.11973976387482586,-0.5604643352825689,-0.8194767341562964],[0.001816495363077252,-0.5240635414408633,-0.8516772304559143],[-0.023611753975673295,-0.5269290460507239,-0.8495812294903098],[-0.11052230421617362,-0.5369456556425904,-0.8363457318342076],[-0.14513117071251094,-0.6149054225251815,-0.7751311273821637],[-0.1615340236156961,-0.6559916834107615,-0.7372799132693357],[-0.16374219763072817,-0.6617532864019016,-0.7316222253672605],[-0.17573023131656287,-0.696312026380498,-0.6958939917252569],[-0.201624660559283,-0.7745154205958558,-0.5995609723068861],[0.12331117592556487,-0.8030874016953835,-0.5829622450296521],[0.12665256818872297,-0.7534779018345205,-0.6451590334314864],[0.13245508257522204,-0.8071672596030303,-0.575270950183412],[0.13559476588770702,-0.8087336744664737,-0.5723319869165219],[0.1387615769084646,-0.8077657784578657,-0.5729395011048153],[0.14578434016152406,-0.8066877130192247,-0.5727144662285756],[0.15055811418498793,-0.8067145414105712,-0.5714402006595197],[0.15055811418498793,-0.8067145414105712,-0.5714402006595197],[0.14578434016152406,-0.8066877130192247,-0.5727144662285756],[0.1387615769084646,-0.8077657784578657,-0.5729395011048153],[0.13559476588770702,-0.8087336744664737,-0.5723319869165219],[0.13390444214646,-0.810809363414566,-0.5697874836925708],[0.13103308604989705,-0.8186036262184072,-0.5592123331099865],[0.13111745831589347,-0.819309211211123,-0.5581582468703545],[0.13337695720268022,-0.8226985095106618,-0.5526099435734848],[0.13956985640463646,-0.8237980699354769,-0.5494333400456987],[0.14425674056271673,-0.823800491826858,-0.5482177874422246],[0.14733839487320194,-0.8233258297188857,-0.5481112802286567],[0.15701497566993042,-0.8201388227322298,-0.5501986994375427],[0.15701497566993042,-0.8201388227322298,-0.5501986994375427],[0.14733839487320194,-0.8233258297188857,-0.5481112802286567],[0.14425674056271673,-0.823800491826858,-0.5482177874422246],[0.13956985640463646,-0.8237980699354769,-0.5494333400456987],[0.13337695720268022,-0.8226985095106618,-0.5526099435734848],[0.13111745831589347,-0.819309211211123,-0.5581582468703545],[0.13103308604989705,-0.8186036262184072,-0.5592123331099865],[0.13390444214646,-0.810809363414566,-0.5697874836925708],[0.13559476588770702,-0.8087336744664737,-0.5723319869165219],[0.13245508257522204,-0.8071672596030303,-0.575270950183412],[0.12665256818872297,-0.7534779018345205,-0.6451590334314864],],
[[0.5348224809460083,0.791338553394077,0.2962232397819697],[0.5341471920214073,0.79103280153013,0.29825137746377645],[0.522528201713923,0.7872296252939285,0.3274657164852449],[0.5173134904706611,0.7847857027997748,0.34131825802046517],[0.5134288777648707,0.7816036039319413,0.3542408697450178],[0.5122955477562278,0.7805077531181225,0.35827492107548725],[0.5119410463100467,0.7801106742425638,0.35964385304880075],[0.5001457815251698,0.7645960667032352,0.406505906481713],[0.566782106467938,0.7553142718604257,0.32902643436617995],[0.5705367049215728,0.7526708285371486,0.3285947233393082],[0.5013445120766494,0.7613585090189097,0.41108016366048283],[0.5495703672343111,0.7549563555341052,0.3577894809753444],[0.5750652652416905,0.7476931868814619,0.3320464410343039],[0.5759509310224432,0.7466984261808132,0.33274913282152624],[0.5786099720397079,0.7442739377897627,0.33356679358582575],[0.5819243345361835,0.7430479749453591,0.3305204620053365],[0.5819243345361835,0.7430479749453591,0.3305204620053365],[0.5786099720397079,0.7442739377897627,0.33356679358582575],[0.5759509310224432,0.7466984261808132,0.33274913282152624],[0.5750652652416905,0.7476931868814619,0.3320464410343039],[0.5495703672343111,0.7549563555341052,0.3577894809753444],[0.5013445120766494,0.7613585090189097,0.41108016366048283],[0.5705367049215728,0.7526708285371486,0.3285947233393082],[0.566782106467938,0.7553142718604257,0.32902643436617995],[0.5001457815251698,0.7645960667032352,0.406505906481713],[0.4976428268907725,0.7615070014670093,0.4152814750995822],[0.4942518941951314,0.7580749736695277,0.4254848991215429],[0.46732622731347395,0.7320317156353984,0.4957174241126193],[0.42792549261280177,0.689894672429103,0.5838879290806002],[0.4553479494818615,0.6961535595682564,0.5550031228768989],[0.6415545678125845,0.6378471551134851,0.4260971054025615],[0.6435983741935596,0.6355328622450915,0.4264728757400269],[0.6451143935473264,0.6342759836514391,0.42605327812500704],[0.6458640294108184,0.6334848885003459,0.4260945335895851],[0.6472896506598428,0.6334851721935613,0.42392528204809027],[0.6480603074645198,0.6332484201789328,0.4231007873189059],[0.6516103617329903,0.6313006842407457,0.4205512841014373],[0.6519432504819458,0.6310535334462121,0.42040627501987343],[0.6526716393230415,0.6299845756830897,0.42087903918438485],[0.6526716393230415,0.6299845756830897,0.42087903918438485],[0.6519432504819458,0.6310535334462121,0.42040627501987343],[0.6516103617329903,0.6313006842407457,0.4205512841014373],[0.6480603074645198,0.6332484201789328,0.4231007873189059],[0.6472896506598428,0.6334851721935613,0.42392528204809027],[0.6458640294108184,0.6334848885003459,0.4260945335895851],[0.6458447010485578,0.6328704991458383,0.4270357753612648],[0.6463187906649676,0.6310180376093301,0.4290550746058646],[0.6471936099236956,0.6292120539994014,0.43038659641744176],[0.6484603599806154,0.6273536047629634,0.4311920872705416],[0.6491418516538976,0.6268415413983287,0.43091128832825504],[0.6491418516538976,0.6268415413983287,0.43091128832825504],[0.6484603599806154,0.6273536047629634,0.4311920872705416],[0.6471936099236956,0.6292120539994014,0.43038659641744176],[0.6463187906649676,0.6310180376093301,0.4290550746058646],[0.6458447010485578,0.6328704991458383,0.4270357753612648],[0.6458640294108184,0.6334848885003459,0.4260945335895851],[0.6451143935473264,0.6342759836514391,0.42605327812500704],[0.6435983741935596,0.6355328622450915,0.4264728757400269],[0.6415545678125845,0.6378471551134851,0.4260971054025615],[0.4553479494818615,0.6961535595682564,0.5550031228768989],[0.42792549261280177,0.689894672429103,0.5838879290806002],[0.4143583538376285,0.6821438136773367,0.6024840015027035],[0.43029210229175346,0.6746971453268426,0.5996936457835392],[0.4540001114365555,0.6625393649100976,0.5957562326657774],[0.462836086255398,0.657724089966792,0.5942909882684921],[0.46522714083270994,0.6563711794950804,0.5939196765227256],[0.47085653981946407,0.6530931616093695,0.5930964855470986],[0.6009909836632321,0.5394839194480404,0.58971767670003],[0.606547920371141,0.5247981734354988,0.5972323647059059],[0.6146766477842464,0.4991897501527076,0.6107226964926054],[0.6219256995758237,0.4703376877767479,0.6260917533907828],[0.6257250599918727,0.45251200754796767,0.6353747180389501],[0.6214019054837278,0.2772001272358,0.7328163216807119],[0.610822417057113,0.24356077974988585,0.7533751531528857],[0.5902690484065499,0.19764312072980914,0.7826363442374806],[0.5590151804690989,0.1487880209676411,0.8156985673774556],[0.5460645451565118,0.13255743062027303,0.8271892408091172],[0.8397204768928918,0.23642961266142623,0.4888461505868102],[0.8414453412607407,0.23724508840358619,0.48547348609267055],[0.8470801049881034,0.2400951628613175,0.47414091629381794],[0.8541174644521176,0.24405364584288963,0.4592615538760882],[0.8686472800755184,0.2529108089558566,0.426014114238834],[0.8879346445568552,0.2655820971919493,0.3755505513866504],[0.8891522437065026,0.26639453927899265,0.3720782672422907],[0.9002253113269264,0.2732470023527946,0.3390139592281568],[0.8170399071526542,0.5184662781277527,0.2522667409000602],[0.8120668126496877,0.5308070396899648,0.24246933498600015],[0.7570290928452507,0.6128709404849159,0.22648656228357458],[0.7147466307242487,0.6727858913608407,0.1910403053131289],[0.6990698638752764,0.6921460161797903,0.17954168793861816],[0.6971590553530639,0.6944418553551892,0.17810042411534638],[0.6612988116525516,0.724075347118558,0.19595604966946786],[0.5921034380380664,0.7714407970904558,0.23300775791364509],[0.5842288798237337,0.7759080855044481,0.23799844291240058],[0.5735078617559949,0.781521159766556,0.24558788516782334],[0.5707537644884462,0.7828524960746237,0.24775413157402404],[0.5444776669865472,0.7942310967388932,0.26970545994810974],[0.5414827971688884,0.795492728067937,0.2720068013142095],[0.539418328698146,0.7939513788711289,0.2804800788882021],[0.5380217263808638,0.793066441959667,0.2856190479985344],[0.5348224809460083,0.791338553394077,0.2962232397819697],],
];


const g_edges = [{from: "Yeah Yeah\nYeahs", to: "The White\nStripes"},{from: "Yeah Yeah\nYeahs", to: "Placebo"},{from: "Yeah Yeah\nYeahs", to: "Interpol"},{from: "Yeah Yeah\nYeahs", to: "The Strokes"},{from: "Yeah Yeah\nYeahs", to: "Franz Ferdinand"},{from: "Yeah Yeah\nYeahs", to: "Bloc Party"},{from: "Kaiser Chiefs", to: "Arctic Monkeys"},{from: "Kaiser Chiefs", to: "Keane"},{from: "Kaiser Chiefs", to: "The Killers"},{from: "Kaiser Chiefs", to: "Muse"},{from: "Kaiser Chiefs", to: "Coldplay"},{from: "Kaiser Chiefs", to: "Franz Ferdinand"},{from: "Kaiser Chiefs", to: "Snow Patrol"},{from: "The Who", to: "The Doors"},{from: "The Who", to: "Pink Floyd"},{from: "The Who", to: "The Beatles"},{from: "The Who", to: "The Rolling\nStones"},{from: "The Who", to: "Jimi Hendrix"},{from: "The Who", to: "Led Zeppelin"},{from: "The White\nStripes", to: "Red Hot\nChili Peppers"},{from: "The White\nStripes", to: "Gorillaz"},{from: "The White\nStripes", to: "Placebo"},{from: "The White\nStripes", to: "Weezer"},{from: "The White\nStripes", to: "Muse"},{from: "The White\nStripes", to: "Radiohead"},{from: "The White\nStripes", to: "Beck"},{from: "The White\nStripes", to: "The Strokes"},{from: "The White\nStripes", to: "Franz Ferdinand"},{from: "Keane", to: "Oasis"},{from: "Keane", to: "The Killers"},{from: "Keane", to: "Muse"},{from: "Keane", to: "Coldplay"},{from: "Keane", to: "Franz Ferdinand"},{from: "Keane", to: "Snow Patrol"},{from: "Weezer", to: "R.E.M."},{from: "Weezer", to: "Red Hot\nChili Peppers"},{from: "Weezer", to: "Foo Fighters"},{from: "Weezer", to: "Muse"},{from: "Weezer", to: "The Strokes"},{from: "Weezer", to: "The Smashing\nPumpkins"},{from: "Arctic Monkeys", to: "Oasis"},{from: "Arctic Monkeys", to: "The Killers"},{from: "Arctic Monkeys", to: "Muse"},{from: "Arctic Monkeys", to: "Interpol"},{from: "Arctic Monkeys", to: "The Strokes"},{from: "Arctic Monkeys", to: "Franz Ferdinand"},{from: "Arctic Monkeys", to: "Bloc Party"},{from: "The Rolling\nStones", to: "The Doors"},{from: "The Rolling\nStones", to: "Bob Dylan"},{from: "The Rolling\nStones", to: "The Beatles"},{from: "The Rolling\nStones", to: "Jimi Hendrix"},{from: "The Rolling\nStones", to: "Led Zeppelin"},{from: "The Rolling\nStones", to: "Aerosmith"},{from: "Aerosmith", to: "Led Zeppelin"},{from: "Aerosmith", to: "AC/DC"},{from: "Aerosmith", to: "Guns N'\nRoses"},{from: "Snow Patrol", to: "Death Cab\nfor Cutie"},{from: "Snow Patrol", to: "The Killers"},{from: "Snow Patrol", to: "Coldplay"},{from: "Snow Patrol", to: "Bloc Party"},{from: "The Offspring", to: "Rage Against\nthe Machine"},{from: "The Offspring", to: "Green Day"},{from: "The Offspring", to: "blink-182"},{from: "The Offspring", to: "Red Hot\nChili Peppers"},{from: "Coldplay", to: "Oasis"},{from: "Coldplay", to: "Placebo"},{from: "Coldplay", to: "The Killers"},{from: "Coldplay", to: "Muse"},{from: "Coldplay", to: "Radiohead"},{from: "Coldplay", to: "U2"},{from: "Coldplay", to: "Franz Ferdinand"},{from: "R.E.M.", to: "Pearl Jam"},{from: "R.E.M.", to: "Radiohead"},{from: "R.E.M.", to: "U2"},{from: "R.E.M.", to: "The Cranberries"},{from: "R.E.M.", to: "The Smashing\nPumpkins"},{from: "Pearl Jam", to: "U2"},{from: "Pearl Jam", to: "Nirvana"},{from: "Pearl Jam", to: "The Smashing\nPumpkins"},{from: "Pearl Jam", to: "Foo Fighters"},{from: "The Beatles", to: "Led Zeppelin"},{from: "The Beatles", to: "Pink Floyd"},{from: "The Beatles", to: "The Doors"},{from: "Linkin Park", to: "System of\na Down"},{from: "System of\na Down", to: "Rage Against\nthe Machine"},{from: "System of\na Down", to: "Metallica"},{from: "System of\na Down", to: "Red Hot\nChili Peppers"},{from: "Jimi Hendrix", to: "Led Zeppelin"},{from: "Jimi Hendrix", to: "The Doors"},{from: "Jimi Hendrix", to: "Pink Floyd"},{from: "Foo Fighters", to: "Red Hot\nChili Peppers"},{from: "Foo Fighters", to: "Queens of the\nStone Age"},{from: "Foo Fighters", to: "Nirvana"},{from: "Foo Fighters", to: "Rage Against\nthe Machine"},{from: "Foo Fighters", to: "The Smashing\nPumpkins"},{from: "Foo Fighters", to: "Incubus"},{from: "Modest Mouse", to: "Beck"},{from: "Modest Mouse", to: "The Shins"},{from: "Modest Mouse", to: "Death Cab\nfor Cutie"},{from: "Moby", to: "Massive Attack"},{from: "Moby", to: "The Chemical\nBrothers"},{from: "Moby", to: "Air"},{from: "Metallica", to: "AC/DC"},{from: "Metallica", to: "Guns N'\nRoses"},{from: "The Strokes", to: "The Killers"},{from: "The Strokes", to: "Muse"},{from: "The Strokes", to: "Interpol"},{from: "The Strokes", to: "Franz Ferdinand"},{from: "Guns N'\nRoses", to: "AC/DC"},{from: "Daft Punk", to: "Gorillaz"},{from: "Daft Punk", to: "The Chemical\nBrothers"},{from: "The Shins", to: "Death Cab\nfor Cutie"},{from: "Massive Attack", to: "The Chemical\nBrothers"},{from: "Massive Attack", to: "Portishead"},{from: "Massive Attack", to: "Air"},{from: "Gorillaz", to: "The Chemical\nBrothers"},{from: "Gorillaz", to: "Red Hot\nChili Peppers"},{from: "Gorillaz", to: "Blur"},{from: "Gorillaz", to: "Radiohead"},{from: "Gorillaz", to: "Beck"},{from: "Led Zeppelin", to: "The Doors"},{from: "Led Zeppelin", to: "Pink Floyd"},{from: "Led Zeppelin", to: "AC/DC"},{from: "Rage Against\nthe Machine", to: "Red Hot\nChili Peppers"},{from: "Rage Against\nthe Machine", to: "Queens of the\nStone Age"},{from: "Rage Against\nthe Machine", to: "Muse"},{from: "Rage Against\nthe Machine", to: "Incubus"},{from: "Beck", to: "Radiohead"},{from: "Beck", to: "Blur"},{from: "Blur", to: "Franz Ferdinand"},{from: "Blur", to: "Oasis"},{from: "Blur", to: "Radiohead"},{from: "The Smashing\nPumpkins", to: "Placebo"},{from: "The Smashing\nPumpkins", to: "Nirvana"},{from: "The Smashing\nPumpkins", to: "Radiohead"},{from: "The Doors", to: "Pink Floyd"},{from: "Green Day", to: "blink-182"},{from: "Green Day", to: "Red Hot\nChili Peppers"},{from: "Red Hot\nChili Peppers", to: "Nirvana"},{from: "Red Hot\nChili Peppers", to: "Incubus"},{from: "Placebo", to: "The Killers"},{from: "Placebo", to: "Muse"},{from: "Placebo", to: "Radiohead"},{from: "Placebo", to: "Interpol"},{from: "Placebo", to: "Franz Ferdinand"},{from: "Placebo", to: "The Cure"},{from: "Air", to: "Portishead"},{from: "Portishead", to: "Bjork"},{from: "Bjork", to: "Radiohead"},{from: "The Killers", to: "Muse"},{from: "The Killers", to: "U2"},{from: "The Killers", to: "Interpol"},{from: "The Killers", to: "Franz Ferdinand"},{from: "The Killers", to: "Bloc Party"},{from: "Muse", to: "Radiohead"},{from: "Muse", to: "Franz Ferdinand"},{from: "Radiohead", to: "Interpol"},{from: "U2", to: "The Cranberries"},{from: "Interpol", to: "Franz Ferdinand"},{from: "Interpol", to: "Bloc Party"},{from: "Franz Ferdinand", to: "Bloc Party"},];


const g_labels = [{label: "Yeah Yeah\nYeahs", pos: [0.7286955001595716,0.6807013565276694,-0.07515671140084525], pos2d: [0.6777574770566592,0.633118269466754]},{label: "Kaiser Chiefs", pos: [0.5055684293366438,0.8618520552174405,0.04014471541267893], pos2d: [0.5267131800540196,0.8978979113377326]},{label: "The Who", pos: [-0.16427988685117523,-0.387488024610124,0.9071191484914863], pos2d: [-1.7687164166030171,-4.171882775801275]},{label: "The White\nStripes", pos: [0.9169358272084261,0.3912024715052575,-0.07867220010765225], pos2d: [0.8500597559823228,0.36267039371758647]},{label: "Keane", pos: [0.48139275848726115,0.8618543885146749,0.1595870454454968], pos2d: [0.5728050191021198,1.0255129741206068]},{label: "Weezer", pos: [-0.07560155231688015,0.9916926290189516,-0.10406793375847527], pos2d: [-0.06847545337134903,0.8982170378257659]},{label: "Arctic Monkeys", pos: [0.5153632626240956,0.8508761637989972,-0.10203166869242455], pos2d: [0.4676483237869027,0.7720977427160267]},{label: "The Rolling\nStones", pos: [-0.4682386641353641,-0.3650373469181971,0.8046740264005349], pos2d: [-2.3972165887959833,-1.8688622930749683]},{label: "Aerosmith", pos: [-0.7763909107639324,-0.11739589674966801,0.6192215735175132], pos2d: [-2.0389571907631194,-0.3083050104338498]},{label: "Snow Patrol", pos: [0.5225877846346173,0.8318304871256075,0.1869760627435043], pos2d: [0.642770477826349,1.0231316065952172]},{label: "The Offspring", pos: [0.06473778291617158,0.10716966457497586,-0.9921308797018649], pos2d: [0.03249675188301885,0.05379649784406458]},{label: "Coldplay", pos: [0.4152125573298622,0.9085388272349402,0.04642985722747346], pos2d: [0.4354294862070895,0.9527760848230243]},{label: "R.E.M.", pos: [-0.6213139344470143,0.701728673607714,-0.3486342833095067], pos2d: [-0.4606986060908442,0.5203254005123565]},{label: "Pearl Jam", pos: [-0.5134744555268077,0.517327055664122,-0.6846288782978261], pos2d: [-0.30479974678199145,0.30708666005229407]},{label: "The Beatles", pos: [-0.12144435416654534,-0.18818386106939103,0.9745963796742156], pos2d: [-4.780592396245225,-7.407757581638344]},{label: "Linkin Park", pos: [-0.5264711287463432,-0.7880337327236777,-0.3191096781455349], pos2d: [-0.3991109590572336,-0.5973981889296209]},{label: "System of\na Down", pos: [-0.5194855414716623,-0.597283006161169,-0.6110546479268253], pos2d: [-0.32245060224379024,-0.37074037614414795]},{label: "Jimi Hendrix", pos: [-0.48320902190221593,-0.12188239974972845,0.8669796547691047], pos2d: [-3.6325948565497006,-0.9162688575057164]},{label: "Foo Fighters", pos: [-0.36596768032410176,0.5573611642455442,-0.7452624970767351], pos2d: [-0.20969205545703706,0.3193566384306706]},{label: "Modest Mouse", pos: [0.7336647705697348,0.4732225779312236,0.4876437184676897], pos2d: [1.4319425700716588,0.9236201350278188]},{label: "Moby", pos: [0.5437790889161742,-0.7840100357849883,0.2993869840956929], pos2d: [0.7761475687320745,-1.1190343570380825]},{label: "Bob Dylan", pos: [-0.2489613238796229,-0.6885767999811776,0.6810875492473676], pos2d: [-0.7806572722139726,-2.1591405363952973]},{label: "Metallica", pos: [-0.9725366400938202,-0.07960810335314727,0.21871221629241677], pos2d: [-1.2447866975196642,-0.10189344440453023]},{label: "The Strokes", pos: [0.6161431916633988,0.7785846957247633,-0.11905225302371676], pos2d: [0.5505937636053716,0.6957536554892779]},{label: "Guns N'\nRoses", pos: [-0.9401024693665676,0.08350358273110653,0.33050642771654243], pos2d: [-1.404199395313293,0.1247264890778546]},{label: "Daft Punk", pos: [0.8174580794641532,-0.5351054673076024,0.21313007102773382], pos2d: [1.0388731979271826,-0.6800431019222017]},{label: "The Shins", pos: [0.6502763404796071,0.6290815012773237,0.4259074380227675], pos2d: [1.1327029534052662,1.095784099885746]},{label: "Massive Attack", pos: [0.5236727899934714,-0.8397220131845606,-0.14364452510877745], pos2d: [0.4578982179306655,-0.7342508924306621]},{label: "Gorillaz", pos: [0.9769984735071091,-0.18699993550553962,0.10249393584846306], pos2d: [1.0885703311996235,-0.20835506630511874]},{label: "Death Cab\nfor Cutie", pos: [0.57878424817049,0.7470104018135822,0.3270844747951772], pos2d: [0.8601142736219661,1.110110220129349]},{label: "Led Zeppelin", pos: [-0.5391115930341059,-0.1212470060849246,0.8334613690937809], pos2d: [-3.2371563888842663,-0.7280413284603076]},{label: "Rage Against\nthe Machine", pos: [0.2063612630035878,0.6551720396652616,-0.7267493567746912], pos2d: [0.11950852171680533,0.37942509553848897]},{label: "Beck", pos: [0.8940990229724454,-0.02135290575418075,0.4473600233990238], pos2d: [1.61786888540279,-0.03863800423109499]},{label: "Blur", pos: [0.9803290270785004,-0.10064381294737484,0.16978168800769688], pos2d: [1.180808725750666,-0.12122572038414385]},{label: "The Smashing\nPumpkins", pos: [-0.10286907276503912,0.8891508076814969,-0.44590222590587153], pos2d: [-0.07114524822077141,0.6149453204724374]},{label: "Oasis", pos: [0.5105805176886734,0.508458942648602,0.6933808755636683], pos2d: [1.6651946242012494,1.6582753720379293]},{label: "The Doors", pos: [-0.4441813698552157,-0.10621530756972397,0.8896185806914224], pos2d: [-4.024059236033931,-0.9622571283740516]},{label: "The Chemical\nBrothers", pos: [0.7520693452218674,-0.6557685661670584,0.06602490139905048], pos2d: [0.8052349001043301,-0.7021263919663047]},{label: "Green Day", pos: [0.04223774934493209,-0.061698765364320174,-0.9972006993994745], pos2d: [0.02114847514204871,-0.03089262154918731]},{label: "Pink Floyd", pos: [-0.3971357544808313,-0.022206500273740853,0.9174911791720595], pos2d: [-4.813252092270194,-0.26914092397525713]},{label: "Red Hot\nChili Peppers", pos: [0.4154132175336921,-0.2814341781681886,-0.8650009607261165], pos2d: [0.22274155685794164,-0.15090296685885643]},{label: "AC/DC", pos: [-0.8032609882901689,-0.05427660585154326,0.5931490830713144], pos2d: [-1.974337416648781,-0.13340662044288099]},{label: "Placebo", pos: [0.36149424023938825,0.9179683556725418,-0.16326669059426882], pos2d: [0.310757836670037,0.789129752527846]},{label: "Air", pos: [0.2565680969505104,-0.9642870042423846,-0.06575245300711229], pos2d: [0.2407389222765394,-0.9047945435373531]},{label: "Portishead", pos: [0.4498290540726022,-0.8671274756300589,-0.21387791639061485], pos2d: [0.37057190677802176,-0.714344880915541]},{label: "Queens of the\nStone Age", pos: [0.2834070118135861,0.2942095731737583,-0.912754727573522], pos2d: [0.14816693835759584,0.15381458423944716]},{label: "Nirvana", pos: [-0.7182028016267028,0.27627829204977966,-0.638635295828233], pos2d: [-0.4382932574778294,0.16860267367189682]},{label: "Bjork", pos: [0.1455538575275596,-0.8152568479325133,-0.5605090065806209], pos2d: [0.09327332102138676,-0.5224300817839558]},{label: "The Killers", pos: [0.4837468402610364,0.874996821289671,0.01922387241011809], pos2d: [0.49322860401361485,0.8921473480801899]},{label: "blink-182", pos: [-0.0393398760225584,-0.04384519936526177,-0.9982634785702375], pos2d: [-0.019687031487312268,-0.021941650756001966]},{label: "Muse", pos: [0.44932050533411894,0.8789363062532518,-0.15994390590512547], pos2d: [0.3873639949713826,0.7577403543211874]},{label: "Radiohead", pos: [0.8602144810730008,0.10868190463572389,-0.4982161078859888], pos2d: [0.5741591460305281,0.07254087315152158]},{label: "U2", pos: [-0.5846948189458048,0.7984666651895418,0.14346760358709643], pos2d: [-0.6826301274703267,0.9322083654202259]},{label: "Interpol", pos: [0.2330024155627783,0.902662498094934,0.3618152689908642], pos2d: [0.3651018337501447,1.4144219600296457]},{label: "The Cranberries", pos: [-0.893909140056211,-0.20404853777392648,-0.39911231947446985], pos2d: [-0.6389116353374533,-0.14584142740632183]},{label: "Franz Ferdinand", pos: [0.5110564702553517,0.8568767476132184,-0.06770172530992505], pos2d: [0.47865097352634306,0.8025431890769776]},{label: "Bloc Party", pos: [0.4701865829184336,0.8262020437444965,0.3103461940412766], pos2d: [0.6817718960671912,1.1979953370893826]},{label: "The Cure", pos: [-0.12588323421944214,0.9200810904372311,0.37095039878976743], pos2d: [-0.20011654721226207,1.46265268854329]},{label: "Incubus", pos: [-0.33277901645851937,0.5113072056943142,-0.7923528681149414], pos2d: [-0.18566601609453762,0.28527150807757384]},];


const g_colors = ['#decbe4', '#ccebc5', '#fbb4ae', '#fed9a6', '#b3cde3'];
const tempV = new THREE.Vector3();
const myV = new THREE.Vector3();

const cameraToPoint = new THREE.Vector3();
const cameraPosition = new THREE.Vector3();
const normalMatrix = new THREE.Matrix3();
const settings = {
  minArea: 20,
  maxVisibleDot: -0.2,
};


  const width = 1200
  const height = 700
  const globeRadius = 200
  const globeSegments = 64
  const globeWidth = 4098 / 2
  const globeHeight = 1968 / 2


const clusterColors = [];

//label and position in a dictionary table for efficient access when drawing edges. 
// key: label name
// value: position in V3 and color of the node, which is inverse color of the cluster.
// if node numbers is more than the numbers of clusters, randomize the color of node.
const labelTable = new Object();  



var labels = [];
var scene = new THREE.Scene();


const canvas = document.querySelector('#c');
const renderer = new THREE.WebGLRenderer({canvas});




var camera = new THREE.PerspectiveCamera(45, width / height, 1, 4000);
camera.position.set(0, 5, -500);



renderer.setSize(width, height);

renderer.setClearColor(0x999999);


var controls = new THREE.OrbitControls(camera, renderer.domElement);

scene.add(new THREE.AxesHelper(1));


let sphereRadius = globeRadius;
const loader = new THREE.TextureLoader();
const geometry = new THREE.SphereGeometry(sphereRadius-2, 128, 64);



const material = new THREE.MeshBasicMaterial({transparent: false, opacity: 0.5, color: '#C8C8C8', vertexColors: THREE.FaceColors, wireframe: false });

let sphere = new THREE.Mesh(geometry, material);
scene.add(sphere);


const labelContainerElem = document.querySelector('#labels');

///// Main actions: 
//  draw clusters, labels and nodes, and then edges.

// draw cluster.
g_clusters.forEach(drawPoly);

// now we have color for clusters, so prepare label hash table and node color
prepareLabels();

//time for nodes and labels
g_labels.forEach(drawLabelAndNode);

// finally the edges.
g_edges.forEach(drawArcForItem);

polyCounter =0;
sphereRadius = sphereRadius-0.5;
g_clusters.forEach(drawPoly);


function prepareLabels()
{
  for (var i=0; i< g_labels.length; i++)
  {
    var labelName = g_labels[i].label;

    var nodeColor;
    if (i < clusterColors.length)
    {
      nodeColor = invertColor(clusterColors[i]);
    }
    else
    {
      nodeColor = getRandomColor();
    }

    var posi = g_labels[i].pos;
    var tempV = new THREE.Vector3(posi[0], posi[1], posi[2]).normalize().multiplyScalar(sphereRadius);

    var posAndColor = {pos: tempV, color: nodeColor};

    labelTable[labelName] = posAndColor;

  }
}

function drawLabelAndNode (data, index, array)
{
  var v3Pos = labelTable[data.label].pos;
  drawLabelAt(v3Pos,  data.label);
  spot(v3Pos, labelTable[data.label].color);

}


function spot(point, color) {
  var s = new THREE.Mesh(new THREE.SphereGeometry(3, 32, 24), new THREE.MeshBasicMaterial({
    color: color
  }));
  s.position.copy(point);
  scene.add(s);
  return s;
}


function spot2(point, color) {
  var s = new THREE.Mesh(new THREE.SphereGeometry(5, 32, 24), new THREE.MeshBasicMaterial({
    color: color
  }));
  s.position.copy(point);
  //scene.add(s);
  return s;
}



function drawLabel (node, index, array)
{
  var tempV = new THREE.Vector3(node.pos[0], node.pos[1], node.pos[2]).normalize().multiplyScalar(sphereRadius);
  var meshPoint = spot(tempV, 0xff0000);
  
  const elem = document.createElement('div');
    elem.textContent = node.label;
    labelContainerElem.appendChild(elem);

    labels.push({elem, meshPoint});

   
}

function drawLabelAt (v3Pos, txt)
{
  
  var meshPoint = spot2(v3Pos, 0xff0000);
  
  const elem = document.createElement('div');
    elem.textContent = txt;
    labelContainerElem.appendChild(elem);

    labels.push({elem, meshPoint});

   
}

function drawArcForItem (edge, index, array)
{

  var fromKey = edge.from.trim();
  var toKey = edge.to.trim();
  if (fromKey in labelTable  && toKey in labelTable)
  {
    var v3Start = labelTable[fromKey].pos;
    var v3End = labelTable[toKey].pos;

    var lineStart = v3Start.clone().normalize().multiplyScalar(sphereRadius +2);
    var lineEnd = v3End.clone().normalize().multiplyScalar(sphereRadius +2);
    setShortArc(lineStart, lineEnd, 20, "white");
  }
  
}

function setArc3D(pointStart, pointEnd, smoothness, color, clockWise) {
  // calculate normal
  var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();

  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  if (clockWise) angle = angle - Math.PI * 2;
  var angleDelta = angle / (smoothness - 1);

  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    geometry.vertices.push(pointStart.clone().applyAxisAngle(normal, angleDelta * i))
  }

  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  return arc;
}


function GetSmoothness(pointStart, pointEnd)
{
  // we use 0.5 degree as the divider.
  var angleInterval = 0.5; 
  var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();

  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  if (Math.abs(angle) > Math.abs(angle - Math.PI*2))
  {
    angle = angle - Math.PI * 2;
  }

  if (Math.abs(angle)*(180.0/Math.PI) < angleInterval)
  {
    return 2;
  }

   var smoothness = (Math.abs(angle) * 180/Math.PI)/angleInterval;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2)
    {
      smoothness =2;
    }

    return smoothness;
}

function setShortArc(pointStart, pointEnd, smoothness, color) {
  // calculate normal
 
  var cb = new THREE.Vector3(), ab = new THREE.Vector3(), normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();
  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  //console.log(angle + " ");
  //////////
  if (Math.abs(angle) < (Math.PI / 180)) {
    smoothness = 2;
  }
  else {
    smoothness = Math.abs(angle) * 180 / Math.PI;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2) {
      smoothness = 2;
    }
  }
  //////
  if (Math.abs(angle) > Math.abs(angle - Math.PI * 2))
  //if (Math.abs(angle) > Math.abs(Math.abs(angle) - Math.PI * 2))
  {
    angle = angle - Math.PI * 2;
  }
  var angleDelta = angle / (smoothness - 1);
  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
    
    geometry.vertices.push(v3);
  }
  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  scene.add(arc);
  }



function setArcGetGeoPoints(pointStart, pointEnd, smoothness, color) {
  // calculate normal
  var geoPoints = [];
  var cb = new THREE.Vector3(), ab = new THREE.Vector3(), normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();
  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  //////////
  if (Math.abs(angle) < (Math.PI / 180)) {
    smoothness = 2;
  }
  else {
    smoothness = Math.abs(angle) * 180 / Math.PI;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2) {
      smoothness = 2;
    }
  }
  //////
  if (Math.abs(angle) > Math.abs(angle - Math.PI * 2)) {
    angle = angle - Math.PI * 2;
  }
  var angleDelta = angle / (smoothness - 1);
  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
    var latLon = vector3toLonLat(v3.clone());
    geoPoints.push(latLon);
    geometry.vertices.push(v3);
  }
  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  return [arc, geoPoints];
  }


function getArcPoints (pointStart, pointEnd, smoothness)
{
  var points = [];
  if (smoothness < 3)
  {
    points.push(pointStart);
    points.push(pointEnd);

  }
  else
  {
    var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
    cb.subVectors(new THREE.Vector3(), pointEnd);
    ab.subVectors(pointStart, pointEnd);
    cb.cross(ab);
    normal.copy(cb).normalize();

    // get angle between vectors
    var angle = pointStart.angleTo(pointEnd);
    if (Math.abs(angle) > Math.abs(angle - Math.PI*2))
    {
      angle = angle - Math.PI * 2;
    }

    var  angleDelta = angle / (smoothness - 1);
  

  
    for (var i = 0; i < smoothness; i++)
     {
      var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
      points.push(v3);
     }
     

  }
  return points;

}

//////////////
function pointInTriangle (position,coord1,coord2,coord3){
  
  
  var d1,d2,d3;
  var m1 = new THREE.Matrix3();
 m1.set(position.x, position.y, position.z, coord2.x, coord2.y, coord2.z, coord3.x, coord3.y, coord3.z );
 d1 = m1.determinant();

 
  var m2 = new THREE.Matrix3();
  m2.set(coord1.x, coord1.y, coord1.z, position.x, position.y, position.z, coord3.x, coord3.y, coord3.z);
  d2 = m2.determinant();

  
  var m3 = new THREE.Matrix3();
  m3.set(coord1.x, coord1.y, coord1.z, coord2.x, coord2.y, coord2.z, position.x, position.y, position.z);
  d3 = m3.determinant();

  if((d1>=0 && d2 >=0 && d3>=0) || (d1<=0 && d2 <=0 && d3<=0)){
      return true;
  }
  return false;
}


function randColorPoly (poly, index, array)
{
   if (poly.length < 3)
   {
     return
   }

   var points = [];
   for (var i=0; i< poly.length; i++)
   {
    var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
    points.push(tempV);
   }
   drawPolygon(points, getRandomColor());
}

function drawPoly ( poly, index, array)
{
  var clr = g_colors[index];
  clusterColors.push(clr);

  drawPolyAzimuthal(poly,clr)
  polyCounter++;
}

function v3toGeoArray (points)  // not Vector3
{
  var geoArray = [];
  for (var i=0; i< points.length; i++)
  {
    var temp = new THREE.Vector3(points[i][0], points[i][1], points[i][2]).normalize();
    var geoPoint = vector3toLonLat(temp);
    geoArray.push(geoPoint);
  }
  return geoArray;

}

function removeStrayEdges (orig_points)
{
  var points = removeStrayEdges1 (orig_points);

  //do one more time, starting from middle
  var shuffledPoints = [];
  var start = Math.floor(points.length/2);
  for (var i= start; i< points.length; i++)
  {
    shuffledPoints.push(points[i]);
  }
  for (var i=0; i< start; i++)
  {
    shuffledPoints.push(points[i]);
  }

  var finalPoints = removeStrayEdges1 (shuffledPoints);
  if (false == almostSame(finalPoints[0], finalPoints[finalPoints.length -1]))
  {
    finalPoints.push(finalPoints[0]);
  }

  /*
  var final = [];
  final.push(finalPoints[0]);

  for (var i=1; i<finalPoints.length; i++)
  {
    

    var distance = 0.0;
     
        distance = finalPoints[i-1].angleTo(finalPoints[i]);
        distance = Math.abs(distance * 180/Math.PI);
        
      
      if (distance > 8.0)
      {
        var smoothPoints = GetSmoothPoint(finalPoints[i-1], finalPoints[i], 10);
        for (var k=0; k<smoothPoints.length; k++)
        {
          final.push(smoothPoints[k]);
        }
      }
      else
      {
        final.push(finalPoints[i]);
      }
  }
  return final;
  */
 return finalPoints;
}
function removeStrayEdges1 (orig_points)
{
  // first go through remove consective points that are almost same
  var points = [];
  points.push(orig_points[0]);

  for (var i=1; i< orig_points.length -1; i++)
  {
    var p = points[points.length-1];
    if (false == almostSame(p, orig_points[i]) )
    {
      points.push(orig_points[i]);
    }
  }



  var flag = [];
  for (var i=0; i< points.length -1; i++)
  {
    flag.push(-1);
  }

  for (var i=1; i< points.length -1; i++)
  {
    var startj =0;
    if (i > (points.length -1)/2 )
    {
      startj =Math.floor( i - (points.length -1)/2);

    }
    for (var j=startj; j < i; j++)
    {
      if (almostSame (points[j], points[i]))
      {
        if (flag[j] < i)
        {
          flag[j] = i;
        }
      }
    }
  }
  var newPoints = [];
  var i=0; 
  while (i< points.length )
  {
    
      newPoints.push(points[i]);
      if (flag[i] > 0)
      {
         i = flag[i];
      }
      else
      {
        i++;
      }
    
  }
  return newPoints;
}


function almostSame (p1, p2)
{
  
  var angle = p1.angleTo(p2);
  if (Math.abs(angle*180/Math.PI) < 0.01)
  {
    return true;
  }
  return false;
}

function v3toGeoAndThreeArray (points)  // not Vector3
{
  var geoArray = [];
  var ThreeArray =[];
  for (var i=0; i< points.length; i++)
  {
    var temp = new THREE.Vector3(points[i][0], points[i][1], points[i][2]).normalize();
    var threeV = temp.multiplyScalar(sphereRadius);
    ThreeArray.push(threeV.clone());
   // var geoPoint = vector3toLonLat(temp);
   // geoArray.push(geoPoint);
  }

  // this section is the manual stray edge removal://///////
  if (polyCounter == 2)
  {
    ThreeArray = ThreeArray.slice (4, 317);
  }
  ////
  var cleanV3Array = removeStrayEdges(ThreeArray);
  //var cleanV3Array = ThreeArray;
  for (var i=0; i< cleanV3Array.length; i++)
  {
    //debugging 
    /*
    drawLabelAt(cleanV3Array[i], i.toString());
     if (i < cleanV3Array.length -1) 
     console.log(i + ": " +  cleanV3Array[i].angleTo(cleanV3Array[i+1])* 180/Math.PI);
     */
    ///////////

    var tmp = cleanV3Array[i].clone().normalize();
    var geoPoint = vector3toLonLat(tmp);
    geoArray.push(geoPoint);
  }
  
  
  //return [geoArray, ThreeArray];
  return [geoArray, cleanV3Array];

  /*  isClocwise not work for huge polygon.

  if (isClockwise(geoArray, cleanV3Array) )
 {
  return [geoArray, cleanV3Array];
 }
 else
 {
   console.log ("poly " + polyCounter + " is counter-clockwise");
   var geo = [];
   var v3 = [];
   for (var i= geoArray.length -1; i >=0; i--)
   {
     geo.push(geoArray[i]); v3.push(cleanV3Array[i]);
   }
   return [geo, v3];
 }
 */

}

function getArea (geoPoints)
{
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
  var area = d3.geoArea(geoPolyformat);
  return area;
}

function isClockwise (geoPoints, v3Points)
{
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   var c = d3.geoCentroid(geoPolyformat);
   var ctr = lonLatToVector3(c[0], c[1]).normalize();
   var centerV3 = ctr.clone().multiplyScalar(sphereRadius);
   
   var mid = Math.floor(v3Points.length/2);
   if (centerV3.clone().dot(v3Points[0]) < 0 )
   {
     return false;
   }
   if (centerV3.clone().dot(v3Points[mid]) < 0)
   {
     return false;
   }
   return true;
}

function testDrawPolyEarcut()
{
  var geoRectangle = [ [90, 10], [110, 20], [100, 40], [115, 25], [160, 50], [-160, 50], [150, 10], [145, 40], [120, 20], [130, 10]];
  var v3points = [];
  for (var i=0; i < geoRectangle.length; i++)
  {
    var vct3 = lonLatToVector3(geoRectangle[i][0], geoRectangle[i][1]);
    var v3 = [vct3.x, vct3.y, vct3.z];
    v3points.push(v3);
  }

  // test getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
 var ret = getCross180LatFromLonLat (160, 70, -150, 50);
  //var splitPolys = cutAlong180(geoRectangle);

  drawPolyEarcut2(v3points, getRandomColor());
}


function testDrawPolyEarcut3()
{
  var geoRectangle = [ [90, 10], [110, 20], [100, 40], [115, 25], [160, 50], [-160, 50], [150, 10], [145, 40], [120, 20], [130, 10]];

   var tmp2 = azimuthalProjection (geoRectangle);
  var v3points = [];
  for (var i=0; i < geoRectangle.length; i++)
  {
    var vct3 = lonLatToVector3(geoRectangle[i][0], geoRectangle[i][1]);
    drawLabelAt(vct3.clone().normalize().multiplyScalar(sphereRadius), i.toString());
   
    //var v3 = [vct3.x, vct3.y, vct3.z];
    v3points.push(vct3);
  }

  // test getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
 //var ret = getCross180LatFromLonLat (160, 70, -150, 50);
  //var splitPolys = cutAlong180(geoRectangle);

  drawPolyEarcut3(v3points, getRandomColor());
  
}

function triFaceInside ( a, b, c)
{
  var ac = c.clone().sub(a.clone()).normalize();
  var ab = b.clone().sub(a.clone()).normalize();
  var normal = ac.cross(ab).normalize();
  var final = normal.add(a.clone().normalize());
  if (final.length() < 1)
  {
    return true;
  }
  return false;

}
/**
 * 
 * @param {*} points : THREE.JS Vector3 normalized array, in clockwise order.
 */
function earcut3d (points) 
{
   var ret =[];
  
    var remain =[];
    for (var x=0; x< points.length; x++)
    {
      remain.push(x);
    }

    while (remain.length > 3)
    { 
      var newRemain = [];
      for (var i=0; i< remain.length-2; )
      {
        var a = remain[i];
        var b = remain[i+1];
        var c = remain[i+2];
        newRemain.push(a);
        // for a, b, c triangle.
        // remove same points and point in a straight line

        /****
         *     c
         *   b
         *     a
         */
        var  ba = points[a].clone().sub(points[b].clone()).normalize();
        if (isZero(ba))
        {
          i +=2;
          continue; // drop point b
        }
        var bc = points[c].clone().sub(points[b].clone()).normalize();
        if (isZero(bc))
        {
          i +=2;
          continue;  // drop b
        }

        var cross = ba.cross(bc).normalize();;
        if (isZero(cross))
        {
          i +=2;
          continue; // drop b, straigt line.
        }

        var addV = cross.add(points[b].clone().normalize());

        if (addV.length() > 1)
        {
          // cut it
          // clockwise
          ret.push(a); ret.push(b); ret.push(c);
          i +=2;
        }
        else
        {
          // can't cut
          //newRemain.push(b);
          i++;
        }

      }

      // push the last one/two points for next round
      while (i < remain.length)
      {
        newRemain.push(i);
        i++;
      }

      remain = newRemain;
    }

    // 3 points remaining, figure out clock wise or not
    var fa = remain[0];
    var fb = remain[1];
    var fc = remain[2];
    var  fba = points[fa].clone().sub(points[fb].clone());
    if (isZero(fba))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }
    var fbc = points[fc].clone().sub(points[fb].clone());
    if (isZero(fbc))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }

    var fcross = fba.cross(fbc).normalize();
    if (isZero(fcross))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }

    if (fcross.add(points[fb]).length() > 1)
    {
     
      // clockwise
      ret.push(fa); ret.push(fb); ret.push(fc);
    }
    else
    {
      //counter clockwise
      ret.push(fa); ret.push(fc);  ret.push(fb);
    }

    return ret;


  


}

function isZero (v3)
{
  if ( v3.length() < 0.0001)
  {
    return true;
  }
  return false;
}

function checkClockWise (points)
{
  var sum = 0.0;
  for (var i=0; i< points.length-1; i++)
  {
     sum += (points[i+1][1] - points[i][1])*(points[i+1][0] + points[i][0]);
  }

  if (sum > 0)
  {
    return true;
  }
  return false;
}

function findCenterPointGeo (geoData)
{
  var minLat, maxLat, minLon, maxLon;

  
  minLon = maxLon = geoData[0][0];
  minLat = maxLat = geoData[0][1];

  for (var i=1; i<geoData.length; i++)
  {
    
    var lon = geoData[i][0];
    var lat = geoData[i][1];
    if (lon < minLon)
    {
      minLon = lon;
    }
    if (lon > maxLon)
    {
      maxLon = lon;
    }
    if (lat < minLat)
    {
      minLat = lat;
    }
    if (lat > maxLat)
    {
      maxLat = lat;
    }
  }

  var midLat = (minLat + maxLat)/2.0;

  //we have to take care of +180 and -180 scenarios
  var midLon;
  // all positives or all negative
  if  (((minLon >=0) && (maxLon >=0)) || ((minLon <=0) && (maxLon <=0)))
  {
   midLon = (minLon + maxLon)/2.0;
  }
  else
  {
    // one positive and one negative, which mean minLon is negative.
    if (Math.abs(minLon) + Math.abs(maxLon) <= 180.0)
    {
      midLon = (minLon + maxLon)/2.0;
    }
    else
    {
      var reverseMid = ((180 - Math.abs(minLon) ) + (180 -Math.abs(maxLon)))/2;
      if (Math.abs(minLon) < Math.abs(maxLon))
      {
        midLon = minLon - reverseMid;
      }
      else
      {
        midLon = maxLon + reverseMid;
      }
    }
  }
  //return lonLatToVector3(midLon*Math.PI/180, midLat*Math.PI/180);
  return [midLon, midLat];
}

/*
function splitPolyTo (geoPoints, v3Points, maxArea)
{
  // split twice at most
  var ret = [];
  var t = splitPoly(geoPoints, v3Points);
  for (var i=0; i < t.length; i++)
  {
    if (getArea(t[i][0]) > maxArea)
    {
      t1 = splitPoly(t[i][0], t[i][1]);
      ret.push(t1[0]);
      ret.push(t1[1]);
    }
    else
    {
      ret.push(t[i]);
    }
  }
  return ret;
  
}
*/

function splitPolyTo (geoPoints, v3Points, maxArea)
{
  // split twice at most
  var final = [];
  var ret = [];
  var t = splitPoly(geoPoints, v3Points);
  for (var i=0; i < t.length; i++)
  {
    if (getArea(t[i][0]) > maxArea)
    {
      t1 = splitPoly(t[i][0], t[i][1]);
      ret.push(t1[0]);
      ret.push(t1[1]);
    }
    else
    {
      ret.push(t[i]);
    }
  }
  // one more time
  for (var i=0; i< ret.length; i++)
  {
    if (getArea(ret[i][0]) > maxArea)
    {
      var t1 = splitPoly(ret[i][0], ret[i][1]);
      final.push(t1[0]);
      final.push(t1[1]);
    }
    else
    {
      final.push(ret[i]);
    }
    
  }
  return final;
  
}


function splitPoly (geoPoints, v3Points)
{
  //idea: center to nearest point p1, and then to nearest point p2 that is the opposite direction of p1.
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   var c = d3.geoCentroid(geoPolyformat);
   var ctr = lonLatToVector3(c[0], c[1]).normalize();
   var centerV3 = ctr.clone().multiplyScalar(sphereRadius);

   var twoIndex = getNearest2Points( centerV3, v3Points);

   var geo1 = [];
   var geo2 = [];
   var v1 = [];
   var v2 =[];

   var a = twoIndex[0]; 
   var b = twoIndex[1];

   for (var i = a; i <=b; i++)
   {
     geo1.push(geoPoints[i]);
     v1.push(v3Points[i]);
   }
   geo1.push(c); v1.push(centerV3);
   geo1.push(geoPoints[a]); v1.push(v3Points[a]);

   //second poly
   geo2.push(geoPoints[a]); v2.push(v3Points[a]);
   geo2.push(c); v2.push(centerV3);
   for (var i= b; i < v3Points.length; i++)
   {
    geo2.push(geoPoints[i]);
    v2.push(v3Points[i]);
   }
   for (var i=0; i<=a; i++)
   {
    geo2.push(geoPoints[i]);
    v2.push(v3Points[i]);
   }

   return [[geo1, v1], [geo2, v2]];


}

function getNearest2Points ( center, v3Points)
{
  var angle = Math.abs(center.angleTo(v3Points[0]));
  var idx =0;
  for (var i=1; i< v3Points.length; i++)
  {
     var a =  Math.abs(center.angleTo(v3Points[i]));
     if (a < angle)
     {
       angle = a;
       idx = i;
     }
  }
  // now find the index on the opposite side using dot operation.
  var v1 = v3Points[idx].clone().sub(center.clone());
  var idx2 = -1;
  var angle2 = 999; //init big value
  for (var i=0; i< v3Points.length; i++)
  {
    if (i != idx)
    {
      var v2 =  v3Points[i].clone().sub(center.clone());
      if (v2.dot(v1) < 0)
      {
        var b = Math.abs(center.angleTo(v3Points[i]));
        if (b < angle2)
        {
          angle2 = b;
          idx2 = i;
        }
      }
    }
  }

  if (idx2 > idx)
  {
    return [idx, idx2];
  }
  else
  {
    return [idx2, idx];
  }

  
}

function azimuthalProjection (geoPoints, theColor="")
{
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   
  var c = d3.geoCentroid(geoPolyformat);
 //var c= findCenterPointGeo(geoPoints);
    
  // for debuging only comment out later///////////////
  //plot out the center with Polygon cluster number:
  /*
  var ctr = lonLatToVector3(c[0], c[1]).normalize();
  var centerV3 = ctr.clone().multiplyScalar(sphereRadius);
  var ctrForLine = ctr.clone().multiplyScalar(sphereRadius + 2);
   
  ////// to be commented out /////////////
  if (polyCounter < gNodes.length )
  {  var lbl = gNodes[polyCounter].label;
    if (polyCounter != 20  && polyCounter != 41)
    { 
      if ((lbl != "Modest Mouse")  && (lbl != "Aerosmith"))
      {
        gLabelTable[lbl] = ctrForLine;
      // drawLabelAt (centerV3, polyCounter.toString());
        drawLabelAt (centerV3, lbl);
        var nodeColor = invertColor(theColor);
        spot(centerV3, nodeColor);
      }
    }
  }
  else
  {
  drawLabelAt (centerV3, polyCounter.toString());
  }
  ////////////// to be comment out above /////////////////
  ***/



  var projection = d3.geoAzimuthalEquidistant().rotate([-c[0], -c[1]]);
  var ret =[];

  for (var i=0; i< geoPoints.length; i++)
  {
    var p = projection(geoPoints[i]);
    ret.push(p);
  }

  return ret;
} 


function drawPolyEarcut (points, theColor, )
{
  var geoArray = v3toGeoArray (points);

 

  var wrapper =[];
  wrapper.push(geoArray);
  //wrapper.push(points);
  var data = earcut.flatten(wrapper);
  var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

  var c = -1; // the counter

  const polyGeometry = new THREE.Geometry();

  for ( var i=0; i <= triangles.length -3; i += 3)
  {
    // clock wise triangle
    /*************
        tb--------tc 
        \       /
          \   /
             ta
            
    ************/
    var ia = triangles[i]; 
    var ib = triangles[i+1];
    var ic = triangles[i+2];

    

    var ta = new THREE.Vector3(points[ia][0],points[ia][1], points[ia][2]).normalize().multiplyScalar(sphereRadius);
    var tb = new THREE.Vector3(points[ib][0],points[ib][1], points[ib][2]).normalize().multiplyScalar(sphereRadius);
    var tc = new THREE.Vector3(points[ic][0],points[ic][1], points[ic][2]).normalize().multiplyScalar(sphereRadius);

    // push ta into the vertice array
    c++;
    polyGeometry.vertices.push(ta);
    var taCounter = c;

    var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
    var sectionPoints = getArcPoints(tb, tc, smooth);

    for (var j =0; j< smooth - 1; j++)
    {
      var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
      var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
      var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
      
      for (var k =0; k < cordSmooth; k++)
      {
        polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
        c++;
        polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
        c++;

        if (k == 0)
        {
         // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
          polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
        }
        else
        {
          //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

         // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

        }
      }
    }
  }  // end of for ( var i=0; i < triangles.length -3; i += 3)

  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
     /* wireframe: true,   */
      vertexColors: THREE.FaceColors
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);  

}


function invertColor(hex) {
  if (hex.indexOf('#') === 0) {
      hex = hex.slice(1);
  }
  // convert 3-digit hex to 6-digits.
  if (hex.length === 3) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }
  if (hex.length !== 6) {
      throw new Error('Invalid HEX color.');
  }
  // invert color components
  var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),
      g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),
      b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);
  // pad each with zeros and return
  return '#' + padZero(r) + padZero(g) + padZero(b);
}

function padZero(str, len) {
  len = len || 2;
  var zeros = new Array(len).join('0');
  return (zeros + str).slice(-len);
}


function drawPolyEarcut3 (points, theColor)
{
  
  var triangles = earcut3d(points);
  
  var c = -1; // the counter

  const polyGeometry = new THREE.Geometry();

  for ( var i=0; i <= triangles.length -3; i += 3)
  {
    // clock wise triangle
    /*************
        tb--------tc 
        \       /
          \   /
            ta
            
    ************/
    var ia = triangles[i]; 
    var ib = triangles[i+1];
    var ic = triangles[i+2];

    

    var ta = points[ia].clone().normalize().multiplyScalar(sphereRadius);
    var tb =points[ib].clone().normalize().multiplyScalar(sphereRadius);
    var tc =points[ic].clone().normalize().multiplyScalar(sphereRadius);

    // push ta into the vertice array
    c++;
    polyGeometry.vertices.push(ta);
    var taCounter = c;

    var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
    var sectionPoints = getArcPoints(tb, tc, smooth);

    for (var j =0; j< smooth - 1; j++)
    {
      var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
      var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
      var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
      
      for (var k =0; k < cordSmooth; k++)
      {
        polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
        c++;
        polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
        c++;

        if (k == 0)
        {
        // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
          polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
        }
        else
        {
          //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

        // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

        }
      }
    }
  }  // end of for ( var i=0; i < triangles.length -3; i += 3)

  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      wireframe: true,   
      vertexColors: THREE.FaceColors
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);  
  

  
}


function drawPolyAzimuthal (gPoints, theColor )
{
  var conv = v3toGeoAndThreeArray (gPoints);
  var geoArray = conv[0];
  var points = conv[1];

  var area = getArea(geoArray);
  console.log ("poly " + polyCounter + " area:" + area);

  //if (area < 1.8)  // entire sphere area  is 4*PI = 12. // puposely put 18, not spliting for LastFM.
  if (area < 1.8 || polyCounter == 4)
  {
    drawPolyAzimuthal2 (geoArray, points, theColor );
    return;
  }
  
  var split = splitPolyTo(geoArray, points, 1.0);

  for (var i=0; i< split.length; i++)
  {
   drawPolyAzimuthal2 (split[i][0], split[i][1], theColor )
  }
  /*
  var l = geoArray.length/2;
  l = Math.floor(l);
  var geo1 = [];
  var geo2 =[];
  var p1 = [];
  var p2 =[];
  for (var i=0; i<= l; i++)
  {
    geo1.push(geoArray[i]);
    p1.push(points[i]);
  }
  geo1.push(geoArray[0]);
  p1.push(points[0]);

  for (var i=l; i< points.length; i++)
  {
    geo2.push(geoArray[i]);
    p2.push(points[i]);
  }
  geo2.push(geoArray[l]);
  p2.push(points[l]);
  */

  //drawPolyAzimuthal2 (geo1, p1, theColor );
  //drawPolyAzimuthal2 (geo2, p2, theColor );

 // drawPolyAzimuthal2 (geo1, p1, getRandomColor() );
 // drawPolyAzimuthal2 (geo2, p2, theColor );


}
function drawPolyAzimuthal2 (geoArray, points , theColor)
{
  /*
  var conv = v3toGeoAndThreeArray (gPoints);
  var geoArray = conv[0];
  var points = conv[1];
  */
  var aziArray = azimuthalProjection (geoArray, theColor);

  // debugging only: did not work
  //var clockwise = checkClockWise(aziArray);
  //console.log(clockwise);
  ////////////

 
    

    var wrapper =[];
    wrapper.push(aziArray);
  
    var data = earcut.flatten(wrapper);
    var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

    var c = -1; // the counter

    const polyGeometry = new THREE.Geometry();

    for ( var i=0; i <= triangles.length -3; i += 3)
    {
      // clock wise triangle
      /*************
          tb--------tc 
          \       /
            \   /
              ta
              
      ************/
      var ia = triangles[i]; 
      var ib = triangles[i+1];
      var ic = triangles[i+2];

      

      var ta = points[ia];
      var tb =points[ib];
      var tc =points[ic];


      // test out wrong clockwise direction.
      
       if (triFaceInside (ta, tb, tc) )
       {
         // switch tb, tc
         tb = points[ic];
         tc = points[ib];
       }
       

      // push ta into the vertice array
      c++;
      polyGeometry.vertices.push(ta);
      var taCounter = c;

      var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
      var sectionPoints = getArcPoints(tb, tc, smooth);

      for (var j =0; j< smooth - 1; j++)
      {
        var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
        var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
        var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
        
        for (var k =0; k < cordSmooth; k++)
        {
          polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (k == 0)
          {
            polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
           // polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
          }
          else
          {
            polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
           // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

             polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
            //polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

          }
        }
      }
    }  // end of for ( var i=0; i < triangles.length -3; i += 3)

    const polyMaterial = new THREE.MeshBasicMaterial(
      {color: theColor,
        side: THREE.DoubleSide,
       /*wireframe: true,  */ 
        vertexColors: THREE.FaceColors
      });

    const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
    scene.add(myPoly);  
  

}

function drawPolyEarcut2 (gPoints, theColor, )
{
  var geoArray = v3toGeoArray (gPoints);

  var splitPolysBig = cutAlong180(geoArray);
  var splitPolys = [];
  for (var xx=0; xx < splitPolysBig.length; xx++)
  {
    splitPolys = splitPolys.concat(slicePoly(splitPolysBig[xx], 90));
  }

  for (var q=0; q< splitPolys.length; q++)
  {
    //test color
    theColor = getRandomColor();


    var points = [];
    for (var t=0; t< splitPolys[q].length; t++)
    {
      var tmp = lonLatToVector3(splitPolys[q][t][0], splitPolys[q][t][1] ).normalize().multiplyScalar(sphereRadius);
      points.push(tmp);
    }

    var wrapper =[];
    wrapper.push(splitPolys[q]);
    //wrapper.push(points);
    var data = earcut.flatten(wrapper);
    var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

    var c = -1; // the counter

    const polyGeometry = new THREE.Geometry();

    for ( var i=0; i <= triangles.length -3; i += 3)
    {
      // clock wise triangle
      /*************
          tb--------tc 
          \       /
            \   /
              ta
              
      ************/
      var ia = triangles[i]; 
      var ib = triangles[i+1];
      var ic = triangles[i+2];

      

      var ta = points[ia];
      var tb =points[ib];
      var tc =points[ic];

      // push ta into the vertice array
      c++;
      polyGeometry.vertices.push(ta);
      var taCounter = c;

      var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
      var sectionPoints = getArcPoints(tb, tc, smooth);

      for (var j =0; j< smooth - 1; j++)
      {
        var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
        var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
        var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
        
        for (var k =0; k < cordSmooth; k++)
        {
          polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (k == 0)
          {
          // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
            polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
          }
          else
          {
            //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
            polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

          // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
            polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

          }
        }
      }
    }  // end of for ( var i=0; i < triangles.length -3; i += 3)

    const polyMaterial = new THREE.MeshBasicMaterial(
      {color: theColor,
       /*wireframe: true,   */
        vertexColors: THREE.FaceColors
      });

    const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
    scene.add(myPoly);  
  }

}

function randColorPolyLine (poly, index, array)
{
  var clr = getRandomColor();

  if ((polyCounter ==34) /*|| (polyCounter % 2 == 0) */ )
  {
    var points = [];
    var geoPoints =[];
    for (var i=0; i< poly.length; i++)
    {
      var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
      points.push(tempV.clone());

      var geoPoint = vector3toLonLat(tempV);
      geoPoints.push(geoPoint);
      //if( (i == 2 ) || (i== 10) || (i ==20) || (i==30 ) || (i== 60) || (i== 150) || (i== poly.length - 1))
      {
      // drawLabelAt(tempV, i.toString());
      }

    }



    //var hulls = d3.polygonHull(geoPoints);
   //var hulls = geoPoints;


   points.push(points[0]);
   geoPoints.push(vector3toLonLat(points[0].clone()));
   

   

  for (var i=0; i< points.length-1; i++)
  {
    var start = points[i];
    var end =  points[i+1 ];
    var ret = setArcGetGeoPoints(start, end, 6, clr);
    scene.add(ret[0]);
  }
  

  var ctr = findCenterPoint(points);
  drawLabelAt(ctr.normalize().multiplyScalar(sphereRadius), 'c' + polyCounter.toString());


  

  
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};

  
      
      geometry.computeFaceNormals();

      for ( var j = 0; j < geometry.faces.length; j ++ )
      {
        var normalGeo = vector3toLonLat (geometry.faces[j].normal);
        //var idx = geometry.faces[j].a;
       // var normalGeo = vector3toLonLat (geometry.vertices[idx]);
        if (d3.geoContains(geoPolyformat, normalGeo) )
       // if (d3.polygonContains(hulls, normalGeo) )
        {
          geometry.faces[ j ].color.setHex(  0xffff00 );
           //geometry.faces.splice(j, 1) ;
        }
    
      }
      //geometry.elementsNeedUpdate = true;///////////////
      geometry.colorsNeedUpdate = true;
      
      
      
  }
  polyCounter++;
  
  
}

// split along the +- 180 lontitude line
function splitPolygon (geoPts)
{
  var retPolys = []
  
}


function  PointInPoly(polyPoints, L)
{
  var x = L[0], y = L[1];

  var inside = false;

  var intersections = 0;

  var ss;

  for (var i = 0, j = polyPoints.length -1; i < polyPoints.length; j = i++)
   {

    var xi = polyPoints[i][0], yi = polyPoints[i][1]; var xj = polyPoints[j][0], yj = polyPoints[j][1];
    if (yj == yi && yj == y && x > Math.min(xj, xi) && x < Math.max(xj, xi)) 
    { // Check if point is on an horizontal polygon boundary
     return true;

    }

    if (y > Math.min(yj, yi) && y <= Math.max(yj, yi) && x <= Math.max(xj, xi) && yj != yi)
    {
      ss = (y - yj) * (xi - xj) / (yi - yj) + xj;
      if (ss == x) 
      { // Check if point is on the polygon boundary (other than horizontal)
        return true;
      }

      if (xj == xi || x <= ss) 
      {
        intersections++;
      } 
    }
  }

  // If the number of edges we passed through is odd, then it’s in the polygon.

  if (intersections % 2 != 0) 
  {
    return true;
  } 
  else
  {
    return false;
  }
}



function randColorPoly2 (poly, index, array)
{
   if (poly.length < 3)
   {
     return
   }

   var points = [];
   for (var i=0; i< poly.length; i++)
   {
    var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
    points.push(tempV);
   }
   var polyCenter = findCenterPoint(points);

   //if ((index > 10) && (index < 13))
   //{
     spot(polyCenter.normalize().multiplyScalar(sphereRadius), 'pink');
   
    //drawPolygon2(points, polyCenter, getRandomColor(), true);

    drawPolygon3(points, getRandomColor(), false);
  //}
}

function drawPolygon( abcde, theColor)
{
  //abcde are points (vertex) in vector3 format.
  // walk from a to b to c to d to e... and back to a. After every degree create an additional point (lat, lon).
  var geoJsonArray =[];
  var polyArray =[];

  var smoothness = 8;
  for (var i=0; i< abcde.length-1; i++)
  {
  var smoothness = 8;
  var arcAndGeoPoints = setArcGetGeoPoints(abcde[i], abcde[i+1], smoothness, theColor);
     // scene.add(arcAndGeoPoints[0]);
      polyArray = polyArray.concat(arcAndGeoPoints[1]);
  }
  var closing = setArcGetGeoPoints(abcde[abcde.length-1], abcde[0], smoothness, theColor);
 // scene.add(closing[0]);
  polyArray = polyArray.concat(closing[1]);
  geoJsonArray.push(polyArray);

  //draw a polygon with color
const polyMesh = new THREE.Mesh(
  //new THREE.ConicPolygonGeometry(polygonGeoJson, 0, sphereRadius, false, true, false ),
  new THREE.ConicPolygonBufferGeometry(geoJsonArray, 0, sphereRadius, false, true, false ),
 
  new THREE.MeshBasicMaterial({ color: theColor })
);
scene.add(polyMesh);
}

/***
 *  sides: THREE.Vector3 arrays of 3d point forming the outsides of the polygon.
 *  center: a THREE.Vector3 3d point inside the polygon, does not have to be exactly the center point.
 * sidesCounterClockWise: weather the side point array goes couterclockwise or not.
 */
function drawPolygon2 (sides, center, theColor, sidesCounterClockWise = true)
{
  /***
   * idea:  connect the central point to every out edge point, to form trianles, then sub divide each triangle to more smaller triangles to form a mesh.
   */

  const polyGeometry = new THREE.Geometry();
  polyGeometry.vertices.push(center.normalize().multiplyScalar(sphereRadius));
   var c = 0;

   if (false == sides[0].equals(sides[sides.length-1]))
   {
     sides.push(sides[0]);
   }

  for (var i=0; i < sides.length-1; i++)
  {
      var smooth = GetSmoothness(sides[i], sides[i+1]);
      var sectionPoints = getArcPoints(sides[i], sides[i+1], smooth);
      for (var j =0; j< smooth - 1; j++)
      {
         var cordSmooth =  GetSmoothness (center, sectionPoints[j]);
         var cordPointsA = getArcPoints(center, sectionPoints[j], cordSmooth);
         var cordPointsB = getArcPoints(center, sectionPoints[j+1], cordSmooth);
         for (var k =0; k < cordSmooth; k++)
         {
          polyGeometry.vertices.push(cordPointsA[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsB[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (true == sidesCounterClockWise)
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c-1, c));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -1, c- 2));
              polyGeometry.faces.push( new THREE.Face3 (c-2, c -1, c));
            }

          }
          else
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c, c-1));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -2, c));
              polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));
            }
          }

        }
      }
  }
 


  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      /* wireframe: true, */
      vertexColors: THREE.FaceColors
      
      
      
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);
}



function drawPolygon3(sides, theColor, sidesCounterClockWise = true)
{
  /***
   * idea:  connect the central point to every out edge point, to form trianles, then sub divide each triangle to more smaller triangles to form a mesh.
   */


  var geoPoints =[];
  for (var i=0; i< sides.length; i++)
  {
    
    
    var geoPoint = vector3toLonLat(sides[i].clone());
    geoPoints.push(geoPoint);
  }
  geoPoints.push(geoPoints[0]);

  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   
  var geoCenter = d3.geoCentroid(geoPolyformat);
  var center = lonLatToVector3(geoCenter[0], geoCenter[1]);



  const polyGeometry = new THREE.Geometry();
  polyGeometry.vertices.push(center.normalize().multiplyScalar(sphereRadius));
   var c = 0;

   if (false == sides[0].equals(sides[sides.length-1]))
   {
     sides.push(sides[0]);
   }

  for (var i=0; i < sides.length-1; i++)
  {
      var smooth = GetSmoothness(sides[i], sides[i+1]);
      var sectionPoints = getArcPoints(sides[i], sides[i+1], smooth);
      for (var j =0; j< smooth - 1; j++)
      {
         var cordSmooth =  GetSmoothness (center, sectionPoints[j]);
         var cordPointsA = getArcPoints(center, sectionPoints[j], cordSmooth);
         var cordPointsB = getArcPoints(center, sectionPoints[j+1], cordSmooth);
         for (var k =0; k < cordSmooth; k++)
         {
          polyGeometry.vertices.push(cordPointsA[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsB[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (true == sidesCounterClockWise)
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c-1, c));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -1, c- 2));
              polyGeometry.faces.push( new THREE.Face3 (c-2, c -1, c));
            }

          }
          else
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c, c-1));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -2, c));
              polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));
            }
          }

        }
      }
  }
 


  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      /* wireframe: true, */
      vertexColors: THREE.FaceColors
      
      
      
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  
  scene.add(myPoly);
  
  polyGeometry.computeFaceNormals();

  for ( var j = 0; j < polyGeometry.faces.length; j ++ )
  {
    var normalGeo = vector3toLonLat (polyGeometry.faces[j].normal);
    //var idx = geometry.faces[j].a;
    // var normalGeo = vector3toLonLat (geometry.vertices[idx]);
    if (false == d3.geoContains(geoPolyformat, normalGeo) )
    // if (d3.polygonContains(hulls, normalGeo) )
    {
      //polyGeometry.faces[ j ].color.setHex(  0xffffff );
        polyGeometry.faces.splice(j, 1) ;
    }

  }
  geometry.elementsNeedUpdate = true;///////////////
  polyGeometry.colorsNeedUpdate = true;
  

  
  }


////////////////
function vector3toLonLat( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [ lng*(180.0/Math.PI),lat*(180.0/Math.PI) ];

}

function vector3toLonLatRadians( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [ lng,lat ];

}


function vector3toLatLon( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [lat*(180.0/Math.PI), lng*(180.0/Math.PI) ];

}

/**
 * converts a XYZ vector3 to longitude latitude (Direct Polar)
 * @param lng longitude, in degree ( -180 to + 180)
 * @param lat latitude, in degree ( -90 to + 50)
 * @param vector3 optional output vector3
 * @returns a unit vector of the 3d position
 */
function lonLatToVector3( lng, lat, out )
{
    lng = lng*Math.PI/180;
    lat = lat*Math.PI/180;

    out = out || new THREE.Vector3();

    //flips the Y axis
    lat = Math.PI / 2 - lat;

    //distribute to sphere
    out.set(
                Math.sin( lat ) * Math.sin( lng ),
                Math.cos( lat ),
                Math.sin( lat ) * Math.cos( lng )
    );

    return out;

}

function getCrossLatFromLonLat (lon0, lat0, lon1, lat1, lont)
{
  if (Math.abs(lat1 - lat0) < 0.01)
  {
    return (lat1 + lat0)/2.0;
  }
 
  var est =  lat0 + (lat1 -lat0) *( lont  - lon0)/ ( lon1 -lon0);

  var v0 = lonLatToVector3(lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);
  v0.cross(v1);

  var l0 = lonLatToVector3(lont, lat0);
  var l1 = lonLatToVector3(lont, lat1);
  l0.cross(l1);

  var x1 = v0.clone().cross(l0);
  var x2 = l0.clone().cross(v0);

  var lonlat1 = vector3toLonLat(x1);
  var lonlat2 = vector3toLonLat(x2);
 
  if (Math.abs(lonlat1[1] - est) < Math.abs(lonlat2[1] -est) )
  {
    return lonlat1[1];
  }
  else
  return lonlat2[1];


}


function getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
{
  if (Math.abs(lat1 - lat0) < 0.01)
  {
    return (lat1 + lat0)/2.0;
  }

  
  //return getCrossLatFromLonLat(lon0, lat0, lon1, lat1, 180);

 var est =  lat0 + (lat1 -lat0) *( 180  - Math.abs(lon0) )/ ( 180  - Math.abs(lon0) + 180 - Math.abs(lon1));

 var v0 = lonLatToVector3(lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);
  v0.cross(v1);

  var l0 = lonLatToVector3(180, lat0);
  var l1 = lonLatToVector3(180, lat1);
  l0.cross(l1);

  var x1 = v0.clone().cross(l0);
  var x2 = l0.clone().cross(v0);

  var lonlat1 = vector3toLonLat(x1);
  var lonlat2 = vector3toLonLat(x2);
 
  if (Math.abs(lonlat1[1] - est) < Math.abs(lonlat2[1] -est) )
  {
    return lonlat1[1];
  }
  else
  return lonlat2[1];

  //https://gis.stackexchange.com/questions/18562/how-can-i-make-a-polyline-wrap-around-the-world
  // original post is in Cartesian coordinates
 
  //(x0, y0, z0) = (cos(lon0)*sin(lat0), sin(lon0)*sin(lat0), cos(lat0))
  
   var x0 = Math.cos(lon0*Math.PI/180)*Math.sin(lat0*Math.PI/180);
   var y0 = Math.sin(lon0*Math.PI/180) * Math.sin(lat0*Math.PI/180);
   var z0 = Math.cos(lat0*Math.PI/180);

   var x1 = Math.cos(lon1*Math.PI/180)*Math.sin(lat1*Math.PI/180);
   var y1 = Math.sin(lon1*Math.PI/180) * Math.sin(lat1*Math.PI/180);
   var z1 = Math.cos(lat1*Math.PI/180);

   var t = y1 / (y1 - y0);

   //(x, y, z) = (t * x0 + (1-t) * x1, 0, t * z0 + (1-t) * z1)
   var x = t * x0 + (1-t) * x1;
   var z =  t * z0 + (1-t) * z1;
   
   //lat2 = ATan(z/x).
   var lat2 = Math.atan(z/x)*180/Math.PI;
   return lat2;






  // based on   
  //https://gis.stackexchange.com/questions/18562/how-can-i-make-a-polyline-wrap-around-the-world
  // original post is in Cartesian coordinates, not Three.js's, so  bit conversion. 
  /**
    Cartesin:   z                             WebGL THREE.JS:           y
                |                                                       |
                |                                                       |
                --------y                                                --------- x
               /                                                       /
              /                                                       /
            x                                                        z

  var v0 = lonLatToVector3 (lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);

  var t = v1.z/(v1.x - v0.x);
  var z = t*v0.z + (1-t)*v1.z;
  var y = t*v0.y + (1-t)*v1.y

  var lat2 = Math.atan(y/z)*180/Math.PI;

  return lat2;
  */


}

function slicePoly (poly, wlont)
{
  var ret =[];
  var minMax = polyMinMaxLon (poly);
  if (minMax[1] - minMax[0] <=wlont)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    var polyArray = cutAlongLont (poly, minMax[0] + (minMax[1] - minMax[0])/2);
    for (var i=0; i < polyArray.length; i++)
    {
       var newPolyArray = slicePoly(polyArray[i], wlont);
       ret = ret.concat(newPolyArray);

    }
    return ret;
  }
}

function polyMinMaxLon (poly)
{
  var min = poly[0][0];
  var max = min;
  for (var i=1; i<poly.length; i++)
  {
    if (poly[i][0] < min)
    {
      min = poly[i][0];
    }
    if (poly[i][0] > max)
    {
      max = poly[i][0];
    }
  }

  return [min, max];
}

// the poly arrray in  geo point.
function cutAlong180 (poly)
{
  var ret = [];
  var crossIndice =[];   // contain [beforeIdx, afterIdx, crossLat]


  var counter =0;  // how many times crossed the line

  for (var i=0; i < poly.length-1; i++)
  {
    if (Math.abs(poly[i][0] - poly[i+1][0]) > 180)
    {
      counter++;
      var crossLat = getCross180LatFromLonLat(poly[i][0], poly[i][1], poly[i+1][0], poly[i+1][1]);
      var cross = [i, i+1, crossLat];
      if ((crossIndice.length == 0) || (crossLat <= crossIndice[crossIndice.length-1][2]) )
      {
        crossIndice.push(cross);
      }
      else
      {
        for (var j=0; j< crossIndice.length; j++)
        {
          if (crossLat > crossIndice[j][2])
          {
            crossIndice.splice(j, 0, cross);
            break; 
          }
        }
        
      }
    }
  }

  // check end point to start point
  var end = poly.length -1;
  if (Math.abs(poly[end][0] - poly[0][0]) > 180)
  {
    counter++;
    var crossLat2 = getCross180LatFromLonLat(poly[end][0], poly[End][1], poly[0][0], poly[0][1]);
    var cross2 = [end, 0, crossLat2];
    if ((crossIndice.length == 0) || (crossLat2 <= crossIndice[crossIndice.length-1][2]) )
    {
      crossIndice.push(cross2);
    }
    else
    {
      for (var j=0; j< crossIndice.length; j++)
      {
        if (crossLat2 > crossIndice[j][2])
        {
          crossIndice.splice(j, 0, cross2);
          break; 
        }
      }
      
    }
  }


  if (counter == 0)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    // split into two poly, and recursively keep spliting
    var rightPoly =[];  // negative lon
     var rstart = [-180, crossIndice[0][2]];
     rightPoly.push(rstart);

     // then copy from after index of top cross all the way to the before index of the 2nd cross
     if (crossIndice[1][0] >= crossIndice[0][1])
     {
       for (var k = crossIndice[0][1];k <= crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }
     else
     {
       // rounded back to o, 1, 2, ...
       for (var k = crossIndice[0][1]; k <= poly.length -1; k++)
       {
         rightPoly.push(poly[k]);
       }

       for (var k = 0; k < crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }

     var rend = [ -180, crossIndice[1][2] ];
     rightPoly.push (rend);


     var leftPoly = [];
     var lstart = [180, crossIndice[1][2]];
     leftPoly.push(lstart);

     // then copy from after index of 2nd top cross all the to the before index of the 1st top cross
     if (crossIndice[0][0] >= crossIndice[1][1])
     {
       for (var k = crossIndice[1][1]; k  <= crossIndice[0][0]; k++ )
       {
         leftPoly.push(poly[k]);
       }
     }
     else
     {
       for (var k= crossIndice[1][1]; k <= poly.length -1; k++)
       {
         leftPoly.push(poly[k]);

       }
       for (var k=0; k <= crossIndice[0][0]; k++)
       {
        leftPoly.push(poly[k]);
       }
     }

     var lend = [180, crossIndice[0][2]];
     leftPoly.push(lend);

     return cutAlong180(leftPoly).concat(cutAlong180(rightPoly));





  }



}

function crossedLont (leftLon, crossLon, rightLon)
{
   if ( ( ( leftLon < crossLon) && (rightLon > crossLon) ) ||   ((rightLon < crossLon) && (leftLon > crossLon)))
    {
      return true;
    }
    return false;

}

// cut along a latitude, the poly is not cross 180
function cutAlongLont (poly, lont)
{
  var ret = [];
  var crossIndice =[];   // contain [beforeIdx, afterIdx, crossLat]


  var counter =0;  // how many times crossed the line

  for (var i=0; i < poly.length-1; i++)
  {
    if ( crossedLont(poly[i][0], lont, poly[i+1][0]) )
    {
      counter++;
      var crossLat = getCrossLatFromLonLat(poly[i][0], poly[i][1], poly[i+1][0], poly[i+1][1], lont);
      var cross = [i, i+1, crossLat];
      if ((crossIndice.length == 0) || (crossLat <= crossIndice[crossIndice.length-1][2]) )
      {
        crossIndice.push(cross);
      }
      else
      {
        for (var j=0; j< crossIndice.length; j++)
        {
          if (crossLat > crossIndice[j][2])
          {
            crossIndice.splice(j, 0, cross);
            break; 
          }
        }
        
      }
    }
  }

  // check end point to start point
  var end = poly.length -1;
  if (crossedLont(poly[end][0], lont, poly[0][0]))
  {
    counter++;
    var crossLat2 = getCrossLatFromLonLat(poly[end][0], poly[End][1], poly[0][0], poly[0][1], lont);
    var cross2 = [end, 0, crossLat2];
    if ((crossIndice.length == 0) || (crossLat2 <= crossIndice[crossIndice.length-1][2]) )
    {
      crossIndice.push(cross2);
    }
    else
    {
      for (var j=0; j< crossIndice.length; j++)
      {
        if (crossLat2 > crossIndice[j][2])
        {
          crossIndice.splice(j, 0, cross2);
          break; 
        }
      }
      
    }
  }


  if (counter == 0)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    // split into two poly, and recursively keep spliting
    var rightPoly =[];  // 
     var rstart = [lont, crossIndice[0][2]];
     rightPoly.push(rstart);

     // then copy from after index of top cross all the way to the before index of the 2nd cross
     if (crossIndice[1][0] >= crossIndice[0][1])
     {
       for (var k = crossIndice[0][1];k <= crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }
     else
     {
       // rounded back to o, 1, 2, ...
       for (var k = crossIndice[0][1]; k <= poly.length -1; k++)
       {
         rightPoly.push(poly[k]);
       }

       for (var k = 0; k < crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }

     var rend = [ lont, crossIndice[1][2] ];
     rightPoly.push (rend);


     var leftPoly = [];
     var lstart = [lont, crossIndice[1][2]];
     leftPoly.push(lstart);

     // then copy from after index of 2nd top cross all the to the before index of the 1st top cross
     if (crossIndice[0][0] >= crossIndice[1][1])
     {
       for (var k = crossIndice[1][1]; k  <= crossIndice[0][0]; k++ )
       {
         leftPoly.push(poly[k]);
       }
     }
     else
     {
       for (var k= crossIndice[1][1]; k <= poly.length -1; k++)
       {
         leftPoly.push(poly[k]);

       }
       for (var k=0; k <= crossIndice[0][0]; k++)
       {
        leftPoly.push(poly[k]);
       }
     }

     var lend = [lont, crossIndice[0][2]];
     leftPoly.push(lend);

     return cutAlongLont(leftPoly, lont).concat(cutAlongLont(rightPoly, lont));





  }



}

/**
 * Find the bounding regtangle and uses the mid point of the rectangle in terms of lon. and lat.
 * 
 * @param polySides  Vecter3 array composing the sides of the polygon.
 */
function findCenterPoint (polySides)
{
  var minLat, maxLat, minLon, maxLon;

  var init = vector3toLonLat(polySides[0]);
  minLon = maxLon = init[0];
  minLat = maxLat = init[1];

  for (var i=1; i<polySides.length; i++)
  {
    var temp = vector3toLonLat(polySides[i]);
    var lon = temp[0];
    var lat = temp[1];
    if (lon < minLon)
    {
      minLon = lon;
    }
    if (lon > maxLon)
    {
      maxLon = lon;
    }
    if (lat < minLat)
    {
      minLat = lat;
    }
    if (lat > maxLat)
    {
      maxLat = lat;
    }
  }

  var midLat = (minLat + maxLat)/2.0;

  //we have to take care of +180 and -180 scenarios
  var midLon;
  // all positives or all negative
  if  (((minLon >=0) && (maxLon >=0)) || ((minLon <=0) && (maxLon <=0)))
  {
   midLon = (minLon + maxLon)/2.0;
  }
  else
  {
    // one positive and one negative, which mean minLon is negative.
    if (Math.abs(minLon) + Math.abs(maxLon) <= 180.0)
    {
      midLon = (minLon + maxLon)/2.0;
    }
    else
    {
      var reverseMid = ((180 - Math.abs(minLon) ) + (180 -Math.abs(maxLon)))/2;
      if (Math.abs(minLon) < Math.abs(maxLon))
      {
        midLon = minLon - reverseMid;
      }
      else
      {
        midLon = maxLon + reverseMid;
      }
    }
  }
  //return lonLatToVector3(midLon*Math.PI/180, midLat*Math.PI/180);
  return lonLatToVector3(midLon, midLat);
}


function getRandomColor() {
  var letters = '0123456789ABCDEF';
  var color = '#';
  for (var i = 0; i < 6; i++) {
  color += letters[Math.floor(Math.random() * 16)];
  }
  return color;
  }

function convertFlatCoordsToSphereCoords(x, y) {
  // Calculate the relative 3d coordinates using Mercator projection relative to the radius of the globe.
  // Convert latitude and longitude on the 90/180 degree axis.
  let latitude = ((x - globeWidth) / globeWidth) * -180
  let longitude = ((y - globeHeight) / globeHeight) * -90
  latitude = (latitude * Math.PI) / 180 //(latitude / 180) * Math.PI
  longitude = (longitude * Math.PI) / 180 //(longitude / 180) * Math.PI // Calculate the projected starting point
  const radius = Math.cos(longitude) * globeRadius
  const targetX = Math.cos(latitude) * radius
  const targetY = Math.sin(longitude) * globeRadius
  const targetZ = Math.sin(latitude) * radius

  
 

  return new THREE.Vector3(targetX, targetY, targetZ);
}

render();


function resizeRendererToDisplaySize(renderer) {
  const canvas = renderer.domElement;
  const width = canvas.clientWidth;
  const height = canvas.clientHeight;
  const needResize = canvas.width !== width || canvas.height !== height;
  if (needResize) {
    renderer.setSize(width, height, false);
  }
  return needResize;
}



function render() {

  if (resizeRendererToDisplaySize(renderer)) {
    const canvas = renderer.domElement;
    camera.aspect = canvas.clientWidth / canvas.clientHeight;
    camera.updateProjectionMatrix();
  }
  sphere.updateWorldMatrix(true, false);

  ///
  normalMatrix.getNormalMatrix(camera.matrixWorldInverse);
  camera.getWorldPosition(cameraPosition);
  labels.forEach((info, ndx) => {
    const {elem, meshPoint} = info;
    
    meshPoint.updateWorldMatrix(true, false);
    meshPoint.getWorldPosition(tempV);
    myV.copy(tempV);
    // 
    cameraToPoint.copy(myV);
    // get the normalized screen coordinate of that position
    // x and y will be in the -1 to +1 range with x = -1 being
    // on the left and y = -1 being on the bottom
    tempV.project(camera);

    //////////////////////////// make label invisible if on the other side of the sphere
    // Orient the position based on the camera's orientation.
    // Since the sphere is at the origin and the sphere is a unit sphere
    // this gives us a camera relative direction vector for the position.
    
    myV.applyMatrix3(normalMatrix);
    

    // compute the direction to this position from the camera
    
    cameraToPoint.applyMatrix4(camera.matrixWorldInverse).normalize();

    // get the dot product of camera relative direction to this position
    // on the globe with the direction from the camera to that point.
    // -1 = facing directly towards the camera
    // 0 = exactly on tangent of the sphere from the camera
    // > 0 = facing away
    const dot = myV.dot(cameraToPoint);

    // if the orientation is not facing us hide it.
    if (dot > settings.maxVisibleDot) {
      elem.style.display = 'none';
      
    }
    else {

       // restore the element to its default display style
       elem.style.display = '';
    ////////////////////////////////////////////////

    // convert the normalized position to CSS coordinates
    const x = (tempV.x *  .5 + .5) * canvas.clientWidth;
    const y = (tempV.y * -.5 + .5) * canvas.clientHeight;
    
   /* 
   const x = ((tempV.x *  .5 + .5) * canvas.clientWidth)%canvas.clientWidth;
   const y = ((tempV.y * -.5 + .5) * canvas.clientHeight)%canvas.clientHeight;
   */

    // move the elem to that position
    elem.style.transform = `translate(-50%, -50%) translate(${x}px,${y}px)`;
    }
  });
  ////



  requestAnimationFrame(render);
  renderer.render(scene, camera);
}
