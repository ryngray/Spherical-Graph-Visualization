
// Mason Yin's sphere test with three.js
let  polyCounter =0;




  
// input data: clusters, egdes, and labels.
// Later on in the real web site we will read them from json files generated by the web server.
// from the update baby test data:


const g_clusters = 
[[[0.814074989007684,-0.41801309909426776,-0.40317113147861305],[0.8435497006379156,-0.313959325406093,-0.4357217512865684],[0.898897910931586,-0.3076093063720734,-0.312024134252661],[0.9144557630303696,-0.27208731195777297,-0.2995649380887861],[0.9163189038132612,-0.26780829225140856,-0.29772199299992524],[0.918060135278493,-0.2638524031203405,-0.2958842634883722],[0.9270289470971593,-0.2423388208072283,-0.28616293815533533],[0.9268288614497615,-0.24085179867635784,-0.2880601892974835],[0.8982807420981861,-0.09407361393408917,-0.42923404284482397],[0.8936008917946267,-0.09310261423679651,-0.4391006142174278],[0.89114820678881,-0.09283196969162533,-0.4441138355650065],[0.875881776844736,-0.09254157835719726,-0.4735685475899628],[0.8720421218994137,-0.0929590002713373,-0.4805217600709897],[0.8661956969370033,-0.09333254758126447,-0.4909114483996175],[0.8652537912604096,-0.0933127076863415,-0.4925734618244583],[0.8504257061553536,-0.09235062598725888,-0.5179261339128677],[0.843523929626565,-0.09134313230115054,-0.5292672409367243],[0.7771956415497058,-0.07934396328874903,-0.624236710107452],[0.7459248923036775,-0.03147390520876106,-0.6652859898815374],[0.7632899262793283,0.010419003289288098,-0.6459720836158134],[0.7778709818559145,0.04480925211018086,-0.6268244303725262],[0.7829716679402496,0.05612447622749674,-0.619520306665611],[0.7999336156928749,0.0933545771396331,-0.5927825346715306],[0.8061072229100769,0.10861800582068139,-0.5817158017311734],[0.8102027573891925,0.12090178224716194,-0.5735453347107002],[0.8180033631132807,0.15098241652864203,-0.5550448701091958],[0.8279038229531653,0.2109191979670176,-0.5197002519419094],[0.8320064215115252,0.23574954867914694,-0.5021827006789111],[0.834000950499812,0.24686270425584475,-0.4934584276440128],[0.8347484330701287,0.24969793319013076,-0.49076062968370027],[0.8396370226970273,0.26679043024546734,-0.4731094339007734],[0.8433797032745056,0.2792497384044671,-0.45905365667386167],[0.8506856143962531,0.2661716074982436,-0.4533063652995294],[0.9096149977607206,0.22233565243922765,-0.3509521527262475],[0.9068658249698203,0.24800568935564746,-0.34071623611010604],[0.9141078576891284,0.21416280413972938,-0.34429800730471877],[0.9155644402990891,0.21115286783533316,-0.3422809110434441],[0.9170981519187013,0.21248825719536568,-0.3373124965093628],[0.9176513511650565,0.21246597369396053,-0.33581871259240975],[0.9219432734551649,0.20927539377026574,-0.3259208647709983],[0.9223996989272193,0.20867258793804,-0.3250146865331108],[0.923614090337143,0.20452308968134425,-0.3242025877717335],[0.923614090337143,0.20452308968134425,-0.3242025877717335],[0.9223996989272193,0.20867258793804,-0.3250146865331108],[0.9219432734551649,0.20927539377026574,-0.3259208647709983],[0.9176513511650565,0.21246597369396053,-0.33581871259240975],[0.9170981519187013,0.21248825719536568,-0.3373124965093628],[0.9155644402990891,0.21115286783533316,-0.3422809110434441],[0.9141078576891284,0.21416280413972938,-0.34429800730471877],[0.9068658249698203,0.24800568935564746,-0.34071623611010604],[0.9096149977607206,0.22233565243922765,-0.3509521527262475],[0.8506856143962531,0.2661716074982436,-0.4533063652995294],[0.8633061940592374,0.2418827838390266,-0.4429391991924368],[0.8716250835451154,0.22737409600191902,-0.4342473191653357],[0.8750417926215639,0.22160682420286765,-0.4303397223500976],[0.8799340031493161,0.2116405585039482,-0.4253521177774437],[0.8818808630728656,0.20786621485547102,-0.423175826421497],[0.8874007246846939,0.198388134671682,-0.41612750672188287],[0.8897778931201576,0.19389656462797766,-0.4131578670921347],[0.893487636942075,0.18616861397474704,-0.40868213785580165],[0.9158666133599042,0.1309849073866335,-0.379514559100932],[0.9220514371118687,0.11586492073573881,-0.3693189237811121],[0.9223584442637638,0.11515895484099505,-0.3687727151176714],[0.9250374814015782,0.10781301320504814,-0.3642554216286604],[0.9263131758362353,0.10451733878966005,-0.36196688545295863],[0.9313925653269709,0.09291469623463561,-0.35195844708895635],[0.9318706696951874,0.09156175827980477,-0.3510462923640609],[0.9348129332248604,0.08412376220752717,-0.34503329188294896],[0.942810911062189,0.061530266748994276,-0.3275997745052383],[0.9465451687927523,0.06499895107103788,-0.3159547116198222],[0.9560548985036675,0.07316373289611852,-0.2839121329493467],[0.9633610345774855,0.08100534762288913,-0.25568271493061845],[0.9650113051619751,0.08363045104456009,-0.2485138397909962],[0.9708406296499704,0.09461326979191811,-0.22026529685842647],[0.9768809152023619,0.11056087414588668,-0.18297532790377344],[0.9738315066221469,0.14656439289528653,-0.17369823097911918],[0.9729807244044852,0.15440294311570732,-0.17166316172822557],[0.9688765189462863,0.18945588717050504,-0.159325948454617],[0.9542174046723078,0.2768385154849803,-0.11326774017573454],[0.9588523153640839,0.28384269016913066,-0.005963602810924998],[0.9583760466077806,0.28536431492296577,0.009086311517198107],[0.9588308165277121,0.2835968340944459,0.01470717404563156],[0.9599499283519853,0.2785603111566767,0.030004801371012958],[0.9174192281017177,0.39028629933634756,0.0775794074454515],[0.8979544488792476,0.4306017241242805,0.09088433814009843],[0.8965563774247265,0.4327937712261026,0.09421365976831257],[0.8962015986190968,0.43322474614057915,0.09559819017118533],[0.8954298290136853,0.43479730914727105,0.0956907585444628],[0.8930018221866379,0.4393927343633038,0.097374383490134],[0.8921505744459962,0.440864717080586,0.09851727639928926],[0.8904789413551517,0.4434132174039371,0.10213703360925079],[0.8902916349099752,0.4431244228554525,0.10498357337386549],[0.8904039688205208,0.44241538375063977,0.10700187161652527],[0.8904039688205208,0.44241538375063977,0.10700187161652527],[0.8902916349099752,0.4431244228554525,0.10498357337386549],[0.8904789413551517,0.4434132174039371,0.10213703360925079],[0.8921505744459962,0.440864717080586,0.09851727639928926],[0.8930018221866379,0.4393927343633038,0.097374383490134],[0.8954298290136853,0.43479730914727105,0.0956907585444628],[0.8962015986190968,0.43322474614057915,0.09559819017118533],[0.8965563774247265,0.4327937712261026,0.09421365976831257],[0.8979544488792476,0.4306017241242805,0.09088433814009843],[0.9174192281017177,0.39028629933634756,0.0775794074454515],[0.9599499283519853,0.2785603111566767,0.030004801371012958],[0.9600186255658004,0.278231477060582,0.030846130056108402],[0.9616713865865032,0.26605191980361403,0.06636655927199943],[0.9107381950378691,0.4002696842045457,0.10168638063161498],[0.8986102910606621,0.425323692185837,0.10770005415634411],[0.8984865587294162,0.42554851291414675,0.10784417897656606],[0.8978633644212612,0.42689975273647035,0.1076939178583171],[0.8977121473461699,0.42713830322744195,0.10800819609229033],[0.8937663811636971,0.4339786285936695,0.11333228059783661],[0.8933571704800868,0.43474609583765844,0.11361689181511204],[0.8919683552449539,0.4375379137615384,0.11381136701934581],[0.8914854273342776,0.4380305990804257,0.11568460191340846],[0.8914078620970098,0.43802974132143885,0.11628400195001723],[0.8914078620970098,0.43802974132143885,0.11628400195001723],[0.8914854273342776,0.4380305990804257,0.11568460191340846],[0.8919683552449539,0.4375379137615384,0.11381136701934581],[0.8933571704800868,0.43474609583765844,0.11361689181511204],[0.8937663811636971,0.4339786285936695,0.11333228059783661],[0.8977121473461699,0.42713830322744195,0.10800819609229033],[0.8978633644212612,0.42689975273647035,0.1076939178583171],[0.8984865587294162,0.42554851291414675,0.10784417897656606],[0.8986102910606621,0.425323692185837,0.10770005415634411],[0.9107381950378691,0.4002696842045457,0.10168638063161498],[0.9616713865865032,0.26605191980361403,0.06636655927199943],[0.9621221732064533,0.25318384782166514,0.10108839214621683],[0.9482896992184203,0.2862419312373788,0.13715758512650214],[0.9464339213652133,0.2902067379470277,0.14157288490177228],[0.9392133351928448,0.3052658902394253,0.15713385138875766],[0.9109599922189136,0.35573121444559574,0.20882335991353695],[0.9009659766954243,0.37027553047112516,0.22617767434383723],[0.892084869714367,0.38153809543692474,0.2421017698346403],[0.8898769900186904,0.3841525041394059,0.24606055392666945],[0.8457236651775716,0.42528286776375324,0.3223134569720178],[0.8370966239977317,0.43184643983095317,0.33582420177368305],[0.8231405421418863,0.4416644953948028,0.3568923106344771],[0.8215608525810535,0.44095720206825206,0.36137862616711486],[0.8162701927524244,0.43883570216307427,0.37566767086210845],[0.8025146176659935,0.43373635530396704,0.4096865417853451],[0.8755519785277626,0.2825309073586872,0.39189924634170625],[0.8816019648612066,0.2645173786563026,0.39090731886427793],[0.8832808671859138,0.25930298646377614,0.390610894464385],[0.8925992156995544,0.22936685018255779,0.3881462200896365],[0.8975921225547059,0.20986671461199322,0.38766524686345827],[0.8996735103473944,0.20012485339673336,0.38799177546970354],[0.9069847890853436,0.15359996854347335,0.39215512495855354],[0.9341532094054793,0.1488262216134928,0.32435865506826606],[0.9367655166182786,0.1483520575524432,0.3169574638572919],[0.9469384522445614,0.11450502282921594,0.300326767717357],[0.9469485325953242,0.11447101944810745,0.3003079458190766],[0.9510815293097762,0.10099545996248341,0.2919654802759116],[0.9567195179610353,0.08162006361084455,0.2793312176763745],[0.9585522461946084,0.07549076889119273,0.2747339351581589],[0.9600271391011547,0.06945699068462118,0.2711523900582267],[0.9606818175087017,0.06605378560601244,0.2696800751173372],[0.9613079619203331,0.061734595191722745,0.26846944352214397],[0.9616301643601771,0.05849825216183709,0.26803988786490135],[0.9617964650046026,0.0555877166264393,0.26806261519448954],[0.9620401556399837,0.05373728923502136,0.26756502514691216],[0.962065864511083,0.05345424819943296,0.26752928006477356],[0.962299631502107,0.04867303290790975,0.2676011118782108],[0.9627691329391945,0.042828544102944656,0.26691068256915806],[0.9628091780560758,0.04247516116140838,0.26682268894398065],[0.9647843098565824,0.03194581035566459,0.261095194623107],[0.9666894866821469,0.02267573134524453,0.254945577616411],[0.9686797739264897,0.01030855952189397,0.24809923253873323],[0.9694427287587113,0.004450599354061046,0.24527736916041296],[0.9717148687797228,-0.019529970603813757,0.23534823993525092],[0.9727974442163353,-0.056788783946900574,0.22458888339363198],[0.9547533497135419,-0.09995701569794731,0.28009754769282014],[0.9542461684569762,-0.10093601833067445,0.2814714376073177],[0.9511868814507383,-0.10709450218019209,0.2894378761648104],[0.9464050652240548,-0.10377222948520519,0.3058574453988696],[0.9455556294612669,-0.10329061326943569,0.3086350608802105],[0.9450015364246127,-0.10292515816444227,0.3104488814151956],[0.9534451616650347,0.023763237070829845,0.30062872827035597],[0.9525771821473535,0.032546431809643304,0.30255155234879894],[0.9525771821473535,0.032546431809643304,0.30255155234879894],[0.9534451616650347,0.023763237070829845,0.30062872827035597],[0.9450015364246127,-0.10292515816444227,0.3104488814151956],[0.9423206085570872,-0.1014501287189919,0.3189666786225496],[0.9386322194223972,-0.09933012224654539,0.33030755891543145],[0.9119375606010828,-0.0831721644934756,0.40181124501240234],[0.8898814421223121,-0.03504975220151293,0.4548434168336689],[0.8785388471057154,-0.014850632662747684,0.4774399991995607],[0.8562157194802209,0.0199020931687758,0.5162349740210064],[0.6992079539005119,0.0181438415281623,0.7146880705712532],[0.6352347728148501,0.09490232546950889,0.7664661323420269],[0.617801813772291,0.1095790582029995,0.7786612542710797],[0.4292939364381655,0.18640794554866993,0.8837187301250035],[0.40776816470651017,0.2563420265525985,0.876364016419428],[0.3951543388067546,0.26762236332979306,0.8787669310846722],[0.35810432158077943,0.2932505773562321,0.8864340887767157],[0.25875833164529877,0.32466891974720496,0.9097440400213263],[0.2362834606733566,0.3536356180837111,0.9050480516717186],[0.2046833125988946,0.5405327793771829,0.8160447634549963],[0.19146059647115946,0.566362800714942,0.8016083943954396],[0.2822870554184191,0.6408791620860871,0.7138542694045006],[0.2842848399812087,0.6438346072087654,0.7103936432128269],[0.28579195793517964,0.6431790309030349,0.7103827777939224],[0.2859090554298979,0.6428255516795897,0.7106555580103591],[0.2859090554298979,0.6428255516795897,0.7106555580103591],[0.28579195793517964,0.6431790309030349,0.7103827777939224],[0.2842848399812087,0.6438346072087654,0.7103936432128269],[0.2822870554184191,0.6408791620860871,0.7138542694045006],[0.19146059647115946,0.566362800714942,0.8016083943954396],[0.19055948908543197,0.5679200625351669,0.8007208525382309],[0.03108286879015073,0.7098936487799448,0.7036226706763156],[0.05330190495889883,0.7273012850972915,0.6842453855332756],[0.26797033628155786,0.6550796650808284,0.7064435796797496],[0.26797033628155786,0.6550796650808284,0.7064435796797496],[0.05330190495889883,0.7273012850972915,0.6842453855332756],[0.07762999580757168,0.7438121935701436,0.663865200509326],[0.09005156847425833,0.7514209934305521,0.6536491456792155],[0.10910313740073867,0.7619795057478751,0.638344529411461],[0.12765716226400087,0.7710553538543004,0.6238407570969713],[0.3184395026507102,0.6893663115014619,0.650669172251489],[0.32511193510209563,0.6839688825325079,0.6530610977400224],[0.3756133902005188,0.7088748792598366,0.5970016638640341],[0.3805744017710385,0.709744547755486,0.5928117759019104],[0.3805744017710385,0.709744547755486,0.5928117759019104],[0.3756133902005188,0.7088748792598366,0.5970016638640341],[0.32511193510209563,0.6839688825325079,0.6530610977400224],[0.3184395026507102,0.6893663115014619,0.650669172251489],[0.12765716226400087,0.7710553538543004,0.6238407570969713],[0.18505617863876683,0.8228409886730848,0.5372959315936772],[0.37225409021052325,0.7181861976195727,0.5879077120350401],[0.33710039393548863,0.7000480300316221,0.629520515994025],[0.3749794952731928,0.7172946358034399,0.5872638108825303],[0.3766119887800706,0.7167865190262858,0.5868394124880334],[0.3768102245070391,0.7163819003231355,0.5872061201966206],[0.3768102245070391,0.7163819003231355,0.5872061201966206],[0.3766119887800706,0.7167865190262858,0.5868394124880334],[0.37724055139143287,0.7176895158492741,0.5853300993678033],[0.3775312075617277,0.7178603787670902,0.5849330422478743],[0.3793605162857559,0.7182136921626825,0.5833135443939669],[0.38098289521413764,0.7181086698344256,0.5823847283908511],[0.3816219991339315,0.7177252493168055,0.5824389378039135],[0.38236405095513887,0.7171014894166721,0.5827205045419],[0.38236405095513887,0.7171014894166721,0.5827205045419],[0.3816219991339315,0.7177252493168055,0.5824389378039135],[0.38098289521413764,0.7181086698344256,0.5823847283908511],[0.3793605162857559,0.7182136921626825,0.5833135443939669],[0.3775312075617277,0.7178603787670902,0.5849330422478743],[0.37724055139143287,0.7176895158492741,0.5853300993678033],[0.3766119887800706,0.7167865190262858,0.5868394124880334],[0.3749794952731928,0.7172946358034399,0.5872638108825303],[0.33710039393548863,0.7000480300316221,0.629520515994025],[0.37225409021052325,0.7181861976195727,0.5879077120350401],[0.18505617863876683,0.8228409886730848,0.5372959315936772],[0.1905527672027026,0.8268141322111974,0.5292145441002519],[0.2042722317263311,0.8362998357712867,0.5087980346212659],[0.205863365012077,0.8373832323172703,0.5063690326034809],[0.23486847123596474,0.8551162047365265,0.4621829482102079],[0.23622645654645802,0.8558315421947752,0.46016239808573806],[0.4718857216474515,0.7949900429901147,0.3812016490675762],[0.4766706691553649,0.7912046766272387,0.38311908442436454],[0.49440332047612545,0.7886801935572518,0.36544344157841624],[0.6728006808619331,0.7128816111471105,0.19783592272390574],[0.6885119038406995,0.7018111678583604,0.18279070802133204],[0.6930322037833979,0.6986388373706179,0.177792405452421],[0.7050914493998365,0.6896608649717726,0.1649664793514865],[0.70517641567687,0.6895947411363388,0.16487970090410842],[0.7289353537533375,0.638740775451177,0.24629955709364554],[0.7277476890265482,0.6388347197808747,0.24954659268162727],[0.7170336926206089,0.6565889907332484,0.23399483091459192],[0.7259797947390907,0.638658649058331,0.2550852163759702],[0.7238320212073294,0.6404000657544489,0.2568169792996757],[0.720339628749561,0.6425206164885753,0.2613007398383821],[0.7203697051508335,0.6420850403092109,0.2622866540867459],[0.7214993893208735,0.6389151307833532,0.2668821591371317],[0.7229057067586612,0.6363322296531239,0.26923713087247986],[0.7234325911752074,0.6355452117324466,0.2696804959011404],[0.7233521159949212,0.6351821093971928,0.27074970764047496],[0.7230793788833143,0.635055091320588,0.27177424973959535],[0.7228996807591834,0.6350967799595466,0.27215460981450623],[0.7216253775430339,0.6344266733701878,0.27705524828508643],[0.7307211615208818,0.4567899597711276,0.5073357042017298],[0.6761762158810198,0.46092617195788776,0.5747458473804505],[0.656229293793363,0.4607695569617562,0.5975403997594899],[0.8397014548246845,0.24061099367199557,0.4868344857233137],[0.8440269789078688,0.23416454160175174,0.48247842058697044],[0.8424184286275753,0.2315916523036424,0.48651464283402174],[0.8429557517319753,0.22879023982730406,0.4869092592893927],[0.8430043430863068,0.22864751703090344,0.4868921754282227],[0.8430043430863068,0.22864751703090344,0.4868921754282227],[0.8429557517319753,0.22879023982730406,0.4869092592893927],[0.8424184286275753,0.2315916523036424,0.48651464283402174],[0.8440269789078688,0.23416454160175174,0.48247842058697044],[0.8397014548246845,0.24061099367199557,0.4868344857233137],[0.656229293793363,0.4607695569617562,0.5975403997594899],[0.6761762158810198,0.46092617195788776,0.5747458473804505],[0.8281215548750962,0.2746682067896684,0.4886430870586437],[0.8418789739233566,0.2455778589689024,0.4805531276040205],[0.8452835602118146,0.23455480827676004,0.48008306026133846],[0.845285810643384,0.23431510652903928,0.4801961361540116],[0.8462709735108369,0.23296710659855216,0.4791156088420823],[0.8470470708392418,0.23143403058386153,0.47848672841612744],[0.8477521576117582,0.22935785801911726,0.4782376524589958],[0.8481852201421731,0.22714863777039593,0.4785241150573571],[0.8484460451461401,0.22685798472428662,0.47819950150821916],[0.8489174437004637,0.22655033760235202,0.47750823900047046],[0.8490552032572021,0.2265313937049902,0.477272238337771],[0.8490552032572021,0.2265313937049902,0.477272238337771],[0.8489174437004637,0.22655033760235202,0.47750823900047046],[0.8484460451461401,0.22685798472428662,0.47819950150821916],[0.8481852201421731,0.22714863777039593,0.4785241150573571],[0.8477521576117582,0.22935785801911726,0.4782376524589958],[0.8470470708392418,0.23143403058386153,0.47848672841612744],[0.8462709735108369,0.23296710659855216,0.4791156088420823],[0.845285810643384,0.23431510652903928,0.4801961361540116],[0.8452835602118146,0.23455480827676004,0.48008306026133846],[0.8418789739233566,0.2455778589689024,0.4805531276040205],[0.8452251399886037,0.23974447790767683,0.4776160048030434],[0.8452251399886037,0.23974447790767683,0.4776160048030434],[0.8418789739233566,0.2455778589689024,0.4805531276040205],[0.8281215548750962,0.2746682067896684,0.4886430870586437],[0.6761762158810198,0.46092617195788776,0.5747458473804505],[0.7307211615208818,0.4567899597711276,0.5073357042017298],[0.7216253775430339,0.6344266733701878,0.27705524828508643],[0.7228996807591834,0.6350967799595466,0.27215460981450623],[0.7230793788833143,0.635055091320588,0.27177424973959535],[0.7233521159949212,0.6351821093971928,0.27074970764047496],[0.7234325911752074,0.6355452117324466,0.2696804959011404],[0.7229057067586612,0.6363322296531239,0.26923713087247986],[0.7214993893208735,0.6389151307833532,0.2668821591371317],[0.7203697051508335,0.6420850403092109,0.2622866540867459],[0.720339628749561,0.6425206164885753,0.2613007398383821],[0.7238320212073294,0.6404000657544489,0.2568169792996757],[0.7259797947390907,0.638658649058331,0.2550852163759702],[0.727514801354137,0.6371780713301456,0.2544136773576579],[0.7278525842446545,0.6367485665913399,0.2545228448533688],[0.7284601794094382,0.6358426361283883,0.25504883668833145],[0.7294443339875546,0.6340250665436662,0.256755094609148],[0.7294443339875546,0.6340250665436662,0.256755094609148],[0.7284601794094382,0.6358426361283883,0.25504883668833145],[0.7278525842446545,0.6367485665913399,0.2545228448533688],[0.727514801354137,0.6371780713301456,0.2544136773576579],[0.7259797947390907,0.638658649058331,0.2550852163759702],[0.7170336926206089,0.6565889907332484,0.23399483091459192],[0.7277476890265482,0.6388347197808747,0.24954659268162727],[0.7289353537533375,0.638740775451177,0.24629955709364554],[0.70517641567687,0.6895947411363388,0.16487970090410842],[0.7053058262084575,0.689495232645917,0.16474227045587955],[0.7088150801829785,0.686739161394575,0.1611536729717127],[0.7105030530301671,0.6853811466530862,0.15949324577333135],[0.7187952974403427,0.6784094228622661,0.15196702059768233],[0.7801956600457157,0.6175086669756149,0.09988882948472828],[0.7737935477613324,0.6301417919302569,0.06453578469233587],[0.7680367447000344,0.6391190083498121,0.04057649512374562],[0.7644013874502276,0.6441320103729186,0.02800842867976801],[0.7548486979109617,0.655898887203437,0.0003050039651987251],[0.8380849269645749,0.5408342703246404,-0.07149788274625325],[0.8409833657140691,0.5365837960504412,-0.0694608408265773],[0.8436115471429694,0.53242392535936,-0.06960115826605436],[0.844477030420541,0.5311021156615681,-0.06920323570405491],[0.8450274375939948,0.5307028142935558,-0.06544579905713609],[0.8457087486785679,0.5298953082495519,-0.06314803800311765],[0.8490477392867398,0.5252975949383342,-0.056394797313921614],[0.8515505866269192,0.5211615418825071,-0.05702846375274219],[0.8529136108799423,0.518798487583746,-0.05819365649756062],[0.8529136108799423,0.518798487583746,-0.05819365649756062],[0.8515505866269192,0.5211615418825071,-0.05702846375274219],[0.8490477392867398,0.5252975949383342,-0.056394797313921614],[0.8457087486785679,0.5298953082495519,-0.06314803800311765],[0.8450274375939948,0.5307028142935558,-0.06544579905713609],[0.844477030420541,0.5311021156615681,-0.06920323570405491],[0.8436115471429694,0.53242392535936,-0.06960115826605436],[0.8409833657140691,0.5365837960504412,-0.0694608408265773],[0.8380849269645749,0.5408342703246404,-0.07149788274625325],[0.7548486979109617,0.655898887203437,0.0003050039651987251],[0.7456115799025435,0.6659865651664953,-0.02291870268943236],[0.7371144213011603,0.6743275857657709,-0.04409803833689848],[0.7343973001973783,0.6768181359264605,-0.05077220050217796],[0.7281352734592595,0.682186765211105,-0.0666351327395557],[0.722817827019199,0.6863518053362642,-0.08034667544394171],[0.7486902182658712,0.6476615025294336,-0.14141264163545864],[0.759577916906429,0.6286415567032927,-0.16688673204826987],[0.7596367577054992,0.6285388260596604,-0.16700580971397638],[0.7701212749952547,0.6100428391490849,-0.18644290333130703],[0.7755232713264059,0.6001159074930522,-0.19602181818608935],[0.7793405655756654,0.5926164716597244,-0.20355343368703271],[0.7872570310574827,0.5752440380056996,-0.22208256075040028],[0.8217858933069527,0.47075274633103864,-0.32102927807830633],[0.855578034426098,0.4835715643485268,-0.18478303266559218],[0.8633713659916785,0.4875981263372522,-0.12976113277119747],[0.8638743277416489,0.48920910562403325,-0.11998165211167838],[0.8639340707188518,0.4919495181524145,-0.10771997512421366],[0.8639340707188518,0.4919495181524145,-0.10771997512421366],[0.8638743277416489,0.48920910562403325,-0.11998165211167838],[0.8788988850111038,0.47053514238396676,-0.0783162161237296],[0.8807481749262474,0.4668097173213544,-0.0798206751314574],[0.8830392533804099,0.4624009140852337,-0.08016901921882653],[0.8832045861670176,0.4621312360551749,-0.07990231308080825],[0.8854452147776529,0.4587701242329306,-0.07427479208087695],[0.8867734586644814,0.4571175971136949,-0.06838373649659081],[0.8868752428168369,0.45707110013810853,-0.06736700302904906],[0.8868752428168369,0.45707110013810853,-0.06736700302904906],[0.8867734586644814,0.4571175971136949,-0.06838373649659081],[0.8854452147776529,0.4587701242329306,-0.07427479208087695],[0.8832045861670176,0.4621312360551749,-0.07990231308080825],[0.8830392533804099,0.4624009140852337,-0.08016901921882653],[0.8807481749262474,0.4668097173213544,-0.0798206751314574],[0.8788988850111038,0.47053514238396676,-0.0783162161237296],[0.8638743277416489,0.48920910562403325,-0.11998165211167838],[0.8633713659916785,0.4875981263372522,-0.12976113277119747],[0.855578034426098,0.4835715643485268,-0.18478303266559218],[0.8217858933069527,0.47075274633103864,-0.32102927807830633],[0.8218392339902726,0.47042128705954916,-0.3213784158208501],[0.8043853750927039,0.46696888244135437,-0.36729311342365595],[0.7874963101656511,0.4777233081137752,-0.3893969727159107],[0.7618071810738932,0.45156322390097564,-0.464478711766649],[0.7580532078105137,0.4475563855218262,-0.4743928919227488],[0.7458556942997613,0.4337010008594449,-0.5055716814994061],[0.7444285764207151,0.43223823973336,-0.5089166913360517],[0.7274714507972283,0.40808787493074933,-0.5515882292158536],[0.7220707993962525,0.39978610389582636,-0.5646103362417769],[0.7209549239321897,0.39857015809125285,-0.5668913711964968],[0.7192014850175501,0.3968687213471241,-0.570302062038048],[0.6458552829177334,0.34220455570923053,-0.6824712415765978],[0.6305304052605023,0.3281657254355958,-0.703376616537226],[0.7279538468624137,0.28799682278915045,-0.6222065789603709],[0.7231355447361776,0.3666599189421207,-0.5853507391132854],[0.734704680621,0.27910084282748265,-0.6183136354687507],[0.738309779399066,0.27382677701078,-0.6163745337338259],[0.7375839487446053,0.26971747237801724,-0.6190495970827613],[0.7376985954925831,0.26619549184497343,-0.6204359292704469],[0.740357572100191,0.2541139297692437,-0.622331725152384],[0.7416314781450789,0.25086299739747037,-0.6221338338019419],[0.7424346517055712,0.2502854150869241,-0.6214080776282146],[0.7508611104996157,0.24712603123116925,-0.612483728295875],[0.7520155578096285,0.24715653410081415,-0.6110533924818244],[0.757275156006739,0.25000559645541215,-0.6033502629782661],[0.757275156006739,0.25000559645541215,-0.6033502629782661],[0.7520155578096285,0.24715653410081415,-0.6110533924818244],[0.7508611104996157,0.24712603123116925,-0.612483728295875],[0.7424346517055712,0.2502854150869241,-0.6214080776282146],[0.7416314781450789,0.25086299739747037,-0.6221338338019419],[0.740357572100191,0.2541139297692437,-0.622331725152384],[0.7376985954925831,0.26619549184497343,-0.6204359292704469],[0.7375839487446053,0.26971747237801724,-0.6190495970827613],[0.738309779399066,0.27382677701078,-0.6163745337338259],[0.734704680621,0.27910084282748265,-0.6183136354687507],[0.7231355447361776,0.3666599189421207,-0.5853507391132854],[0.7279538468624137,0.28799682278915045,-0.6222065789603709],[0.6305304052605023,0.3281657254355958,-0.703376616537226],[0.6287210553822683,0.3266653814182644,-0.7056908410216663],[0.6198249919871296,0.31785500682216533,-0.7174853127041947],[0.6171023800519778,0.3149468180953604,-0.7211055084422754],[0.6083652957050346,0.3041107249745613,-0.7330813965291799],[0.6093826507506597,0.29132799842396484,-0.7374149322453308],[0.6098296995179089,0.2758866695187556,-0.7429631775315289],[0.6096276015428276,0.2712220615448161,-0.7448441318615053],[0.6231106987439489,0.231883948395844,-0.7469691369709872],[0.6407962394498422,0.1723877292414101,-0.7481060421584167],[0.6581732389314665,0.11780237559486878,-0.743593025692595],[0.7099946642101777,-0.01875716090666957,-0.7039572044576279],[0.6549547092476697,-0.05263952807493415,-0.7538324806734906],[0.6083274351594015,-0.07609239276249256,-0.790030176256618],[0.5310879481393549,-0.1044592067866929,-0.8408530581847371],[0.49220721357049185,-0.11925975655797014,-0.8622697776072789],[0.4581413305633115,-0.1336912510110833,-0.8787679845287777],[0.2759735512894916,-0.2237641690576707,-0.9347556876717021],[0.2790672803932799,-0.2994456978094414,-0.9123890217869323],[0.2793660316851694,-0.30558244536664403,-0.9102603964933457],[0.2795049072707094,-0.3459457326288504,-0.8956553784171009],[0.27789011986083995,-0.39558336887288453,-0.8753804199060586],[0.27726709399227667,-0.40494143402902566,-0.8712895004506793],[0.276915060221683,-0.41859890833006974,-0.8649236980030641],[0.27605900718761595,-0.6200405287122578,-0.7343985071504514],[0.29308231224438575,-0.6582413466394244,-0.6934126389270691],[0.31856548698198833,-0.7071780265868319,-0.6312014489976102],[0.3408237135871601,-0.7465764062491831,-0.5713692902919376],[0.47541227020546145,-0.716458251807764,-0.5105592490148935],[0.4777386499698348,-0.7158103125567278,-0.5092949820707442],[0.5871986192886121,-0.3411895283062713,-0.7340214487872216],[0.5674114658628518,-0.3409503946041848,-0.74953122471757],[0.5987117754034434,-0.3258386555237282,-0.7316921350949086],[0.5980598653074019,-0.3230797702572477,-0.7334465621700169],[0.5980733778843701,-0.31429662327010677,-0.7372420682971016],[0.5994304519468385,-0.30825566680171396,-0.7386890937081986],[0.6020254482394685,-0.30245172831799866,-0.7389778830990293],[0.6000955765456992,-0.2999119451786436,-0.7415781308462698],[0.6000955765456992,-0.2999119451786436,-0.7415781308462698],[0.6020254482394685,-0.30245172831799866,-0.7389778830990293],[0.6054920580032959,-0.3002898761242119,-0.7370246657963618],[0.6160396293840742,-0.2970613575693772,-0.7295544701167771],[0.6218561157117336,-0.29961034859441904,-0.7235527695801086],[0.6239290471382305,-0.3072376451508213,-0.7185524153041014],[0.6239179106736389,-0.3093592902187992,-0.7176512177206711],[0.6239179106736389,-0.3093592902187992,-0.7176512177206711],[0.6239290471382305,-0.3072376451508213,-0.7185524153041014],[0.6218561157117336,-0.29961034859441904,-0.7235527695801086],[0.6160396293840742,-0.2970613575693772,-0.7295544701167771],[0.6054920580032959,-0.3002898761242119,-0.7370246657963618],[0.6020254482394685,-0.30245172831799866,-0.7389778830990293],[0.5994304519468385,-0.30825566680171396,-0.7386890937081986],[0.5980733778843701,-0.31429662327010677,-0.7372420682971016],[0.5980598653074019,-0.3230797702572477,-0.7334465621700169],[0.5987117754034434,-0.3258386555237282,-0.7316921350949086],[0.5990093855737952,-0.32637135595088823,-0.73121097776858],[0.6015156131032672,-0.32731709795567965,-0.7287266185469505],[0.6105425141256331,-0.3275403006273915,-0.7210791842163169],[0.6130111913425677,-0.32677734128125446,-0.7193287485662732],[0.6130111913425677,-0.32677734128125446,-0.7193287485662732],[0.6105425141256331,-0.3275403006273915,-0.7210791842163169],[0.6015156131032672,-0.32731709795567965,-0.7287266185469505],[0.5990093855737952,-0.32637135595088823,-0.73121097776858],[0.5987117754034434,-0.3258386555237282,-0.7316921350949086],[0.5674114658628518,-0.3409503946041848,-0.74953122471757],[0.5871986192886121,-0.3411895283062713,-0.7340214487872216],[0.4777386499698348,-0.7158103125567278,-0.5092949820707442],[0.5033273142614463,-0.7085706980409702,-0.494559582453006],[0.5139014829834914,-0.7053523211476823,-0.48824519335979677],[0.5178693799393747,-0.7041468840238483,-0.48578644592116066],[0.519688854927128,-0.7036146165589293,-0.484613212190053],[0.5467390749678396,-0.6949836777588544,-0.4669840163775289],[0.5617828866190435,-0.6902016362852823,-0.45609394818512344],[0.5787057698464751,-0.6842007687870726,-0.4438118294250137],[0.6195905082779026,-0.6543143672408583,-0.4335669623877324],[0.7140977304082823,-0.6008180565589144,-0.35927996651429006],[0.7431223547901128,-0.5638351032213653,-0.3603597399634846],[0.7875434455195324,-0.5033020628401594,-0.3556154593940815],[0.8047154099922353,-0.4796431256429789,-0.3498222133376642],[0.8140888577953161,-0.4658646948964343,-0.3467411392704504],[0.8364712291941908,-0.4302938445619896,-0.3393568771403079],[0.898897910931586,-0.3076093063720734,-0.312024134252661],[0.8435497006379156,-0.313959325406093,-0.4357217512865684],[0.814074989007684,-0.41801309909426776,-0.40317113147861305],[0.7916689249568534,-0.49111870333438895,-0.3634043649886565],[0.8288691581915122,-0.31074205135992816,-0.4652045744782803],[0.8283026022942086,-0.31048223434401384,-0.46638565714373215],[0.8283026022942086,-0.31048223434401384,-0.46638565714373215],[0.8288691581915122,-0.31074205135992816,-0.4652045744782803],[0.7916689249568534,-0.49111870333438895,-0.3634043649886565],[0.814074989007684,-0.41801309909426776,-0.40317113147861305],],
[[0.9223584442637638,0.11515895484099505,-0.3687727151176714],[0.9220514371118687,0.11586492073573881,-0.3693189237811121],[0.9158666133599042,0.1309849073866335,-0.379514559100932],[0.893487636942075,0.18616861397474704,-0.40868213785580165],[0.8897778931201576,0.19389656462797766,-0.4131578670921347],[0.8874007246846939,0.198388134671682,-0.41612750672188287],[0.8818808630728656,0.20786621485547102,-0.423175826421497],[0.88228725716403,0.20509140454151806,-0.4236823239517556],[0.889777302126142,0.1267945889071273,-0.43842842613703414],[0.8883119200221845,0.12316646348749585,-0.442416042903604],[0.888845336335912,0.12115984485398282,-0.4418984725803637],[0.8899320896202605,0.11334165220055621,-0.44178563324373143],[0.8899320896202605,0.11334165220055621,-0.44178563324373143],[0.888845336335912,0.12115984485398282,-0.4418984725803637],[0.8883119200221845,0.12316646348749585,-0.442416042903604],[0.889777302126142,0.1267945889071273,-0.43842842613703414],[0.88228725716403,0.20509140454151806,-0.4236823239517556],[0.8818808630728656,0.20786621485547102,-0.423175826421497],[0.8799340031493161,0.2116405585039482,-0.4253521177774437],[0.8750417926215639,0.22160682420286765,-0.4303397223500976],[0.8716250835451154,0.22737409600191902,-0.4342473191653357],[0.8633061940592374,0.2418827838390266,-0.4429391991924368],[0.8506856143962531,0.2661716074982436,-0.4533063652995294],[0.8433797032745056,0.2792497384044671,-0.45905365667386167],[0.8396370226970273,0.26679043024546734,-0.4731094339007734],[0.8347484330701287,0.24969793319013076,-0.49076062968370027],[0.834000950499812,0.24686270425584475,-0.4934584276440128],[0.8320064215115252,0.23574954867914694,-0.5021827006789111],[0.8279038229531653,0.2109191979670176,-0.5197002519419094],[0.8180033631132807,0.15098241652864203,-0.5550448701091958],[0.8612139302171631,0.13715462668372685,-0.4893865290127579],[0.8612139302171631,0.13715462668372685,-0.4893865290127579],[0.8180033631132807,0.15098241652864203,-0.5550448701091958],[0.8102027573891925,0.12090178224716194,-0.5735453347107002],[0.8061072229100769,0.10861800582068139,-0.5817158017311734],[0.7999336156928749,0.0933545771396331,-0.5927825346715306],[0.7829716679402496,0.05612447622749674,-0.619520306665611],[0.7778709818559145,0.04480925211018086,-0.6268244303725262],[0.7632899262793283,0.010419003289288098,-0.6459720836158134],[0.7459248923036775,-0.03147390520876106,-0.6652859898815374],[0.7771956415497058,-0.07934396328874903,-0.624236710107452],[0.843523929626565,-0.09134313230115054,-0.5292672409367243],[0.8504257061553536,-0.09235062598725888,-0.5179261339128677],[0.8652537912604096,-0.0933127076863415,-0.4925734618244583],[0.8661956969370033,-0.09333254758126447,-0.4909114483996175],[0.8720421218994137,-0.0929590002713373,-0.4805217600709897],[0.875881776844736,-0.09254157835719726,-0.4735685475899628],[0.89114820678881,-0.09283196969162533,-0.4441138355650065],[0.8936008917946267,-0.09310261423679651,-0.4391006142174278],[0.8982807420981861,-0.09407361393408917,-0.42923404284482397],[0.9268288614497615,-0.24085179867635784,-0.2880601892974835],[0.9270289470971593,-0.2423388208072283,-0.28616293815533533],[0.9334632376527605,-0.24017107877554222,-0.26639113512018037],[0.9353915809144012,-0.2396013518283815,-0.26006495834016036],[0.9372460109086416,-0.23892005727354076,-0.2539431457398419],[0.9408532838267534,-0.2373101412979878,-0.24182430636630334],[0.9416798647841437,-0.23687735753939307,-0.23901495715806453],[0.9475503739193644,-0.22256910367103053,-0.22937149556199637],[0.9476050214100018,-0.22242767840975938,-0.22928290663674575],[0.9777977767715544,-0.1809657996197601,-0.10565456501536644],[0.978621374126421,-0.17620719517650424,-0.10607181751504459],[0.9822981297545951,-0.15080021986669834,-0.11112910495806265],[0.9822981297545951,-0.15080021986669834,-0.11112910495806265],[0.978621374126421,-0.17620719517650424,-0.10607181751504459],[0.9777977767715544,-0.1809657996197601,-0.10565456501536644],[0.9476050214100018,-0.22242767840975938,-0.22928290663674575],[0.9475503739193644,-0.22256910367103053,-0.22937149556199637],[0.9637514920315932,-0.21711471676206118,-0.15506212101028446],[0.9735937884299237,-0.20903921937512754,-0.09174824191071032],[0.9785886032224028,-0.18152760118830633,-0.0970158525708347],[0.9788167848938187,-0.18005952303539371,-0.09744880591569327],[0.9792400307951638,-0.17917883290490494,-0.09478347918874368],[0.9804472998020783,-0.17718513789507925,-0.08560677087658006],[0.9808388660029361,-0.17677672031198008,-0.08188473663518948],[0.9834011360784243,-0.16071493330530093,-0.08421945008332217],[0.9862177074697361,-0.14360788408672964,-0.0821669586955152],[0.9861451727570338,-0.14636266418980634,-0.0780747640359033],[0.9896706171632457,-0.13958271564949526,-0.03269151289910962],[0.9906094624259405,-0.13472266029457072,0.023295874212890574],[0.9889927167669248,-0.14607562086115342,0.023565211053713536],[0.9856330879824452,-0.1662029960964153,0.030066259540630327],[0.9856261331444366,-0.16604270762439277,0.03115998888808835],[0.9855168531556103,-0.1625595398021819,0.04827968688347071],[0.983662700603507,-0.15058972759403388,0.09864291857285032],[0.9828422213523089,-0.14422349559517242,0.11498152567072847],[0.9816310792115972,-0.14780771796534736,0.120637070735953],[0.9814363404792952,-0.14860754284051114,0.12123740263431422],[0.9809187385731243,-0.15015415534347676,0.12349962732412553],[0.980835630800151,-0.14830449443082813,0.12636155382269645],[0.9805934349195862,-0.1473918967697137,0.1292754584568679],[0.9805934349195862,-0.1473918967697137,0.1292754584568679],[0.980835630800151,-0.14830449443082813,0.12636155382269645],[0.9809187385731243,-0.15015415534347676,0.12349962732412553],[0.9814363404792952,-0.14860754284051114,0.12123740263431422],[0.9816310792115972,-0.14780771796534736,0.120637070735953],[0.9828422213523089,-0.14422349559517242,0.11498152567072847],[0.983662700603507,-0.15058972759403388,0.09864291857285032],[0.9855168531556103,-0.1625595398021819,0.04827968688347071],[0.9856261331444366,-0.16604270762439277,0.03115998888808835],[0.9856330879824452,-0.1662029960964153,0.030066259540630327],[0.9889927167669248,-0.14607562086115342,0.023565211053713536],[0.9906094624259405,-0.13472266029457072,0.023295874212890574],[0.9896706171632457,-0.13958271564949526,-0.03269151289910962],[0.9861451727570338,-0.14636266418980634,-0.0780747640359033],[0.9862177074697361,-0.14360788408672964,-0.0821669586955152],[0.9834011360784243,-0.16071493330530093,-0.08421945008332217],[0.9808388660029361,-0.17677672031198008,-0.08188473663518948],[0.9804472998020783,-0.17718513789507925,-0.08560677087658006],[0.9792400307951638,-0.17917883290490494,-0.09478347918874368],[0.9788167848938187,-0.18005952303539371,-0.09744880591569327],[0.9785886032224028,-0.18152760118830633,-0.0970158525708347],[0.9735937884299237,-0.20903921937512754,-0.09174824191071032],[0.9731106668828118,-0.214506641863107,-0.08391978667455116],[0.9731147023328989,-0.21470669287710817,-0.0833595353713591],[0.9731769207056882,-0.21477484930929064,-0.08245268406768959],[0.9731378052531258,-0.2152212191665012,-0.08174740856818904],[0.974456406712384,-0.21225080638538413,-0.07337783456837037],[0.9747880792420764,-0.2120387433702615,-0.06948216949335734],[0.9748572797194279,-0.21272742584096654,-0.06633495664514481],[0.9743814182560965,-0.21554090737885884,-0.0642103496605978],[0.9736535930240108,-0.2192197317795602,-0.06278049051999893],[0.9736535930240108,-0.2192197317795602,-0.06278049051999893],[0.9743814182560965,-0.21554090737885884,-0.0642103496605978],[0.9748572797194279,-0.21272742584096654,-0.06633495664514481],[0.9747880792420764,-0.2120387433702615,-0.06948216949335734],[0.974456406712384,-0.21225080638538413,-0.07337783456837037],[0.9731378052531258,-0.2152212191665012,-0.08174740856818904],[0.9731769207056882,-0.21477484930929064,-0.08245268406768959],[0.9731147023328989,-0.21470669287710817,-0.0833595353713591],[0.9731106668828118,-0.214506641863107,-0.08391978667455116],[0.9735937884299237,-0.20903921937512754,-0.09174824191071032],[0.9637514920315932,-0.21711471676206118,-0.15506212101028446],[0.9475503739193644,-0.22256910367103053,-0.22937149556199637],[0.9416798647841437,-0.23687735753939307,-0.23901495715806453],[0.9417565623908714,-0.23778540579371785,-0.23780806963861817],[0.9434443683047727,-0.2534684991036878,-0.21369708438846863],[0.9437062945258599,-0.2618178566286575,-0.20216290367583964],[0.9435284227267263,-0.27823929587776036,-0.17982494191925713],[0.941815604052694,-0.3020612492980544,-0.14745294040933116],[0.9507202371501001,-0.29610880897867775,-0.09192716637907575],[0.9524486029541873,-0.2941017354194598,-0.07966070520576121],[0.9528249386859762,-0.29374227344767406,-0.0764206320822975],[0.9546548477348156,-0.2905687021129176,-0.06483788282193216],[0.9554553535399707,-0.2892355482933377,-0.05871852344245376],[0.9561332176727517,-0.28792383350433687,-0.05393640850962815],[0.9566620594982924,-0.28672350116197576,-0.05086588048883324],[0.9578269821978832,-0.2844663244872383,-0.04057563809008265],[0.9601998718207956,-0.2712129384713478,0.06678134590635992],[0.9542999982369162,-0.2864889068954789,0.08506244524380467],[0.957926022786546,-0.2524957912082113,0.13646834904287883],[0.95794628079023,-0.24655167923086496,0.14680324447574888],[0.9575352561769016,-0.24161820286161212,0.1573114020793167],[0.9569713658259097,-0.23757671181049714,0.16662266050752225],[0.9564744884557312,-0.23390856024337828,0.1744801948022098],[0.9557357248049799,-0.23005770015727917,0.18341940717885688],[0.9551172618421674,-0.2267011764244954,0.19067667067281904],[0.9550282754233035,-0.22617019061177787,0.19174993616849736],[0.9546909476028665,-0.223479232805513,0.19652538530632688],[0.947471690773007,-0.2408309659031246,0.21047052298577976],[0.9355510561457364,-0.26439804353225493,0.23417492590137204],[0.9315850469317872,-0.2540256641538842,0.2600389630118492],[0.9298985366453475,-0.2558115415293077,0.2642899293678079],[0.9295323584928074,-0.25644905431513054,0.26495938755906423],[0.9287025365162919,-0.25737920498572386,0.2669598162816313],[0.9286024805954333,-0.2556717033431162,0.26894128195879025],[0.9284082577917727,-0.25503374826944286,0.27021453348716074],[0.9284082577917727,-0.25503374826944286,0.27021453348716074],[0.9286024805954333,-0.2556717033431162,0.26894128195879025],[0.9287025365162919,-0.25737920498572386,0.2669598162816313],[0.9295323584928074,-0.25644905431513054,0.26495938755906423],[0.9298985366453475,-0.2558115415293077,0.2642899293678079],[0.9315850469317872,-0.2540256641538842,0.2600389630118492],[0.9355510561457364,-0.26439804353225493,0.23417492590137204],[0.9349480654537926,-0.26558778087946633,0.2352344480549806],[0.9318574040113682,-0.2719930772066794,0.2401281835621032],[0.9312568952185437,-0.27330645916054513,0.24096508977244707],[0.9305421071936141,-0.27497252694815566,0.24182947744932667],[0.9288243650809542,-0.279207139831968,0.2435747768115867],[0.9285810762589153,-0.2798438033634067,0.2437716770523961],[0.9277376422403218,-0.2821960671838655,0.24427084729113258],[0.9260615565091855,-0.2864883585073981,0.24563064547307828],[0.9233593717343291,-0.29278773650783635,0.24836024637812457],[0.9218617172207959,-0.2955485649998159,0.25064321265351447],[0.9158535590433067,-0.3054178512856026,0.26063805267802687],[0.9081689627114636,-0.3164554480010906,0.2740165772321328],[0.8959504953291175,-0.3333175046277963,0.29355093429966816],[0.890802755222624,-0.34053660745280423,0.30084093849128407],[0.8618305795483461,-0.3771771113905673,0.33909508813669],[0.8458730091162712,-0.42305904641379577,0.32483826082534467],[0.8354444547934247,-0.43762066008677786,0.3324465683687084],[0.8311608191500719,-0.44318507682529557,0.33579559316515534],[0.8309232366312304,-0.44349864471758976,0.3359695327852537],[0.8235022869309648,-0.4528981135096749,0.3416537460629525],[0.724251147782432,-0.5523236723322924,0.41279393880869975],[0.6607152527399117,-0.5404125817444584,0.5209698612099587],[0.6582719294421696,-0.5396676751567943,0.5248207954143435],[0.637295685437682,-0.5315416712572218,0.5579584760890319],[0.6214267684994484,-0.5249143051692958,0.5816302464805009],[0.6667869163299707,-0.5012166505867448,0.5515225085033011],[0.7887115477313293,-0.39617895952666915,0.4700811913952918],[0.7983944603233177,-0.3848962719040403,0.4630563093182182],[0.8065144534868687,-0.3763185019926311,0.4559811633991033],[0.8065144534868687,-0.3763185019926311,0.4559811633991033],[0.7983944603233177,-0.3848962719040403,0.4630563093182182],[0.8070390060186915,-0.3725765792859329,0.4581208741499949],[0.8077085219917023,-0.37291581494659914,0.4566626090065767],[0.8083187345466951,-0.3724431256798211,0.4559681365124919],[0.8083187345466951,-0.3724431256798211,0.4559681365124919],[0.8077085219917023,-0.37291581494659914,0.4566626090065767],[0.8070390060186915,-0.3725765792859329,0.4581208741499949],[0.7983944603233177,-0.3848962719040403,0.4630563093182182],[0.7887115477313293,-0.39617895952666915,0.4700811913952918],[0.6667869163299707,-0.5012166505867448,0.5515225085033011],[0.6214267684994484,-0.5249143051692958,0.5816302464805009],[0.6006306491852732,-0.5161686435003283,0.6105839456833992],[0.7976692333647101,-0.3768739268871356,0.4708395027777785],[0.8026597999643964,-0.3694739144086834,0.4682160527925545],[0.8056457574779043,-0.3688345927354445,0.46356871837898267],[0.8057126388802979,-0.3687942937375438,0.4634845331347889],[0.805933585757826,-0.3687433602685584,0.46314078810377435],[0.8062562075120712,-0.36806212988324133,0.4631211465632553],[0.808726717759049,-0.3641041520945699,0.46194075638567533],[0.8091422692992373,-0.36361390057880477,0.46159908940459127],[0.8102386804435477,-0.3627135112056686,0.46038265551816127],[0.8112718659755572,-0.36317998767826476,0.45819019634487285],[0.81194933983727,-0.3641987387065046,0.4561771018611223],[0.8122758510212977,-0.36576449646135734,0.4543393830343087],[0.8122626716616697,-0.36640031581829674,0.4538503726926962],[0.8126753920111505,-0.36634195417093857,0.4531581179166286],[0.8187845381577542,-0.36036838168530233,0.4469077192836454],[0.8588565451258353,-0.2975804178956529,0.4169068598374973],[0.8625327231061153,-0.31811060778914096,0.39350088028258956],[0.8644086317036717,-0.3360874389513026,0.3739558139878836],[0.8645639877907119,-0.3407279537425906,0.36936915484892463],[0.8644115433927493,-0.35353450191563723,0.35749970574061646],[0.9084695699242268,-0.2511220324628352,0.33409694002403717],[0.9135411090622841,-0.26159896993818876,0.31146206989058944],[0.9152883652662694,-0.256801255349451,0.3103229344717311],[0.9162844618555611,-0.25422290460616803,0.30950524993232],[0.9097837171447499,-0.243446269817107,0.3361956301477134],[0.9102928128297849,-0.24224611457328163,0.33568409983880204],[0.9102928128297849,-0.24224611457328163,0.33568409983880204],[0.9097837171447499,-0.243446269817107,0.3361956301477134],[0.9162844618555611,-0.25422290460616803,0.30950524993232],[0.9152883652662694,-0.256801255349451,0.3103229344717311],[0.9135411090622841,-0.26159896993818876,0.31146206989058944],[0.9084695699242268,-0.2511220324628352,0.33409694002403717],[0.8644115433927493,-0.35353450191563723,0.35749970574061646],[0.8645639877907119,-0.3407279537425906,0.36936915484892463],[0.8644086317036717,-0.3360874389513026,0.3739558139878836],[0.8625327231061153,-0.31811060778914096,0.39350088028258956],[0.8588565451258353,-0.2975804178956529,0.4169068598374973],[0.8187845381577542,-0.36036838168530233,0.4469077192836454],[0.8126753920111505,-0.36634195417093857,0.4531581179166286],[0.8122626716616697,-0.36640031581829674,0.4538503726926962],[0.8122758510212977,-0.36576449646135734,0.4543393830343087],[0.81194933983727,-0.3641987387065046,0.4561771018611223],[0.8112718659755572,-0.36317998767826476,0.45819019634487285],[0.8102386804435477,-0.3627135112056686,0.46038265551816127],[0.8091422692992373,-0.36361390057880477,0.46159908940459127],[0.808726717759049,-0.3641041520945699,0.46194075638567533],[0.8062562075120712,-0.36806212988324133,0.4631211465632553],[0.805933585757826,-0.3687433602685584,0.46314078810377435],[0.8057126388802979,-0.3687942937375438,0.4634845331347889],[0.8056457574779043,-0.3688345927354445,0.46356871837898267],[0.8026597999643964,-0.3694739144086834,0.4682160527925545],[0.8014564652024062,-0.3635620964735985,0.4748580170882514],[0.762386950950102,-0.29756380309066016,0.5746493888548299],[0.7440552848613203,-0.27579147947801697,0.6085398860528914],[0.7709067101546653,-0.277819462850594,0.5731659360952276],[0.8105557296438726,-0.2767901154698619,0.5161265747078618],[0.8197441029441535,-0.25972849917569635,0.5104514789911236],[0.8475654641981907,-0.19407320199634856,0.49393155008097034],[0.8495598601649449,-0.1925368221588038,0.4910983772214163],[0.8496030414968535,-0.19247678536560067,0.4910472064624951],[0.8506015459324371,-0.1916887659019383,0.4896247819344319],[0.8509145297399883,-0.19248385618730804,0.48876827657350924],[0.8517668948549478,-0.19352484159672598,0.4868688658295192],[0.8528456336775073,-0.19396650954075942,0.4848002870190832],[0.8528456336775073,-0.19396650954075942,0.4848002870190832],[0.8517668948549478,-0.19352484159672598,0.4868688658295192],[0.8509145297399883,-0.19248385618730804,0.48876827657350924],[0.8506015459324371,-0.1916887659019383,0.4896247819344319],[0.8507891227566527,-0.19022802945462713,0.4898685184912118],[0.851517903156394,-0.18743599279290848,0.4896784753385378],[0.8525974217287927,-0.18484311857696967,0.48878487903796247],[0.8527543752675751,-0.1845793052253806,0.4886107403081962],[0.8536829659760767,-0.18441463936410168,0.4870489034896773],[0.8552720544065043,-0.1850067311875739,0.4840270884636172],[0.8554879534041133,-0.18525575574537634,0.48355006622236263],[0.8554879534041133,-0.18525575574537634,0.48355006622236263],[0.8552720544065043,-0.1850067311875739,0.4840270884636172],[0.8536829659760767,-0.18441463936410168,0.4870489034896773],[0.8527543752675751,-0.1845793052253806,0.4886107403081962],[0.8525974217287927,-0.18484311857696967,0.48878487903796247],[0.851517903156394,-0.18743599279290848,0.4896784753385378],[0.8507891227566527,-0.19022802945462713,0.4898685184912118],[0.8506015459324371,-0.1916887659019383,0.4896247819344319],[0.8496030414968535,-0.19247678536560067,0.4910472064624951],[0.8495598601649449,-0.1925368221588038,0.4910983772214163],[0.8475654641981907,-0.19407320199634856,0.49393155008097034],[0.8197441029441535,-0.25972849917569635,0.5104514789911236],[0.8105557296438726,-0.2767901154698619,0.5161265747078618],[0.7709067101546653,-0.277819462850594,0.5731659360952276],[0.7440552848613203,-0.27579147947801697,0.6085398860528914],[0.762386950950102,-0.29756380309066016,0.5746493888548299],[0.8014564652024062,-0.3635620964735985,0.4748580170882514],[0.8026597999643964,-0.3694739144086834,0.4682160527925545],[0.7976692333647101,-0.3768739268871356,0.4708395027777785],[0.6006306491852732,-0.5161686435003283,0.6105839456833992],[0.5550141479172649,-0.49474302050648394,0.6687216455834171],[0.6407518832852386,-0.27395994537322704,0.7172049723736712],[0.6535689001743011,-0.25915410561827285,0.7111166165026293],[0.7027814064988112,-0.11830831670379693,0.7014994204404355],[0.70555886485603,-0.0940009855908071,0.7023891392462067],[0.7063998435141929,-0.08142883946931057,0.7031135080382149],[0.6992079539005119,0.0181438415281623,0.7146880705712532],[0.8562157194802209,0.0199020931687758,0.5162349740210064],[0.8785388471057154,-0.014850632662747684,0.4774399991995607],[0.8898814421223121,-0.03504975220151293,0.4548434168336689],[0.9119375606010828,-0.0831721644934756,0.40181124501240234],[0.9386322194223972,-0.09933012224654539,0.33030755891543145],[0.9423206085570872,-0.1014501287189919,0.3189666786225496],[0.9450015364246127,-0.10292515816444227,0.3104488814151956],[0.9455556294612669,-0.10329061326943569,0.3086350608802105],[0.9464050652240548,-0.10377222948520519,0.3058574453988696],[0.9511868814507383,-0.10709450218019209,0.2894378761648104],[0.9542461684569762,-0.10093601833067445,0.2814714376073177],[0.9547533497135419,-0.09995701569794731,0.28009754769282014],[0.9727974442163353,-0.056788783946900574,0.22458888339363198],[0.9717148687797228,-0.019529970603813757,0.23534823993525092],[0.9694427287587113,0.004450599354061046,0.24527736916041296],[0.9686797739264897,0.01030855952189397,0.24809923253873323],[0.9666894866821469,0.02267573134524453,0.254945577616411],[0.9647843098565824,0.03194581035566459,0.261095194623107],[0.9628091780560758,0.04247516116140838,0.26682268894398065],[0.9627691329391945,0.042828544102944656,0.26691068256915806],[0.962299631502107,0.04867303290790975,0.2676011118782108],[0.962065864511083,0.05345424819943296,0.26752928006477356],[0.9620401556399837,0.05373728923502136,0.26756502514691216],[0.9617964650046026,0.0555877166264393,0.26806261519448954],[0.9616301643601771,0.05849825216183709,0.26803988786490135],[0.9613079619203331,0.061734595191722745,0.26846944352214397],[0.9606818175087017,0.06605378560601244,0.2696800751173372],[0.9600271391011547,0.06945699068462118,0.2711523900582267],[0.9585522461946084,0.07549076889119273,0.2747339351581589],[0.9567195179610353,0.08162006361084455,0.2793312176763745],[0.9510815293097762,0.10099545996248341,0.2919654802759116],[0.9469485325953242,0.11447101944810745,0.3003079458190766],[0.9469384522445614,0.11450502282921594,0.300326767717357],[0.9367655166182786,0.1483520575524432,0.3169574638572919],[0.9341532094054793,0.1488262216134928,0.32435865506826606],[0.9069847890853436,0.15359996854347335,0.39215512495855354],[0.8996735103473944,0.20012485339673336,0.38799177546970354],[0.9264732720513064,0.23618644149132334,0.2930243010915849],[0.9264732720513064,0.23618644149132334,0.2930243010915849],[0.8996735103473944,0.20012485339673336,0.38799177546970354],[0.8975921225547059,0.20986671461199322,0.38766524686345827],[0.8925992156995544,0.22936685018255779,0.3881462200896365],[0.8832808671859138,0.25930298646377614,0.390610894464385],[0.8816019648612066,0.2645173786563026,0.39090731886427793],[0.8755519785277626,0.2825309073586872,0.39189924634170625],[0.8025146176659935,0.43373635530396704,0.4096865417853451],[0.8162701927524244,0.43883570216307427,0.37566767086210845],[0.9168568026930372,0.2749962132003504,0.2893971079347002],[0.9224638055672132,0.25944247670064363,0.28591979417642766],[0.9207701040878925,0.25474669137827655,0.29544295329182024],[0.9254777908311961,0.25580783211031116,0.2793800488747033],[0.9255987910020848,0.25530576857449416,0.2794384415717817],[0.9271122077400593,0.25044306236756275,0.2788211375977623],[0.9271122077400593,0.25044306236756275,0.2788211375977623],[0.9255987910020848,0.25530576857449416,0.2794384415717817],[0.9254777908311961,0.25580783211031116,0.2793800488747033],[0.9207701040878925,0.25474669137827655,0.29544295329182024],[0.9224638055672132,0.25944247670064363,0.28591979417642766],[0.9168568026930372,0.2749962132003504,0.2893971079347002],[0.8162701927524244,0.43883570216307427,0.37566767086210845],[0.8215608525810535,0.44095720206825206,0.36137862616711486],[0.8231405421418863,0.4416644953948028,0.3568923106344771],[0.8370966239977317,0.43184643983095317,0.33582420177368305],[0.8457236651775716,0.42528286776375324,0.3223134569720178],[0.9164565314905635,0.29218374452115664,0.27337901405536097],[0.9264793384489343,0.2670671055388587,0.26516258515545027],[0.9264793384489343,0.2670671055388587,0.26516258515545027],[0.9164565314905635,0.29218374452115664,0.27337901405536097],[0.8457236651775716,0.42528286776375324,0.3223134569720178],[0.8898769900186904,0.3841525041394059,0.24606055392666945],[0.892084869714367,0.38153809543692474,0.2421017698346403],[0.9009659766954243,0.37027553047112516,0.22617767434383723],[0.9109599922189136,0.35573121444559574,0.20882335991353695],[0.9392133351928448,0.3052658902394253,0.15713385138875766],[0.9464339213652133,0.2902067379470277,0.14157288490177228],[0.9482896992184203,0.2862419312373788,0.13715758512650214],[0.9621221732064533,0.25318384782166514,0.10108839214621683],[0.9731492350417593,0.18667972478257464,0.13465231781421677],[0.986519662744655,0.10902876393451943,0.1220314863184218],[0.9883482422302657,0.09363929033339104,0.11999764741945138],[0.9886892534305252,0.09025973683438246,0.11977787799747959],[0.9903827135488872,0.07155198682921449,0.11841618928311566],[0.9906307847195501,0.06871038421107713,0.1180234360942543],[0.9910266142727723,0.06364755419908169,0.11753824334028866],[0.9922614961685058,0.0426779043147818,0.11660068483819837],[0.9933303556528846,-0.004382316383698325,0.11521978927956301],[0.9945336311120538,-0.0113162956228362,0.10380172465065343],[0.9980964986574066,-0.04837905216952918,0.03824717870645531],[0.9994069370560753,-0.02702369606801955,-0.02134230575681436],[0.9993557963848345,-0.025780985839642896,-0.02496663776260882],[0.999155631433903,-0.023541879961584366,-0.033672007094812856],[0.9983341849326213,-0.019345330411213134,-0.05435635552720369],[0.9960822475130477,-0.013445744018954665,-0.08740347909055121],[0.9936948759817771,-0.006668182696464282,-0.11191974261535469],[0.9928836838136021,-0.004464827698678984,-0.11900443575914373],[0.9927432679607592,-0.004025947303864307,-0.12018567163725838],[0.9829306023040482,0.07956221151830892,-0.1658833492322752],[0.9803000757196892,0.09395409001136733,-0.17373655491607856],[0.9769332488199253,0.1103346100199202,-0.18283244017924746],[0.9768809152023619,0.11056087414588668,-0.18297532790377344],[0.9708406296499704,0.09461326979191811,-0.22026529685842647],[0.9650113051619751,0.08363045104456009,-0.2485138397909962],[0.9633610345774855,0.08100534762288913,-0.25568271493061845],[0.9560548985036675,0.07316373289611852,-0.2839121329493467],[0.9620951390959012,-0.03591248675616406,-0.2703391141197052],[0.9631028866811808,-0.038853053252031394,-0.26631423153742895],[0.9655522547735725,-0.016817789806438187,-0.2596651791205294],[0.9652765848079117,-0.04515459455204353,-0.2572978379474167],[0.9676257899104569,-0.04350040181982114,-0.2486122397262016],[0.9685616073444611,-0.04389538204437941,-0.24487059483223403],[0.9690650120573313,-0.04469954054187616,-0.2427240274090509],[0.9693655335473926,-0.04364129781591467,-0.24171449996911953],[0.9786496859954013,-0.036552281858453876,-0.2022590487272269],[0.9892218455397278,-0.03275134642021694,-0.14271471407895522],[0.9917164769229957,-0.013799698808303605,-0.1277027709654004],[0.9863939402862282,-0.11700441695105783,-0.11548576094286281],[0.9865130096337374,-0.12110485513191668,-0.1101167375418608],[0.9864224172359295,-0.12281496807243611,-0.1090288878774446],[0.9864311087842447,-0.12515396202704762,-0.10625513357771489],[0.987239554317678,-0.12253170483150017,-0.10170567192501506],[0.9878072925645919,-0.12144640018646806,-0.0974039251671055],[0.9880121094256478,-0.12149708880841634,-0.09523932506775619],[0.99196594324027,-0.08941954858531687,-0.08948581888902668],[0.9927530320423111,-0.08090949025213082,-0.08885421632054609],[0.9901649187825728,-0.11346150193789875,-0.08185304631042795],[0.9901649187825728,-0.11346150193789875,-0.08185304631042795],[0.9927530320423111,-0.08090949025213082,-0.08885421632054609],[0.99196594324027,-0.08941954858531687,-0.08948581888902668],[0.9880121094256478,-0.12149708880841634,-0.09523932506775619],[0.9878072925645919,-0.12144640018646806,-0.0974039251671055],[0.987239554317678,-0.12253170483150017,-0.10170567192501506],[0.9864311087842447,-0.12515396202704762,-0.10625513357771489],[0.9864224172359295,-0.12281496807243611,-0.1090288878774446],[0.9865130096337374,-0.12110485513191668,-0.1101167375418608],[0.9863939402862282,-0.11700441695105783,-0.11548576094286281],[0.9917164769229957,-0.013799698808303605,-0.1277027709654004],[0.9892218455397278,-0.03275134642021694,-0.14271471407895522],[0.9786496859954013,-0.036552281858453876,-0.2022590487272269],[0.9693655335473926,-0.04364129781591467,-0.24171449996911953],[0.9690650120573313,-0.04469954054187616,-0.2427240274090509],[0.9685616073444611,-0.04389538204437941,-0.24487059483223403],[0.9676257899104569,-0.04350040181982114,-0.2486122397262016],[0.9652765848079117,-0.04515459455204353,-0.2572978379474167],[0.9655522547735725,-0.016817789806438187,-0.2596651791205294],[0.9631028866811808,-0.038853053252031394,-0.26631423153742895],[0.9633814327485305,-0.04210672075437168,-0.2648079287006001],[0.964462026905756,-0.04659400594579564,-0.26008075143455744],[0.963569471795299,-0.05233821488520169,-0.26228721716232994],[0.9632990021046649,-0.05581041074882971,-0.26256471696746253],[0.9632504183124136,-0.06171866618718582,-0.2614181284169764],[0.9634515525310253,-0.06487022153385506,-0.2599095232647424],[0.9635094707055806,-0.06496003981599432,-0.25967228016820815],[0.9664403784346699,-0.06614492507401572,-0.24822941771273824],[0.9669714165831121,-0.06574641426505523,-0.24625939276002692],[0.9681659677211266,-0.06353646610807473,-0.2421110828134722],[0.9681659677211266,-0.06353646610807473,-0.2421110828134722],[0.9669714165831121,-0.06574641426505523,-0.24625939276002692],[0.9664403784346699,-0.06614492507401572,-0.24822941771273824],[0.9635094707055806,-0.06496003981599432,-0.25967228016820815],[0.9634515525310253,-0.06487022153385506,-0.2599095232647424],[0.9632504183124136,-0.06171866618718582,-0.2614181284169764],[0.9632990021046649,-0.05581041074882971,-0.26256471696746253],[0.963569471795299,-0.05233821488520169,-0.26228721716232994],[0.964462026905756,-0.04659400594579564,-0.26008075143455744],[0.9633814327485305,-0.04210672075437168,-0.2648079287006001],[0.9631028866811808,-0.038853053252031394,-0.26631423153742895],[0.9620951390959012,-0.03591248675616406,-0.2703391141197052],[0.9560548985036675,0.07316373289611852,-0.2839121329493467],[0.9465451687927523,0.06499895107103788,-0.3159547116198222],[0.942810911062189,0.061530266748994276,-0.3275997745052383],[0.9348129332248604,0.08412376220752717,-0.34503329188294896],[0.9318706696951874,0.09156175827980477,-0.3510462923640609],[0.911943856092648,0.09273559310723282,-0.3996980273980866],[0.911943856092648,0.09273559310723282,-0.3996980273980866],[0.9318706696951874,0.09156175827980477,-0.3510462923640609],[0.9313925653269709,0.09291469623463561,-0.35195844708895635],[0.9263131758362353,0.10451733878966005,-0.36196688545295863],[0.9250374814015782,0.10781301320504814,-0.3642554216286604],[0.9223584442637638,0.11515895484099505,-0.3687727151176714],],
[[0.31503032249223506,-0.07357172269755222,0.9462257117251427],[0.3152490454177337,-0.07266910949974283,0.9462226164532964],[0.31622788115970607,-0.0679516384777356,0.9462465334179218],[0.2961669777339006,0.046737265766945035,0.9539920069311887],[0.30220815060902184,0.05052092788883643,0.9519022373913856],[0.3377381419099519,0.0632549787567868,0.9391122164904957],[0.3585718173141797,0.07156613723613484,0.9307548226193111],[0.37083780549102613,-0.0022998065919631896,0.9286948007328562],[0.35298320268776656,-0.07664236724648675,0.9324852846898667],[0.35193962672394624,-0.07877628612403648,0.9327018794266008],[0.35193962672394624,-0.07877628612403648,0.9327018794266008],[0.35298320268776656,-0.07664236724648675,0.9324852846898667],[0.37083780549102613,-0.0022998065919631896,0.9286948007328562],[0.3585718173141797,0.07156613723613484,0.9307548226193111],[0.38571801500881125,0.08362281624361971,0.9188192626959605],[0.4296456511801836,-0.1338681575344357,0.8930195579158899],[0.4262111340794044,-0.14441608745138138,0.8930218714409983],[0.42614849575299196,-0.14459509240979007,0.8930227985994907],[0.42614465036749016,-0.14460643395916886,0.8930227971450573],[0.4014092297246295,-0.1425179491719252,0.9047426509542413],[0.3502238558256571,-0.13579967016674596,0.9267694969048196],[0.33259528287740514,-0.11355919582001148,0.9362076088413356],[0.3277549133346891,-0.1085063922766329,0.9385110972279869],[0.30947771454610995,-0.09131648152165746,0.9465119356890441],[0.3133760739502865,-0.0797001597485663,0.9462786697435157],[0.31503032249223506,-0.07357172269755222,0.9462257117251427],],
[[0.22607352219622537,0.22563920363656448,-0.9476168594659182],[0.42259944722108,0.2577807289520141,-0.8688836533100425],[0.4236893090827184,0.25787550164763406,-0.868324590817852],[0.42440377573367594,0.28459645985150167,-0.8595849522781285],[0.41995961391764847,0.3495250300891798,-0.8375357759638079],[0.424411357402035,0.3540852773106946,-0.8333658356928071],[0.4211988658837381,0.36058577556433713,-0.8322075545432872],[0.42058083529866286,0.3633633381264333,-0.8313115213234412],[0.42129521289313265,0.37643952740936504,-0.8251082509568936],[0.4220507457461515,0.37859294710045793,-0.8237357272942017],[0.4256768064910516,0.3799509120553127,-0.8212408665208496],[0.41803741882223194,0.44489814547532286,-0.7920292650003941],[0.40701114786602893,0.4945242110215439,-0.7679763865030599],[0.4008328815249243,0.5346804368432849,-0.7439420888385736],[0.37670311067097784,0.5357691124042742,-0.7556760050473652],[0.33708369444711167,0.6591490650783638,-0.6722329156953007],[0.33155800051917833,0.6633666256639488,-0.6708308372808687],[0.325577530726205,0.6314184432132863,-0.7037826518580413],[0.32458506091893347,0.6039536047221091,-0.7279317149097316],[0.32552420727623654,0.5708086468053979,-0.7537980360874977],[0.32697616187561196,0.5483598011319575,-0.7696675373611738],[0.2953504549525159,0.6694543047656019,-0.6816150252086193],[0.29622120509692673,0.6712497661450956,-0.6794679897545426],[0.19043370097705747,0.6768076667064805,-0.7111022344357458],[-0.08681233463362566,0.6787436986643888,-0.729226034970533],[-0.10683785291522875,0.6635280910754999,-0.7404837240197566],[-0.08521415262042509,0.8843290002383094,-0.4590215327527622],[-0.09182013042598729,0.892800905028566,-0.4409938861579924],[-0.09177730307950652,0.8938369438012331,-0.43889912797307284],[-0.10578661496275879,0.8939017774809483,-0.4356016578378947],[-0.1067892744263423,0.8950972180565252,-0.43289377576371396],[-0.10748500340689218,0.8991719905124514,-0.42418946889390874],[-0.10628132236072756,0.9017644054967315,-0.41895732180782036],[-0.10444244045226576,0.903516719368585,-0.41563122410834896],[-0.10438474214030286,0.9035300812841082,-0.41561667173374467],[-0.09436591279332751,0.9047810964911864,-0.41529055122274144],[-0.09436591279332751,0.9047810964911864,-0.41529055122274144],[-0.10438474214030286,0.9035300812841082,-0.41561667173374467],[-0.10444244045226576,0.903516719368585,-0.41563122410834896],[-0.10628132236072756,0.9017644054967315,-0.41895732180782036],[-0.10748500340689218,0.8991719905124514,-0.42418946889390874],[-0.1067892744263423,0.8950972180565252,-0.43289377576371396],[-0.10578661496275879,0.8939017774809483,-0.4356016578378947],[-0.09177730307950652,0.8938369438012331,-0.43889912797307284],[-0.0840523940267547,0.8957822160937942,-0.4364738438766548],[-0.0840523940267547,0.8957822160937942,-0.4364738438766548],[-0.09177730307950652,0.8938369438012331,-0.43889912797307284],[-0.09182013042598729,0.892800905028566,-0.4409938861579924],[-0.08521415262042509,0.8843290002383094,-0.4590215327527622],[-0.10683785291522875,0.6635280910754999,-0.7404837240197566],[-0.08681233463362566,0.6787436986643888,-0.729226034970533],[0.19043370097705747,0.6768076667064805,-0.7111022344357458],[0.29622120509692673,0.6712497661450956,-0.6794679897545426],[0.2953504549525159,0.6694543047656019,-0.6816150252086193],[0.32697616187561196,0.5483598011319575,-0.7696675373611738],[0.32552420727623654,0.5708086468053979,-0.7537980360874977],[0.30297932963204377,0.6725426814184641,-0.6751961696323372],[0.29968158291055097,0.673995842703941,-0.6752188925689441],[0.2985105381758007,0.6757453776998937,-0.6739878657032499],[0.29612409745291635,0.6826185643994148,-0.6680886276872087],[0.29612409745291635,0.6826185643994148,-0.6680886276872087],[0.2985105381758007,0.6757453776998937,-0.6739878657032499],[0.29968158291055097,0.673995842703941,-0.6752188925689441],[0.30297932963204377,0.6725426814184641,-0.6751961696323372],[0.32552420727623654,0.5708086468053979,-0.7537980360874977],[0.32458506091893347,0.6039536047221091,-0.7279317149097316],[0.325577530726205,0.6314184432132863,-0.7037826518580413],[0.33155800051917833,0.6633666256639488,-0.6708308372808687],[0.33708369444711167,0.6591490650783638,-0.6722329156953007],[0.37670311067097784,0.5357691124042742,-0.7556760050473652],[0.4008328815249243,0.5346804368432849,-0.7439420888385736],[0.40701114786602893,0.4945242110215439,-0.7679763865030599],[0.41803741882223194,0.44489814547532286,-0.7920292650003941],[0.4256768064910516,0.3799509120553127,-0.8212408665208496],[0.4220507457461515,0.37859294710045793,-0.8237357272942017],[0.42129521289313265,0.37643952740936504,-0.8251082509568936],[0.42058083529866286,0.3633633381264333,-0.8313115213234412],[0.4211988658837381,0.36058577556433713,-0.8322075545432872],[0.424411357402035,0.3540852773106946,-0.8333658356928071],[0.41995961391764847,0.3495250300891798,-0.8375357759638079],[0.42440377573367594,0.28459645985150167,-0.8595849522781285],[0.4236893090827184,0.25787550164763406,-0.868324590817852],[0.44625429190794996,0.256970308061227,-0.8572183897517904],[0.4485942531556491,0.25702177871823056,-0.8559807248415366],[0.45218485821428944,0.2568664530461131,-0.854136101157908],[0.45295014797034694,0.25678581822670027,-0.8537547698322305],[0.45424629717352494,0.25672800659534667,-0.853083250412128],[0.4608768583588173,0.25686653858664854,-0.849477546956846],[0.4732833618747218,0.2562933301774439,-0.8428028169620204],[0.4732833618747218,0.2562933301774439,-0.8428028169620204],[0.46248737206983,0.33617373413391344,-0.8204222395537579],[0.480338085306334,0.337935474389727,-0.8093669989277024],[0.480338085306334,0.337935474389727,-0.8093669989277024],[0.46248737206983,0.33617373413391344,-0.8204222395537579],[0.4732833618747218,0.2562933301774439,-0.8428028169620204],[0.4847737259544815,0.2557357792276977,-0.8364171482262972],[0.497697311627363,0.2559240282083046,-0.8287341417997274],[0.6096276015428276,0.2712220615448161,-0.7448441318615053],[0.6098296995179089,0.2758866695187556,-0.7429631775315289],[0.6093826507506597,0.29132799842396484,-0.7374149322453308],[0.6083652957050346,0.3041107249745613,-0.7330813965291799],[0.6171023800519778,0.3149468180953604,-0.7211055084422754],[0.599791669846374,0.4197048741395442,-0.681247217540305],[0.599791669846374,0.4197048741395442,-0.681247217540305],[0.6171023800519778,0.3149468180953604,-0.7211055084422754],[0.6198249919871296,0.31785500682216533,-0.7174853127041947],[0.6016528661586434,0.4617568348742575,-0.6517625749381422],[0.5977902610064991,0.4642255585373512,-0.6535605822312619],[0.5977902610064991,0.4642255585373512,-0.6535605822312619],[0.6016528661586434,0.4617568348742575,-0.6517625749381422],[0.6198249919871296,0.31785500682216533,-0.7174853127041947],[0.6287210553822683,0.3266653814182644,-0.7056908410216663],[0.6305304052605023,0.3281657254355958,-0.703376616537226],[0.6458552829177334,0.34220455570923053,-0.6824712415765978],[0.7192014850175501,0.3968687213471241,-0.570302062038048],[0.7209549239321897,0.39857015809125285,-0.5668913711964968],[0.7220707993962525,0.39978610389582636,-0.5646103362417769],[0.7274714507972283,0.40808787493074933,-0.5515882292158536],[0.7444285764207151,0.43223823973336,-0.5089166913360517],[0.7458556942997613,0.4337010008594449,-0.5055716814994061],[0.7580532078105137,0.4475563855218262,-0.4743928919227488],[0.7618071810738932,0.45156322390097564,-0.464478711766649],[0.7874963101656511,0.4777233081137752,-0.3893969727159107],[0.8043853750927039,0.46696888244135437,-0.36729311342365595],[0.8218392339902726,0.47042128705954916,-0.3213784158208501],[0.8217858933069527,0.47075274633103864,-0.32102927807830633],[0.7872570310574827,0.5752440380056996,-0.22208256075040028],[0.7793405655756654,0.5926164716597244,-0.20355343368703271],[0.7755232713264059,0.6001159074930522,-0.19602181818608935],[0.7701212749952547,0.6100428391490849,-0.18644290333130703],[0.6704641529316843,0.6797493070598901,-0.29735281936648683],[0.6957630901579274,0.6152588456518375,-0.370634962221672],[0.7256004339698352,0.5407201069643243,-0.42558874062559116],[0.6951962859123828,0.5664615222036463,-0.44251945484504596],[0.6540794411842219,0.6745845634223232,-0.3422217868757772],[0.6466486842544701,0.6954068088647781,-0.31345629573589473],[0.6466486842544701,0.6954068088647781,-0.31345629573589473],[0.6540794411842219,0.6745845634223232,-0.3422217868757772],[0.6951962859123828,0.5664615222036463,-0.44251945484504596],[0.7256004339698352,0.5407201069643243,-0.42558874062559116],[0.6957630901579274,0.6152588456518375,-0.370634962221672],[0.6898945759326173,0.6275430879358351,-0.36088107027483585],[0.6880217349687388,0.63116646194843,-0.35812705779109716],[0.6701144451598615,0.6625160402707514,-0.3346925854751719],[0.6536623373550283,0.6924299669879701,-0.3053953004559826],[0.6470077277758707,0.696446225224034,-0.31039274406709183],[0.6449319249905472,0.698976236443289,-0.3090227063106571],[0.6417613615155202,0.7037892300294589,-0.30466879485810044],[0.6402658571471294,0.7071923843921802,-0.2998975885687558],[0.6400583726396488,0.7089704077379826,-0.29611862583384235],[0.642382894935596,0.70855757252899,-0.2920451723723376],[0.5876311741491573,0.7807096420665329,-0.21256071592001413],[0.6201800163191853,0.7355911992195385,-0.2725478581627388],[0.628997614092263,0.7189969369512821,-0.2956440530788923],[0.6118077078334221,0.7256229181432631,-0.31490111035191554],[0.4998501452743695,0.7694773292047286,-0.39756065211379965],[0.49832940265472964,0.7685254177676795,-0.4012935193780164],[0.49291265288176045,0.765395795489027,-0.413770942523499],[0.4567995177408228,0.8280026302844189,-0.32518586198332133],[0.42791928017776554,0.864733233561129,-0.26290972676387836],[0.42532856038253736,0.8657381073495084,-0.2638051273304016],[0.4200716431335382,0.8682207885834855,-0.26406907601337937],[0.4179795934971295,0.8698912028414303,-0.26188232975721],[0.4179795934971295,0.8698912028414303,-0.26188232975721],[0.4200716431335382,0.8682207885834855,-0.26406907601337937],[0.42532856038253736,0.8657381073495084,-0.2638051273304016],[0.42791928017776554,0.864733233561129,-0.26290972676387836],[0.4567995177408228,0.8280026302844189,-0.32518586198332133],[0.49291265288176045,0.765395795489027,-0.413770942523499],[0.49832940265472964,0.7685254177676795,-0.4012935193780164],[0.4998501452743695,0.7694773292047286,-0.39756065211379965],[0.5006569485860168,0.7700878627376172,-0.39535718470358805],[0.5675696921503759,0.8031768032516363,-0.18102946520058558],[0.44759805382402895,0.8555104102493041,-0.2603035154737815],[0.47164311597755254,0.8190717326137756,-0.3266102692568811],[0.4392487681768812,0.8606091847913113,-0.2577059384413312],[0.4360134304049406,0.8625732220603168,-0.25663149668542123],[0.4363024017908992,0.8637945466671859,-0.25199046676317677],[0.43559975770350645,0.8651783194452112,-0.24843374700432042],[0.4312213177163805,0.869693898100393,-0.2401680635594413],[0.42573409430414594,0.8723210530208234,-0.24042974317598573],[0.42237460515960995,0.8736392136627698,-0.24156617575099554],[0.41535670518887957,0.8757030964027814,-0.24621716919260356],[0.4148334002709054,0.8757981886787742,-0.24676057774015892],[0.41126066639160797,0.8778137130574017,-0.24557636174417952],[0.3668829508139479,0.9194052312445344,-0.14174244657911927],[0.3624439552371174,0.9208744968350948,-0.14361246600064181],[0.3477703937266061,0.93267693766339,-0.09575741850155825],[0.34316674551691917,0.9360814912419171,-0.0773823398821394],[0.3300854080072725,0.9431363504267787,-0.039210303803068634],[0.3242825000255055,0.9450964465347025,-0.04041740868346412],[0.322688639950561,0.9456459764649793,-0.0403203279060713],[0.3218925748555983,0.9459581588407991,-0.039348849733612926],[0.3195115890879098,0.9469622551157032,-0.03427581982536014],[0.3195115890879098,0.9469622551157032,-0.03427581982536014],[0.3218925748555983,0.9459581588407991,-0.039348849733612926],[0.322688639950561,0.9456459764649793,-0.0403203279060713],[0.3242825000255055,0.9450964465347025,-0.04041740868346412],[0.3300854080072725,0.9431363504267787,-0.039210303803068634],[0.3361856293705085,0.9411123809177877,-0.03587072745300643],[0.3367835987567234,0.9409197271750904,-0.03531111186615118],[0.3367909145871287,0.9409213929909599,-0.03519676211695045],[0.33524735763019065,0.9417625197059546,-0.026316642625280783],[0.3327954568291931,0.9427579002327797,-0.021324292779105115],[0.3321283462945844,0.9430103488133357,-0.02054856731199932],[0.32857526135943016,0.9442605679884354,-0.02025530460742402],[0.3229099071870529,0.9464138107186338,0.005485501023887645],[0.31506981903497533,0.9487096701715563,0.0260954182998611],[0.3059947445235328,0.9504175701226028,0.05544058735462402],[0.3131701349516665,0.9479243582840308,0.05799894435387217],[0.29653703728773745,0.9483569895871607,0.11262684323814122],[0.2878869898216696,0.9492956286338168,0.12632850251682906],[0.28606769666716386,0.949885392536558,0.12602783013768276],[0.28423857472800745,0.9504079893161002,0.12622633037808947],[0.28203172379323815,0.9507287805943831,0.1287357468760406],[0.28203172379323815,0.9507287805943831,0.1287357468760406],[0.28423857472800745,0.9504079893161002,0.12622633037808947],[0.28606769666716386,0.949885392536558,0.12602783013768276],[0.2878869898216696,0.9492956286338168,0.12632850251682906],[0.29529108120538416,0.9465131821809682,0.1300614213293578],[0.2953284545930888,0.9463984743659877,0.13080914197940752],[0.2943584518841738,0.9459891527134022,0.13585884127627412],[0.29150347460120407,0.9460510601261448,0.14146772045107278],[0.29062387201972256,0.9461716888439634,0.14246719005590774],[0.28925898827035773,0.9465666356415198,0.1426213237741934],[0.28357086082210414,0.9484195184367905,0.14173208507863494],[0.2799498696549564,0.9497516241613863,0.13999972458180726],[0.279623536823272,0.9498884815668426,0.13972311992323383],[0.26890280339809,0.9507399225259271,0.15422348083233747],[0.2707544996355129,0.9519034761269611,0.14342863404680015],[0.2707544996355129,0.9519034761269611,0.14342863404680015],[0.26890280339809,0.9507399225259271,0.15422348083233747],[0.1799920005809075,0.9127168472202013,0.3668117180888562],[-0.000851663896023515,0.9864240366192358,0.1642159999769235],[-0.03752912855438547,0.9848014363906519,0.16958094053536],[-0.03179412712576055,0.9360114648217379,0.35053055673161443],[-0.025679257099452426,0.9220484721461927,0.3862216860401448],[-0.025679257099452426,0.9220484721461927,0.3862216860401448],[-0.03179412712576055,0.9360114648217379,0.35053055673161443],[-0.03752912855438547,0.9848014363906519,0.16958094053536],[-0.000851663896023515,0.9864240366192358,0.1642159999769235],[0.1799920005809075,0.9127168472202013,0.3668117180888562],[0.26890280339809,0.9507399225259271,0.15422348083233747],[0.279623536823272,0.9498884815668426,0.13972311992323383],[0.2799498696549564,0.9497516241613863,0.13999972458180726],[0.28357086082210414,0.9484195184367905,0.14173208507863494],[0.28925898827035773,0.9465666356415198,0.1426213237741934],[0.29062387201972256,0.9461716888439634,0.14246719005590774],[0.29150347460120407,0.9460510601261448,0.14146772045107278],[0.2943584518841738,0.9459891527134022,0.13585884127627412],[0.2953284545930888,0.9463984743659877,0.13080914197940752],[0.29529108120538416,0.9465131821809682,0.1300614213293578],[0.2878869898216696,0.9492956286338168,0.12632850251682906],[0.29653703728773745,0.9483569895871607,0.11262684323814122],[0.2960228030132338,0.946531114660785,0.1282550157896378],[0.30693056608736397,0.9450295730199932,0.1127507592832066],[0.30380466173461296,0.9444105521758641,0.12566398229881512],[0.30380466173461296,0.9444105521758641,0.12566398229881512],[0.30693056608736397,0.9450295730199932,0.1127507592832066],[0.2960228030132338,0.946531114660785,0.1282550157896378],[0.29653703728773745,0.9483569895871607,0.11262684323814122],[0.3131701349516665,0.9479243582840308,0.05799894435387217],[0.3059947445235328,0.9504175701226028,0.05544058735462402],[0.31506981903497533,0.9487096701715563,0.0260954182998611],[0.3229099071870529,0.9464138107186338,0.005485501023887645],[0.32857526135943016,0.9442605679884354,-0.02025530460742402],[0.3321283462945844,0.9430103488133357,-0.02054856731199932],[0.3327954568291931,0.9427579002327797,-0.021324292779105115],[0.33524735763019065,0.9417625197059546,-0.026316642625280783],[0.3367909145871287,0.9409213929909599,-0.03519676211695045],[0.3367835987567234,0.9409197271750904,-0.03531111186615118],[0.3361856293705085,0.9411123809177877,-0.03587072745300643],[0.3300854080072725,0.9431363504267787,-0.039210303803068634],[0.34316674551691917,0.9360814912419171,-0.0773823398821394],[0.3477703937266061,0.93267693766339,-0.09575741850155825],[0.3624439552371174,0.9208744968350948,-0.14361246600064181],[0.3668829508139479,0.9194052312445344,-0.14174244657911927],[0.41126066639160797,0.8778137130574017,-0.24557636174417952],[0.4148334002709054,0.8757981886787742,-0.24676057774015892],[0.41535670518887957,0.8757030964027814,-0.24621716919260356],[0.40644174478054096,0.8911720795686077,-0.20153767066509667],[0.3859697914797998,0.9129095848962004,-0.13275319156120816],[0.3855543141130538,0.9130598482389463,-0.1329269889927739],[0.352194226947242,0.9340378715220751,-0.05943467899758744],[0.352194226947242,0.9340378715220751,-0.05943467899758744],[0.3855543141130538,0.9130598482389463,-0.1329269889927739],[0.3859697914797998,0.9129095848962004,-0.13275319156120816],[0.40644174478054096,0.8911720795686077,-0.20153767066509667],[0.41535670518887957,0.8757030964027814,-0.24621716919260356],[0.42237460515960995,0.8736392136627698,-0.24156617575099554],[0.42573409430414594,0.8723210530208234,-0.24042974317598573],[0.4312213177163805,0.869693898100393,-0.2401680635594413],[0.43559975770350645,0.8651783194452112,-0.24843374700432042],[0.4363024017908992,0.8637945466671859,-0.25199046676317677],[0.4360134304049406,0.8625732220603168,-0.25663149668542123],[0.4392487681768812,0.8606091847913113,-0.2577059384413312],[0.47164311597755254,0.8190717326137756,-0.3266102692568811],[0.44759805382402895,0.8555104102493041,-0.2603035154737815],[0.5675696921503759,0.8031768032516363,-0.18102946520058558],[0.5006569485860168,0.7700878627376172,-0.39535718470358805],[0.4998501452743695,0.7694773292047286,-0.39756065211379965],[0.6118077078334221,0.7256229181432631,-0.31490111035191554],[0.628997614092263,0.7189969369512821,-0.2956440530788923],[0.6201800163191853,0.7355911992195385,-0.2725478581627388],[0.5876311741491573,0.7807096420665329,-0.21256071592001413],[0.642382894935596,0.70855757252899,-0.2920451723723376],[0.6400583726396488,0.7089704077379826,-0.29611862583384235],[0.6402658571471294,0.7071923843921802,-0.2998975885687558],[0.6417613615155202,0.7037892300294589,-0.30466879485810044],[0.6449319249905472,0.698976236443289,-0.3090227063106571],[0.6470077277758707,0.696446225224034,-0.31039274406709183],[0.6536623373550283,0.6924299669879701,-0.3053953004559826],[0.6701144451598615,0.6625160402707514,-0.3346925854751719],[0.6880217349687388,0.63116646194843,-0.35812705779109716],[0.6898945759326173,0.6275430879358351,-0.36088107027483585],[0.6957630901579274,0.6152588456518375,-0.370634962221672],[0.6704641529316843,0.6797493070598901,-0.29735281936648683],[0.7701212749952547,0.6100428391490849,-0.18644290333130703],[0.7596367577054992,0.6285388260596604,-0.16700580971397638],[0.759577916906429,0.6286415567032927,-0.16688673204826987],[0.7486902182658712,0.6476615025294336,-0.14141264163545864],[0.722817827019199,0.6863518053362642,-0.08034667544394171],[0.7281352734592595,0.682186765211105,-0.0666351327395557],[0.6600502486094674,0.7499496033281544,0.04369510016608391],[0.6489441124751498,0.757900620799733,0.0667696628358988],[0.6488028358353014,0.7579487718074912,0.06759097223436392],[0.6488390300234089,0.7578154603664276,0.06872875051898746],[0.647597329194529,0.7588053754317082,0.0695133184077507],[0.647597329194529,0.7588053754317082,0.0695133184077507],[0.6488390300234089,0.7578154603664276,0.06872875051898746],[0.6488028358353014,0.7579487718074912,0.06759097223436392],[0.6489441124751498,0.757900620799733,0.0667696628358988],[0.6600502486094674,0.7499496033281544,0.04369510016608391],[0.7281352734592595,0.682186765211105,-0.0666351327395557],[0.7343973001973783,0.6768181359264605,-0.05077220050217796],[0.7371144213011603,0.6743275857657709,-0.04409803833689848],[0.7456115799025435,0.6659865651664953,-0.02291870268943236],[0.7548486979109617,0.655898887203437,0.0003050039651987251],[0.7644013874502276,0.6441320103729186,0.02800842867976801],[0.7680367447000344,0.6391190083498121,0.04057649512374562],[0.7737935477613324,0.6301417919302569,0.06453578469233587],[0.7801956600457157,0.6175086669756149,0.09988882948472828],[0.7187952974403427,0.6784094228622661,0.15196702059768233],[0.6638282512908403,0.7438703407253001,0.0773884292214975],[0.680204984845105,0.7310045605147796,0.05434621512547693],[0.657739889836326,0.7492622132759185,0.07735872979159983],[0.6562453111834454,0.7505653232580389,0.0774195522610301],[0.6554001639199496,0.751005279658037,0.08026017106546164],[0.6531905079094779,0.7524845560245037,0.08431579520803965],[0.650373630141033,0.7545745784931898,0.0873575795738402],[0.6485412914023018,0.7560157962441075,0.08851163299602438],[0.6434901533565969,0.7608129843507315,0.08416665240127523],[0.6423342065184987,0.7619885915175252,0.08234168770063525],[0.6423342065184987,0.7619885915175252,0.08234168770063525],[0.6434901533565969,0.7608129843507315,0.08416665240127523],[0.6485412914023018,0.7560157962441075,0.08851163299602438],[0.650373630141033,0.7545745784931898,0.0873575795738402],[0.6531905079094779,0.7524845560245037,0.08431579520803965],[0.6554001639199496,0.751005279658037,0.08026017106546164],[0.6562453111834454,0.7505653232580389,0.0774195522610301],[0.657739889836326,0.7492622132759185,0.07735872979159983],[0.680204984845105,0.7310045605147796,0.05434621512547693],[0.6638282512908403,0.7438703407253001,0.0773884292214975],[0.7187952974403427,0.6784094228622661,0.15196702059768233],[0.7105030530301671,0.6853811466530862,0.15949324577333135],[0.7088150801829785,0.686739161394575,0.1611536729717127],[0.7053058262084575,0.689495232645917,0.16474227045587955],[0.70517641567687,0.6895947411363388,0.16487970090410842],[0.7050914493998365,0.6896608649717726,0.1649664793514865],[0.6930322037833979,0.6986388373706179,0.177792405452421],[0.6885119038406995,0.7018111678583604,0.18279070802133204],[0.6728006808619331,0.7128816111471105,0.19783592272390574],[0.49440332047612545,0.7886801935572518,0.36544344157841624],[0.4766706691553649,0.7912046766272387,0.38311908442436454],[0.4718857216474515,0.7949900429901147,0.3812016490675762],[0.23622645654645802,0.8558315421947752,0.46016239808573806],[0.23486847123596474,0.8551162047365265,0.4621829482102079],[0.205863365012077,0.8373832323172703,0.5063690326034809],[0.2042722317263311,0.8362998357712867,0.5087980346212659],[0.1905527672027026,0.8268141322111974,0.5292145441002519],[0.18505617863876683,0.8228409886730848,0.5372959315936772],[0.12765716226400087,0.7710553538543004,0.6238407570969713],[0.10910313740073867,0.7619795057478751,0.638344529411461],[0.09005156847425833,0.7514209934305521,0.6536491456792155],[0.07762999580757168,0.7438121935701436,0.663865200509326],[0.05330190495889883,0.7273012850972915,0.6842453855332756],[0.03108286879015073,0.7098936487799448,0.7036226706763156],[0.014925069473852158,0.7075039308414508,0.7065517887211783],[-0.025330628885103554,0.9147679497918051,0.4031847681572097],[-0.02718131139353041,0.9154193167027177,0.4015826825430319],[-0.027543335898135738,0.9157562971118632,0.40078893316504083],[-0.027543335898135738,0.9157562971118632,0.40078893316504083],[-0.02718131139353041,0.9154193167027177,0.4015826825430319],[-0.025330628885103554,0.9147679497918051,0.4031847681572097],[0.014925069473852158,0.7075039308414508,0.7065517887211783],[-0.008735543933121141,0.7027397034661687,0.7113934210016803],[-0.018304695126758246,0.700346354526387,0.7135684422940217],[-0.03833526326053502,0.6944143274920296,0.7185535118309129],[-0.23891672546864598,0.535509294022962,0.8100299959300078],[-0.29270968329273706,0.5250479956616404,0.7991530789269098],[-0.44274984128580225,0.7088413524293438,0.5491051949558808],[-0.4501234441193556,0.7159331365949663,0.5336933848001331],[-0.4604859461559627,0.7251338830448092,0.5119897899892192],[-0.4726652336931558,0.7352549161973951,0.48578573987443874],[-0.506017829770644,0.7591433787671978,0.40944753806578255],[-0.6639766422589551,0.7143590877889906,0.22096631469028197],[-0.16938248845149206,0.9788501977732889,-0.11472516256329089],[-0.1651409563122291,0.9789264208000623,-0.12013129154330246],[-0.16435119356401695,0.9789955153368127,-0.12065018078930374],[-0.16205298112902405,0.9790336768690443,-0.12341754682165733],[-0.16179975119308962,0.9790089254255585,-0.12394500575233995],[-0.15211798868531756,0.9805390005426188,-0.12411037802382116],[-0.14872280725137585,0.9809325898804028,-0.12511107350588827],[-0.1465327714338116,0.9810952979821888,-0.12641267014491392],[-0.1465327714338116,0.9810952979821888,-0.12641267014491392],[-0.14872280725137585,0.9809325898804028,-0.12511107350588827],[-0.15211798868531756,0.9805390005426188,-0.12411037802382116],[-0.16179975119308962,0.9790089254255585,-0.12394500575233995],[-0.16205298112902405,0.9790336768690443,-0.12341754682165733],[-0.16435119356401695,0.9789955153368127,-0.12065018078930374],[-0.1651409563122291,0.9789264208000623,-0.12013129154330246],[-0.16938248845149206,0.9788501977732889,-0.11472516256329089],[-0.6639766422589551,0.7143590877889906,0.22096631469028197],[-0.691498809381307,0.6974314530039998,0.18819873800045656],[-0.6991777401324636,0.6921055729463085,0.17927733710629296],[-0.19130267000627063,0.9711106323873904,-0.1426444114314849],[-0.1750812249880687,0.9732174492743066,-0.1489777200949514],[-0.1750812249880687,0.9732174492743066,-0.1489777200949514],[-0.19130267000627063,0.9711106323873904,-0.1426444114314849],[-0.6991777401324636,0.6921055729463085,0.17927733710629296],[-0.7294198003590201,0.6686060189465729,0.14461240013436752],[-0.8494502546142688,0.40392582374659997,0.33952642584397535],[-0.8511353553615493,0.3892467123477708,0.35221528044652034],[-0.8523102851170821,0.36400079872968477,0.37559365863628447],[-0.7769014574556673,0.14220743982754655,0.6133524023438358],[-0.6834054581593308,0.05495709144867116,0.7279675115398608],[-0.6414562763647746,0.029672111227124244,0.7665855538213352],[-0.5777461135341666,0.0004339130385441275,0.8162164173891878],[-0.5603819713992,-0.02452509715334045,0.8278711045448836],[-0.6075018009662396,-0.1361831442872478,0.782557162790562],[-0.6826169936637032,-0.48070130586740967,0.5504182904836056],[-0.9430394871987869,0.1513404526110712,0.2962643970971286],[-0.9432288809135427,0.15427878142568266,0.29413829368579736],[-0.9431848863690677,0.15486053372099362,0.29397361313665216],[-0.9229166458869515,0.14694874795818483,0.355852399483692],[-0.9235455685204121,0.1474794058915757,0.3539963385462857],[-0.9283743997949914,0.15226912229618464,0.33902077841990613],[-0.9418838745297523,0.16257692311868624,0.2939787593859165],[-0.9412573828276405,0.16600034805753075,0.29407214032825263],[-0.9409970096490867,0.16848610956409185,0.2934911561111057],[-0.9410831728077181,0.16881652387069473,0.2930246459367774],[-0.9416783472639696,0.16979022862849164,0.2905394440630795],[-0.9416783472639696,0.16979022862849164,0.2905394440630795],[-0.9410831728077181,0.16881652387069473,0.2930246459367774],[-0.9409970096490867,0.16848610956409185,0.2934911561111057],[-0.9412573828276405,0.16600034805753075,0.29407214032825263],[-0.9418838745297523,0.16257692311868624,0.2939787593859165],[-0.9283743997949914,0.15226912229618464,0.33902077841990613],[-0.9235455685204121,0.1474794058915757,0.3539963385462857],[-0.9229166458869515,0.14694874795818483,0.355852399483692],[-0.9431848863690677,0.15486053372099362,0.29397361313665216],[-0.9432288809135427,0.15427878142568266,0.29413829368579736],[-0.9430394871987869,0.1513404526110712,0.2962643970971286],[-0.6826169936637032,-0.48070130586740967,0.5504182904836056],[-0.6576306058561878,-0.5549395460422991,0.5094743236705757],[-0.6462887029629875,-0.5791336445481235,0.4969055586072943],[-0.6418358528213671,-0.5877629336421718,0.4925256052931832],[-0.644916666119126,-0.5880594219335852,0.48812765752099074],[-0.9604497839761279,0.07857462661624326,0.2671371193082818],[-0.9502889651096399,0.1447175999155765,0.2756949384111447],[-0.9486430362903303,0.15560259167593957,0.2754346077775883],[-0.9486430362903303,0.15560259167593957,0.2754346077775883],[-0.9502889651096399,0.1447175999155765,0.2756949384111447],[-0.9604497839761279,0.07857462661624326,0.2671371193082818],[-0.644916666119126,-0.5880594219335852,0.48812765752099074],[-0.895998744778249,-0.4439704395827069,-0.008746321086035317],[-0.9079096953965086,-0.4164095444465346,-0.0479903771484306],[-0.9324443961200499,-0.3285577759844964,-0.1503237705236166],[-0.9614214589885296,-0.14637271009990496,-0.23290300112788676],[-0.960917525997035,0.03305569445925108,-0.27485419643067904],[-0.9462725633266205,0.15884594180932687,-0.2816668291900471],[-0.9309229530672947,0.2376643292404583,-0.27730510644261624],[-0.9218934450781177,0.2746296941776948,-0.2732965550420743],[-0.9025348059434332,0.3411245358019183,-0.2628021596840013],[-0.8393837938763598,0.4978931090691561,-0.2180304990573066],[-0.30821654123530196,0.5828233155475967,-0.751877348084815],[-0.2915517963072134,0.5827237411888053,-0.7585714149142185],[-0.25336887209108927,0.5826833662722227,-0.7721944763626325],[-0.19970257066465236,0.5825501594243019,-0.7878795561662012],[-0.16733363798718034,0.5597685096715217,-0.8115778885468103],[-0.026477660240653646,0.4572038529633708,-0.8889676992690054],[-0.01758987743828173,0.4414846762216535,-0.897096358744794],[0.007110697876114863,0.3960967544176463,-0.9181812452427469],[0.0264749663336295,0.35657660463795526,-0.9338908936179326],[0.09212567587618929,0.20425575037852894,-0.9745729568799143],[0.22607352219622537,0.22563920363656448,-0.9476168594659182],],
[[0.49798819793306087,0.2247208379543839,-0.8375609229831954],[0.5023677459716795,0.17010990803807097,-0.8477554287615108],[0.5023677459716795,0.17010990803807097,-0.8477554287615108],[0.49798819793306087,0.2247208379543839,-0.8375609229831954],[0.497697311627363,0.2559240282083046,-0.8287341417997274],[0.4847737259544815,0.2557357792276977,-0.8364171482262972],[0.4732833618747218,0.2562933301774439,-0.8428028169620204],[0.4732833618747218,0.2562933301774439,-0.8428028169620204],[0.4608768583588173,0.25686653858664854,-0.849477546956846],[0.45424629717352494,0.25672800659534667,-0.853083250412128],[0.45295014797034694,0.25678581822670027,-0.8537547698322305],[0.4613591590515209,0.16231381373329223,-0.8722396185857574],[0.4574154165694439,0.16472936365060342,-0.8738623309399882],[0.3157415689335618,0.1485288880897457,-0.9371480304894187],[0.09990473929122162,0.15186821442482773,-0.9833387455574847],[0.10182653228290471,0.12667424054493867,-0.9867041066629862],[0.10713541604422477,0.06630475480703622,-0.9920310892905574],[-0.2754047769605532,0.05982442846641183,-0.9594650835679093],[-0.27928817842006454,0.0555771645126634,-0.9585975652898012],[-0.22992456659324864,0.04049660900287872,-0.9723655271224781],[-0.2401006973697849,0.03870215212115847,-0.9699761845239984],[-0.2768780466200401,0.023609725516205375,-0.9606149739416519],[-0.2811497341725847,0.026430955183024966,-0.959299865309486],[-0.28645100555075514,0.023930140458106118,-0.957795995918033],[-0.28645100555075514,0.023930140458106118,-0.957795995918033],[-0.2811497341725847,0.026430955183024966,-0.959299865309486],[-0.2768780466200401,0.023609725516205375,-0.9606149739416519],[-0.2401006973697849,0.03870215212115847,-0.9699761845239984],[-0.22992456659324864,0.04049660900287872,-0.9723655271224781],[-0.27928817842006454,0.0555771645126634,-0.9585975652898012],[-0.2754047769605532,0.05982442846641183,-0.9594650835679093],[0.10713541604422477,0.06630475480703622,-0.9920310892905574],[0.10182653228290471,0.12667424054493867,-0.9867041066629862],[0.09990473929122162,0.15186821442482773,-0.9833387455574847],[0.3157415689335618,0.1485288880897457,-0.9371480304894187],[0.4574154165694439,0.16472936365060342,-0.8738623309399882],[0.4613591590515209,0.16231381373329223,-0.8722396185857574],[0.45295014797034694,0.25678581822670027,-0.8537547698322305],[0.45218485821428944,0.2568664530461131,-0.854136101157908],[0.4485942531556491,0.25702177871823056,-0.8559807248415366],[0.44625429190794996,0.256970308061227,-0.8572183897517904],[0.4236893090827184,0.25787550164763406,-0.868324590817852],[0.42259944722108,0.2577807289520141,-0.8688836533100425],[0.22607352219622537,0.22563920363656448,-0.9476168594659182],[0.09212567587618929,0.20425575037852894,-0.9745729568799143],[0.0264749663336295,0.35657660463795526,-0.9338908936179326],[0.007110697876114863,0.3960967544176463,-0.9181812452427469],[-0.01758987743828173,0.4414846762216535,-0.897096358744794],[-0.026477660240653646,0.4572038529633708,-0.8889676992690054],[-0.16733363798718034,0.5597685096715217,-0.8115778885468103],[-0.19970257066465236,0.5825501594243019,-0.7878795561662012],[-0.25336887209108927,0.5826833662722227,-0.7721944763626325],[-0.2915517963072134,0.5827237411888053,-0.7585714149142185],[-0.30821654123530196,0.5828233155475967,-0.751877348084815],[-0.31955394180580443,0.09950358242880576,-0.9423291969159221],[-0.31955394180580443,0.09950358242880576,-0.9423291969159221],[-0.30821654123530196,0.5828233155475967,-0.751877348084815],[-0.8393837938763598,0.4978931090691561,-0.2180304990573066],[-0.9025348059434332,0.3411245358019183,-0.2628021596840013],[-0.9218934450781177,0.2746296941776948,-0.2732965550420743],[-0.9309229530672947,0.2376643292404583,-0.27730510644261624],[-0.9462725633266205,0.15884594180932687,-0.2816668291900471],[-0.960917525997035,0.03305569445925108,-0.27485419643067904],[-0.9614214589885296,-0.14637271009990496,-0.23290300112788676],[-0.9324443961200499,-0.3285577759844964,-0.1503237705236166],[-0.9079096953965086,-0.4164095444465346,-0.0479903771484306],[-0.895998744778249,-0.4439704395827069,-0.008746321086035317],[-0.644916666119126,-0.5880594219335852,0.48812765752099074],[-0.6418358528213671,-0.5877629336421718,0.4925256052931832],[-0.3896418285984884,-0.7419904715423491,0.5455542003749845],[-0.31517123986660134,-0.7309788419548209,0.6052578146338453],[0.10730097173835171,-0.6381029087994003,0.7624376559730964],[0.3277102885640344,-0.8472705360422187,0.418017470357411],[0.3296627681867275,-0.8493905839213656,0.4121384418095281],[0.3296627681867275,-0.8493905839213656,0.4121384418095281],[0.3277102885640344,-0.8472705360422187,0.418017470357411],[0.33609060773092775,-0.8476688090280282,0.4104883598788885],[0.33577566863237795,-0.8481317968342682,0.4097891598775585],[0.3358896639218396,-0.8484616182789142,0.40901224428860317],[0.3368589268316164,-0.8492168954480032,0.4066407848451839],[0.3368589268316164,-0.8492168954480032,0.4066407848451839],[0.3358896639218396,-0.8484616182789142,0.40901224428860317],[0.33577566863237795,-0.8481317968342682,0.4097891598775585],[0.33609060773092775,-0.8476688090280282,0.4104883598788885],[0.336123906658707,-0.8476378241583602,0.41052507649176523],[0.33869597885645947,-0.8458401903242667,0.412115768126716],[0.34254442339947394,-0.8438154463911598,0.41308450761267923],[0.34276605042068753,-0.8437523152319615,0.4130296178480516],[0.3442844632855912,-0.8419847820766675,0.4153671088223757],[0.34461378631620726,-0.8403752354987767,0.4183429237374322],[0.4569285554396394,-0.7368547137015783,0.4982583929244037],[0.4572622585035013,-0.7381554018327017,0.4960220052512589],[0.4574243524388274,-0.7390075054585651,0.4946017273239433],[0.5692003270740621,-0.7330888277176977,0.3722791403426635],[0.5692003270740621,-0.7330888277176977,0.3722791403426635],[0.4574243524388274,-0.7390075054585651,0.4946017273239433],[0.4572622585035013,-0.7381554018327017,0.4960220052512589],[0.5657157794743028,-0.7289248844689584,0.3855310229484751],[0.5662217476567276,-0.7288687104694854,0.3848939274386003],[0.5821520473484006,-0.7279103920861573,0.3622781457127137],[0.5822101079252607,-0.7278743993395169,0.3622571586812243],[0.5837758582315863,-0.728318223172033,0.3588290862534802],[0.5839649478919173,-0.7282921659965443,0.358574205125874],[0.5873568798381862,-0.7270260832271535,0.3555910150919661],[0.5883259080578273,-0.726501579138738,0.3550606728671217],[0.5883259080578273,-0.726501579138738,0.3550606728671217],[0.5873568798381862,-0.7270260832271535,0.3555910150919661],[0.5839649478919173,-0.7282921659965443,0.358574205125874],[0.5837758582315863,-0.728318223172033,0.3588290862534802],[0.5822101079252607,-0.7278743993395169,0.3622571586812243],[0.5821520473484006,-0.7279103920861573,0.3622781457127137],[0.5662217476567276,-0.7288687104694854,0.3848939274386003],[0.5657157794743028,-0.7289248844689584,0.3855310229484751],[0.4572622585035013,-0.7381554018327017,0.4960220052512589],[0.4569285554396394,-0.7368547137015783,0.4982583929244037],[0.4445781871992041,-0.6935214085550444,0.5669023649117161],[0.5851634236954112,-0.7195855568643065,0.37387216253868216],[0.5851634236954112,-0.7195855568643065,0.37387216253868216],[0.4445781871992041,-0.6935214085550444,0.5669023649117161],[0.4569285554396394,-0.7368547137015783,0.4982583929244037],[0.34461378631620726,-0.8403752354987767,0.4183429237374322],[0.3442844632855912,-0.8419847820766675,0.4153671088223757],[0.34276605042068753,-0.8437523152319615,0.4130296178480516],[0.34254442339947394,-0.8438154463911598,0.41308450761267923],[0.33869597885645947,-0.8458401903242667,0.412115768126716],[0.336123906658707,-0.8476378241583602,0.41052507649176523],[0.33609060773092775,-0.8476688090280282,0.4104883598788885],[0.3277102885640344,-0.8472705360422187,0.418017470357411],[0.10730097173835171,-0.6381029087994003,0.7624376559730964],[0.12701822823904935,-0.6163942255998477,0.7771258124281916],[0.14897771495315357,-0.5869057889585486,0.7958311600674357],[0.19237393210187398,-0.4962496178469355,0.8465982441715988],[0.38880431760092343,-0.5616227451080508,0.7303499810311339],[0.5550141479172649,-0.49474302050648394,0.6687216455834171],[0.6006306491852732,-0.5161686435003283,0.6105839456833992],[0.6214267684994484,-0.5249143051692958,0.5816302464805009],[0.637295685437682,-0.5315416712572218,0.5579584760890319],[0.6582719294421696,-0.5396676751567943,0.5248207954143435],[0.6607152527399117,-0.5404125817444584,0.5209698612099587],[0.724251147782432,-0.5523236723322924,0.41279393880869975],[0.8235022869309648,-0.4528981135096749,0.3416537460629525],[0.8309232366312304,-0.44349864471758976,0.3359695327852537],[0.8258562294889178,-0.5246545763582635,0.20663751769869665],[0.8258562294889178,-0.5246545763582635,0.20663751769869665],[0.8309232366312304,-0.44349864471758976,0.3359695327852537],[0.8311608191500719,-0.44318507682529557,0.33579559316515534],[0.8354444547934247,-0.43762066008677786,0.3324465683687084],[0.8458730091162712,-0.42305904641379577,0.32483826082534467],[0.8495371670085289,-0.42294006763856945,0.3152908198108618],[0.851412773328725,-0.4227403406226058,0.31046238713082885],[0.8680408288868049,-0.4205150905361792,0.26395487875176266],[0.8701705819874856,-0.42047075054072425,0.25691926004735505],[0.874746244874829,-0.4205027256305141,0.24082455193500177],[0.8954770400293461,-0.4193749842348888,0.1491492319063954],[0.901544094598228,-0.4171469791195097,0.11492016057476034],[0.9013068830367109,-0.4178434411828026,0.11424868161673599],[0.8979455469121499,-0.4275666733903869,0.10430980100890981],[0.8894788997027531,-0.45001887646003996,0.07943738297063346],[0.8789576533458837,-0.4739959163875507,0.05254821474249543],[0.8028181355734573,-0.5941372420763804,0.0498395302167907],[0.7961660338127583,-0.6029852236545618,0.050283860801652966],[0.7813376231617638,-0.6220657390253869,0.05045527685708454],[0.7805883320448894,-0.6229321539862099,0.05135550024562378],[0.7744289543774091,-0.6298400839137581,0.05967632124572548],[0.7634554190442692,-0.6416946464665026,0.07323799443027915],[0.6800193787384388,-0.710379082222328,0.18148058871722555],[0.5608783684656025,-0.8132747751357835,0.15491802966473792],[0.5254847425627407,-0.8368922662682103,0.15322245264395526],[0.518002731296922,-0.8415401029987816,0.15324302729236675],[0.45794262113823286,-0.868899047677145,0.18789092764366142],[0.43999859097922617,-0.8788821236287305,0.18430261176160395],[0.31265548632950746,-0.9346927274587639,0.1691036726501116],[0.2774703237647125,-0.9456741652637726,0.16944200359584044],[-0.2728013840213773,-0.8892510030986527,0.36716761617013716],[-0.2403601875183011,-0.9020256416353194,0.35857596418131205],[-0.2403601875183011,-0.9020256416353194,0.35857596418131205],[-0.2728013840213773,-0.8892510030986527,0.36716761617013716],[-0.3393175513452777,-0.8396371661013144,0.4241144051437048],[-0.1197162199348051,-0.9836592358428429,-0.13447131450832112],[-0.10551028057172022,-0.9822022728333514,-0.15539072023346717],[-0.07491260988232147,-0.9778224916436024,-0.19557933356189883],[-0.015196659162830146,-0.9631886363220218,-0.2683965581195349],[0.035797797111940956,-0.9443548316226377,-0.3269747233547449],[0.3408237135871601,-0.7465764062491831,-0.5713692902919376],[0.31856548698198833,-0.7071780265868319,-0.6312014489976102],[-0.07190115648022272,-0.7030860818648955,-0.7074603771128644],[-0.13590730895006534,-0.6995265170252837,-0.7015638640583101],[-0.14438108255663135,-0.6929203272941902,-0.7064103078397764],[-0.145594989313182,-0.6910830259938561,-0.707959285743234],[-0.14896289737866997,-0.6882294141211375,-0.7100354418921832],[-0.15307644649988475,-0.6893402065704536,-0.7080802787342496],[-0.15307644649988475,-0.6893402065704536,-0.7080802787342496],[-0.14896289737866997,-0.6882294141211375,-0.7100354418921832],[-0.145594989313182,-0.6910830259938561,-0.707959285743234],[-0.14438108255663135,-0.6929203272941902,-0.7064103078397764],[-0.13590730895006534,-0.6995265170252837,-0.7015638640583101],[-0.07190115648022272,-0.7030860818648955,-0.7074603771128644],[0.31856548698198833,-0.7071780265868319,-0.6312014489976102],[0.29308231224438575,-0.6582413466394244,-0.6934126389270691],[0.27605900718761595,-0.6200405287122578,-0.7343985071504514],[0.276915060221683,-0.41859890833006974,-0.8649236980030641],[0.27726709399227667,-0.40494143402902566,-0.8712895004506793],[0.27789011986083995,-0.39558336887288453,-0.8753804199060586],[0.2795049072707094,-0.3459457326288504,-0.8956553784171009],[0.2793660316851694,-0.30558244536664403,-0.9102603964933457],[0.2790672803932799,-0.2994456978094414,-0.9123890217869323],[-0.0838237114680045,-0.3778188832139302,-0.9220772618835731],[-0.08787818429654244,-0.38184932552948886,-0.9200372369189289],[-0.08920938911325317,-0.3823045621766283,-0.9197200153486803],[-0.09859171446805264,-0.39096753980960897,-0.9151087676628784],[-0.10637948624353341,-0.38757986812396106,-0.9156774818305705],[-0.11052925929192915,-0.3869500955888512,-0.9154522960614369],[-0.12156685435601358,-0.3881700651721885,-0.9135346191722582],[-0.12550433317526707,-0.3896776827338608,-0.9123595595670603],[-0.12787960759266537,-0.39487603321818787,-0.9097910333432698],[-0.12884569190425788,-0.402426417637701,-0.9063397630386739],[-0.12668066809935394,-0.41398247508296615,-0.9014269347285352],[-0.12582862336744033,-0.41574575469088915,-0.9007344919552921],[-0.10646997011183079,-0.4189213447567063,-0.9017588659789372],[-0.1008570695157474,-0.4183338448186938,-0.9026763793342024],[-0.09835650188677555,-0.4174369852210582,-0.9033672353512445],[-0.09704593013620501,-0.41851390398098826,-0.9030106309554672],[-0.09205608514392824,-0.42082917669861036,-0.9024569137787929],[-0.09205608514392824,-0.42082917669861036,-0.9024569137787929],[-0.09704593013620501,-0.41851390398098826,-0.9030106309554672],[-0.09835650188677555,-0.4174369852210582,-0.9033672353512445],[-0.1008570695157474,-0.4183338448186938,-0.9026763793342024],[-0.10646997011183079,-0.4189213447567063,-0.9017588659789372],[-0.12582862336744033,-0.41574575469088915,-0.9007344919552921],[-0.12668066809935394,-0.41398247508296615,-0.9014269347285352],[-0.12884569190425788,-0.402426417637701,-0.9063397630386739],[-0.12787960759266537,-0.39487603321818787,-0.9097910333432698],[-0.12550433317526707,-0.3896776827338608,-0.9123595595670603],[-0.12156685435601358,-0.3881700651721885,-0.9135346191722582],[-0.11052925929192915,-0.3869500955888512,-0.9154522960614369],[-0.10637948624353341,-0.38757986812396106,-0.9156774818305705],[-0.09859171446805264,-0.39096753980960897,-0.9151087676628784],[-0.08920938911325317,-0.3823045621766283,-0.9197200153486803],[-0.08787818429654244,-0.38184932552948886,-0.9200372369189289],[-0.0838237114680045,-0.3778188832139302,-0.9220772618835731],[0.2790672803932799,-0.2994456978094414,-0.9123890217869323],[0.2759735512894916,-0.2237641690576707,-0.9347556876717021],[0.4581413305633115,-0.1336912510110833,-0.8787679845287777],[0.49220721357049185,-0.11925975655797014,-0.8622697776072789],[0.5310879481393549,-0.1044592067866929,-0.8408530581847371],[0.5038781170051597,0.11306980690396363,-0.8563422574940671],[0.497556634830901,0.1184802971604666,-0.8593019343167552],[0.49472384656454865,0.12434269535954123,-0.8601088359917607],[0.4905583412224173,0.1289032186309328,-0.8618216022377811],[0.49249677084281596,0.134304450996154,-0.8598890888667099],[0.4933407960904534,0.1436558874259279,-0.8578915111601857],[0.4914222088250401,0.15535640942839302,-0.8569530901531521],[0.49089900515303014,0.15668530450195356,-0.8570110163194493],[0.4853153039907242,0.15950731410202895,-0.8596664890876855],[0.47762219630299413,0.16103691187396987,-0.863680583672459],[0.4715853189435937,0.16039782240715553,-0.8671100423382904],[0.4654772043678084,0.15774401320848783,-0.8708890850796157],[0.4643989943650183,0.1546124622332992,-0.8720255504025765],[0.4634735737054508,0.14450456975833656,-0.87424863499788],[0.4634735737054508,0.14450456975833656,-0.87424863499788],[0.4643989943650183,0.1546124622332992,-0.8720255504025765],[0.4654772043678084,0.15774401320848783,-0.8708890850796157],[0.4715853189435937,0.16039782240715553,-0.8671100423382904],[0.47762219630299413,0.16103691187396987,-0.863680583672459],[0.4853153039907242,0.15950731410202895,-0.8596664890876855],[0.49089900515303014,0.15668530450195356,-0.8570110163194493],[0.4914222088250401,0.15535640942839302,-0.8569530901531521],[0.4933407960904534,0.1436558874259279,-0.8578915111601857],[0.49249677084281596,0.134304450996154,-0.8598890888667099],[0.4905583412224173,0.1289032186309328,-0.8618216022377811],[0.49472384656454865,0.12434269535954123,-0.8601088359917607],[0.497556634830901,0.1184802971604666,-0.8593019343167552],[0.5038781170051597,0.11306980690396363,-0.8563422574940671],[0.5310879481393549,-0.1044592067866929,-0.8408530581847371],[0.6083274351594015,-0.07609239276249256,-0.790030176256618],[0.6549547092476697,-0.05263952807493415,-0.7538324806734906],[0.7099946642101777,-0.01875716090666957,-0.7039572044576279],[0.6581732389314665,0.11780237559486878,-0.743593025692595],[0.6407962394498422,0.1723877292414101,-0.7481060421584167],[0.6231106987439489,0.231883948395844,-0.7469691369709872],[0.6096276015428276,0.2712220615448161,-0.7448441318615053],[0.497697311627363,0.2559240282083046,-0.8287341417997274],[0.49798819793306087,0.2247208379543839,-0.8375609229831954],],
[[-0.07491260988232147,-0.9778224916436024,-0.19557933356189883],[-0.10551028057172022,-0.9822022728333514,-0.15539072023346717],[-0.1197162199348051,-0.9836592358428429,-0.13447131450832112],[-0.3393175513452777,-0.8396371661013144,0.4241144051437048],[-0.2728013840213773,-0.8892510030986527,0.36716761617013716],[0.2774703237647125,-0.9456741652637726,0.16944200359584044],[0.31265548632950746,-0.9346927274587639,0.1691036726501116],[0.39673708137462266,-0.9146108948572986,-0.07801666021227532],[0.40517995115479233,-0.9087266406074241,-0.10022524548508513],[0.4109893584101255,-0.9046015568482642,-0.11306533784202047],[0.42356174400042157,-0.8935052278556543,-0.14914374547374318],[0.42356174400042157,-0.8935052278556543,-0.14914374547374318],[0.4109893584101255,-0.9046015568482642,-0.11306533784202047],[0.40517995115479233,-0.9087266406074241,-0.10022524548508513],[0.39673708137462266,-0.9146108948572986,-0.07801666021227532],[0.31265548632950746,-0.9346927274587639,0.1691036726501116],[0.43999859097922617,-0.8788821236287305,0.18430261176160395],[0.45794262113823286,-0.868899047677145,0.18789092764366142],[0.518002731296922,-0.8415401029987816,0.15324302729236675],[0.5181988527084099,-0.8415829773298361,0.1523418567575453],[0.6666797106099844,-0.7421436274526435,-0.06899999777115375],[0.6738617248607228,-0.7340166411450475,-0.0844390092899855],[0.678677058887469,-0.7294861718192904,-0.08513151510628462],[0.6669249628882533,-0.7382336215215181,-0.10110496492124374],[0.6839801336381611,-0.7239073462539705,-0.09016280179684616],[0.6842329226283205,-0.7237064527774162,-0.08985698525900054],[0.6897176975679429,-0.7176616128418102,-0.09618371543493051],[0.6917240520977123,-0.7158562277517382,-0.09522445556984253],[0.7057124432973647,-0.6990379215466963,-0.11539467758496841],[0.7080003179346898,-0.6963325009509372,-0.11771405151379084],[0.7145852826721022,-0.6880130601207458,-0.1265144374833126],[0.7558701730790509,-0.6257402376837587,-0.1926380969406591],[0.7522893182962291,-0.6228484521302021,-0.21475704239071258],[0.8321449459024639,-0.543557662031346,-0.10990840302725981],[0.8352020581525501,-0.5388940183146791,-0.10968481700947857],[0.7831765735350699,-0.5801550884918784,-0.22372869275720603],[0.807880375196365,-0.5601061904005545,-0.18333127078476877],[0.8282104096609907,-0.5400279935660363,-0.14979079909732512],[0.8455605598600676,-0.5197629224332007,-0.12195837024504538],[0.8459005765158669,-0.5189477836037264,-0.12306669956939646],[0.8459248420956715,-0.5180651174891496,-0.12656893602447172],[0.7574844052008166,-0.5715746280805072,-0.3154676218127544],[0.8630329513780935,-0.47556529703020645,-0.17032842715233687],[0.8727693586663166,-0.4515582415520747,-0.1853882441245525],[0.8817511594619394,-0.4252412583746085,-0.20416847201148686],[0.8817511594619394,-0.4252412583746085,-0.20416847201148686],[0.8727693586663166,-0.4515582415520747,-0.1853882441245525],[0.8630329513780935,-0.47556529703020645,-0.17032842715233687],[0.7574844052008166,-0.5715746280805072,-0.3154676218127544],[0.8459248420956715,-0.5180651174891496,-0.12656893602447172],[0.8459005765158669,-0.5189477836037264,-0.12306669956939646],[0.8455605598600676,-0.5197629224332007,-0.12195837024504538],[0.845238184552405,-0.5218476989420415,-0.11509730875850757],[0.8474518505508027,-0.5187972108523842,-0.11258248091868796],[0.8493465288835248,-0.5164573591123793,-0.1090058259551967],[0.8515289128156,-0.5142879609290194,-0.10201178305741908],[0.8516640582796333,-0.5142227750324857,-0.1012090384923948],[0.8517322943791492,-0.5141223621824468,-0.10114492283635129],[0.8533204109079306,-0.511625587665918,-0.1004168032424066],[0.8538658003745287,-0.510706869960155,-0.10045739358686755],[0.8538658003745287,-0.510706869960155,-0.10045739358686755],[0.8533204109079306,-0.511625587665918,-0.1004168032424066],[0.8517322943791492,-0.5141223621824468,-0.10114492283635129],[0.8516640582796333,-0.5142227750324857,-0.1012090384923948],[0.8515289128156,-0.5142879609290194,-0.10201178305741908],[0.8493465288835248,-0.5164573591123793,-0.1090058259551967],[0.8474518505508027,-0.5187972108523842,-0.11258248091868796],[0.845238184552405,-0.5218476989420415,-0.11509730875850757],[0.8455605598600676,-0.5197629224332007,-0.12195837024504538],[0.8282104096609907,-0.5400279935660363,-0.14979079909732512],[0.807880375196365,-0.5601061904005545,-0.18333127078476877],[0.7831765735350699,-0.5801550884918784,-0.22372869275720603],[0.8352020581525501,-0.5388940183146791,-0.10968481700947857],[0.8321449459024639,-0.543557662031346,-0.10990840302725981],[0.7522893182962291,-0.6228484521302021,-0.21475704239071258],[0.7558701730790509,-0.6257402376837587,-0.1926380969406591],[0.7145852826721022,-0.6880130601207458,-0.1265144374833126],[0.7080003179346898,-0.6963325009509372,-0.11771405151379084],[0.7057124432973647,-0.6990379215466963,-0.11539467758496841],[0.6917240520977123,-0.7158562277517382,-0.09522445556984253],[0.6897176975679429,-0.7176616128418102,-0.09618371543493051],[0.6842329226283205,-0.7237064527774162,-0.08985698525900054],[0.6839801336381611,-0.7239073462539705,-0.09016280179684616],[0.6669249628882533,-0.7382336215215181,-0.10110496492124374],[0.678677058887469,-0.7294861718192904,-0.08513151510628462],[0.6738617248607228,-0.7340166411450475,-0.0844390092899855],[0.6666797106099844,-0.7421436274526435,-0.06899999777115375],[0.5181988527084099,-0.8415829773298361,0.1523418567575453],[0.518002731296922,-0.8415401029987816,0.15324302729236675],[0.5254847425627407,-0.8368922662682103,0.15322245264395526],[0.5608783684656025,-0.8132747751357835,0.15491802966473792],[0.6506413759233114,-0.7593819411752719,0.002206207944866564],[0.6506413759233114,-0.7593819411752719,0.002206207944866564],[0.5608783684656025,-0.8132747751357835,0.15491802966473792],[0.6800193787384388,-0.710379082222328,0.18148058871722555],[0.7634554190442692,-0.6416946464665026,0.07323799443027915],[0.7744289543774091,-0.6298400839137581,0.05967632124572548],[0.7805883320448894,-0.6229321539862099,0.05135550024562378],[0.7813376231617638,-0.6220657390253869,0.05045527685708454],[0.7961660338127583,-0.6029852236545618,0.050283860801652966],[0.8028181355734573,-0.5941372420763804,0.0498395302167907],[0.8789576533458837,-0.4739959163875507,0.05254821474249543],[0.8894788997027531,-0.45001887646003996,0.07943738297063346],[0.8979455469121499,-0.4275666733903869,0.10430980100890981],[0.9013068830367109,-0.4178434411828026,0.11424868161673599],[0.901544094598228,-0.4171469791195097,0.11492016057476034],[0.8954770400293461,-0.4193749842348888,0.1491492319063954],[0.874746244874829,-0.4205027256305141,0.24082455193500177],[0.8701705819874856,-0.42047075054072425,0.25691926004735505],[0.8680408288868049,-0.4205150905361792,0.26395487875176266],[0.851412773328725,-0.4227403406226058,0.31046238713082885],[0.8495371670085289,-0.42294006763856945,0.3152908198108618],[0.8458730091162712,-0.42305904641379577,0.32483826082534467],[0.8618305795483461,-0.3771771113905673,0.33909508813669],[0.890802755222624,-0.34053660745280423,0.30084093849128407],[0.8959504953291175,-0.3333175046277963,0.29355093429966816],[0.9081689627114636,-0.3164554480010906,0.2740165772321328],[0.9158535590433067,-0.3054178512856026,0.26063805267802687],[0.9218617172207959,-0.2955485649998159,0.25064321265351447],[0.9233593717343291,-0.29278773650783635,0.24836024637812457],[0.9260615565091855,-0.2864883585073981,0.24563064547307828],[0.9277376422403218,-0.2821960671838655,0.24427084729113258],[0.9285810762589153,-0.2798438033634067,0.2437716770523961],[0.9288243650809542,-0.279207139831968,0.2435747768115867],[0.9305421071936141,-0.27497252694815566,0.24182947744932667],[0.9312568952185437,-0.27330645916054513,0.24096508977244707],[0.9318574040113682,-0.2719930772066794,0.2401281835621032],[0.9349480654537926,-0.26558778087946633,0.2352344480549806],[0.9355510561457364,-0.26439804353225493,0.23417492590137204],[0.947471690773007,-0.2408309659031246,0.21047052298577976],[0.9546909476028665,-0.223479232805513,0.19652538530632688],[0.9550282754233035,-0.22617019061177787,0.19174993616849736],[0.9551172618421674,-0.2267011764244954,0.19067667067281904],[0.9557357248049799,-0.23005770015727917,0.18341940717885688],[0.9564744884557312,-0.23390856024337828,0.1744801948022098],[0.9569713658259097,-0.23757671181049714,0.16662266050752225],[0.9575352561769016,-0.24161820286161212,0.1573114020793167],[0.95794628079023,-0.24655167923086496,0.14680324447574888],[0.957926022786546,-0.2524957912082113,0.13646834904287883],[0.9542999982369162,-0.2864889068954789,0.08506244524380467],[0.9601998718207956,-0.2712129384713478,0.06678134590635992],[0.9578269821978832,-0.2844663244872383,-0.04057563809008265],[0.9566620594982924,-0.28672350116197576,-0.05086588048883324],[0.9561332176727517,-0.28792383350433687,-0.05393640850962815],[0.9481843964049368,-0.31425927599211023,-0.04677026691307724],[0.9413282827405071,-0.33542574472686615,-0.037291203885572964],[0.9413282827405071,-0.33542574472686615,-0.037291203885572964],[0.9481843964049368,-0.31425927599211023,-0.04677026691307724],[0.9561332176727517,-0.28792383350433687,-0.05393640850962815],[0.9554553535399707,-0.2892355482933377,-0.05871852344245376],[0.9546548477348156,-0.2905687021129176,-0.06483788282193216],[0.9528249386859762,-0.29374227344767406,-0.0764206320822975],[0.9524486029541873,-0.2941017354194598,-0.07966070520576121],[0.9507202371501001,-0.29610880897867775,-0.09192716637907575],[0.941815604052694,-0.3020612492980544,-0.14745294040933116],[0.9435284227267263,-0.27823929587776036,-0.17982494191925713],[0.9437062945258599,-0.2618178566286575,-0.20216290367583964],[0.9434443683047727,-0.2534684991036878,-0.21369708438846863],[0.9417565623908714,-0.23778540579371785,-0.23780806963861817],[0.9416798647841437,-0.23687735753939307,-0.23901495715806453],[0.9408532838267534,-0.2373101412979878,-0.24182430636630334],[0.9372460109086416,-0.23892005727354076,-0.2539431457398419],[0.9353915809144012,-0.2396013518283815,-0.26006495834016036],[0.9334632376527605,-0.24017107877554222,-0.26639113512018037],[0.9270289470971593,-0.2423388208072283,-0.28616293815533533],[0.918060135278493,-0.2638524031203405,-0.2958842634883722],[0.9163189038132612,-0.26780829225140856,-0.29772199299992524],[0.9144557630303696,-0.27208731195777297,-0.2995649380887861],[0.898897910931586,-0.3076093063720734,-0.312024134252661],[0.8364712291941908,-0.4302938445619896,-0.3393568771403079],[0.8140888577953161,-0.4658646948964343,-0.3467411392704504],[0.8047154099922353,-0.4796431256429789,-0.3498222133376642],[0.7875434455195324,-0.5033020628401594,-0.3556154593940815],[0.7431223547901128,-0.5638351032213653,-0.3603597399634846],[0.7140977304082823,-0.6008180565589144,-0.35927996651429006],[0.6195905082779026,-0.6543143672408583,-0.4335669623877324],[0.5787057698464751,-0.6842007687870726,-0.4438118294250137],[0.5617828866190435,-0.6902016362852823,-0.45609394818512344],[0.5467390749678396,-0.6949836777588544,-0.4669840163775289],[0.519688854927128,-0.7036146165589293,-0.484613212190053],[0.5178693799393747,-0.7041468840238483,-0.48578644592116066],[0.5139014829834914,-0.7053523211476823,-0.48824519335979677],[0.5033273142614463,-0.7085706980409702,-0.494559582453006],[0.4777386499698348,-0.7158103125567278,-0.5092949820707442],[0.47541227020546145,-0.716458251807764,-0.5105592490148935],[0.3408237135871601,-0.7465764062491831,-0.5713692902919376],[0.035797797111940956,-0.9443548316226377,-0.3269747233547449],[-0.015196659162830146,-0.9631886363220218,-0.2683965581195349],[-0.07491260988232147,-0.9778224916436024,-0.19557933356189883],[0.3860906569040895,-0.9079686123219016,-0.1628711260156603],[0.40358190743989053,-0.9004593727035479,-0.1621559807639316],[0.3870199374715061,-0.9047415587812786,-0.17792773761719638],[0.40890333673966406,-0.8966676303393778,-0.16966208151715587],[0.41171921930165584,-0.8943480136167719,-0.1750111853493073],[0.4132701130750961,-0.8933112099745811,-0.17664341417852827],[0.4137842043121967,-0.8930778872274265,-0.1766197033377599],[0.42275755457615777,-0.8894378195350849,-0.17371360116427464],[0.42806699788853175,-0.888110987740724,-0.16738434446774178],[0.4280939700050744,-0.8883283981638567,-0.16615718419897232],[0.4268617888872052,-0.8899453190228326,-0.1605812639673877],[0.4268617888872052,-0.8899453190228326,-0.1605812639673877],[0.4280939700050744,-0.8883283981638567,-0.16615718419897232],[0.42806699788853175,-0.888110987740724,-0.16738434446774178],[0.42275755457615777,-0.8894378195350849,-0.17371360116427464],[0.4137842043121967,-0.8930778872274265,-0.1766197033377599],[0.4132701130750961,-0.8933112099745811,-0.17664341417852827],[0.41171921930165584,-0.8943480136167719,-0.1750111853493073],[0.40890333673966406,-0.8966676303393778,-0.16966208151715587],[0.3870199374715061,-0.9047415587812786,-0.17792773761719638],[0.40358190743989053,-0.9004593727035479,-0.1621559807639316],[0.3860906569040895,-0.9079686123219016,-0.1628711260156603],[-0.07491260988232147,-0.9778224916436024,-0.19557933356189883],],
[[0.9906307847195501,0.06871038421107713,0.1180234360942543],[0.9903827135488872,0.07155198682921449,0.11841618928311566],[0.9886892534305252,0.09025973683438246,0.11977787799747959],[0.9883482422302657,0.09363929033339104,0.11999764741945138],[0.986519662744655,0.10902876393451943,0.1220314863184218],[0.9731492350417593,0.18667972478257464,0.13465231781421677],[0.9621221732064533,0.25318384782166514,0.10108839214621683],[0.9616713865865032,0.26605191980361403,0.06636655927199943],[0.9600186255658004,0.278231477060582,0.030846130056108402],[0.991221697680216,0.13178371166959296,-0.010611285809761934],[0.9916103272900263,0.12880559733730068,-0.010866319816205205],[0.9944013317335839,0.10521871601665579,-0.009747473841019686],[0.9944013317335839,0.10521871601665579,-0.009747473841019686],[0.9916103272900263,0.12880559733730068,-0.010866319816205205],[0.991221697680216,0.13178371166959296,-0.010611285809761934],[0.9600186255658004,0.278231477060582,0.030846130056108402],[0.9599499283519853,0.2785603111566767,0.030004801371012958],[0.9588308165277121,0.2835968340944459,0.01470717404563156],[0.9583760466077806,0.28536431492296577,0.009086311517198107],[0.9588523153640839,0.28384269016913066,-0.005963602810924998],[0.9542174046723078,0.2768385154849803,-0.11326774017573454],[0.9688765189462863,0.18945588717050504,-0.159325948454617],[0.9729807244044852,0.15440294311570732,-0.17166316172822557],[0.9738315066221469,0.14656439289528653,-0.17369823097911918],[0.9768809152023619,0.11056087414588668,-0.18297532790377344],[0.9769332488199253,0.1103346100199202,-0.18283244017924746],[0.9803000757196892,0.09395409001136733,-0.17373655491607856],[0.9829306023040482,0.07956221151830892,-0.1658833492322752],[0.9927432679607592,-0.004025947303864307,-0.12018567163725838],[0.9928836838136021,-0.004464827698678984,-0.11900443575914373],[0.9936948759817771,-0.006668182696464282,-0.11191974261535469],[0.9960822475130477,-0.013445744018954665,-0.08740347909055121],[0.9983341849326213,-0.019345330411213134,-0.05435635552720369],[0.999155631433903,-0.023541879961584366,-0.033672007094812856],[0.9993557963848345,-0.025780985839642896,-0.02496663776260882],[0.9994069370560753,-0.02702369606801955,-0.02134230575681436],[0.9980964986574066,-0.04837905216952918,0.03824717870645531],[0.9945336311120538,-0.0113162956228362,0.10380172465065343],[0.9933303556528846,-0.004382316383698325,0.11521978927956301],[0.9922614961685058,0.0426779043147818,0.11660068483819837],[0.9910266142727723,0.06364755419908169,0.11753824334028866],[0.9906307847195501,0.06871038421107713,0.1180234360942543],],
];


const g_edges = [{from: "dark pink", to: "pink"},{from: "dark pink", to: "light brown"},{from: "dark pink", to: "dirt"},{from: "dark pink", to: "purple"},{from: "dark pink", to: "rose"},{from: "dark pink", to: "hot pink"},{from: "dark pink", to: "salmon"},{from: "dark pink", to: "grey"},{from: "dark pink", to: "mauve"},{from: "dark pink", to: "orange"},{from: "dark pink", to: "magenta"},{from: "indigo", to: "royal blue"},{from: "indigo", to: "purple"},{from: "indigo", to: "navy blue"},{from: "indigo", to: "maroon"},{from: "indigo", to: "dark blue"},{from: "indigo", to: "dark purple"},{from: "sea green", to: "turquoise"},{from: "sea green", to: "aqua"},{from: "sea green", to: "pale green"},{from: "sea green", to: "light green"},{from: "sea green", to: "sky blue"},{from: "sea green", to: "cyan"},{from: "sea green", to: "light blue"},{from: "lilac", to: "pink"},{from: "lilac", to: "peach"},{from: "lilac", to: "light purple"},{from: "lilac", to: "light pink"},{from: "lilac", to: "grey"},{from: "lilac", to: "lavender"},{from: "lilac", to: "periwinkle"},{from: "lilac", to: "beige"},{from: "lilac", to: "sky blue"},{from: "lilac", to: "light blue"},{from: "mauve", to: "pink"},{from: "mauve", to: "light brown"},{from: "mauve", to: "peach"},{from: "mauve", to: "light purple"},{from: "mauve", to: "dirt"},{from: "mauve", to: "purple"},{from: "mauve", to: "rose"},{from: "mauve", to: "salmon"},{from: "mauve", to: "grey"},{from: "mauve", to: "lavender"},{from: "mauve", to: "periwinkle"},{from: "mauve", to: "olive"},{from: "mauve", to: "tan"},{from: "sky blue", to: "light purple"},{from: "sky blue", to: "lavender"},{from: "sky blue", to: "grey"},{from: "sky blue", to: "periwinkle"},{from: "sky blue", to: "light blue"},{from: "lavender", to: "pink"},{from: "lavender", to: "peach"},{from: "lavender", to: "light pink"},{from: "lavender", to: "grey"},{from: "lavender", to: "periwinkle"},{from: "lavender", to: "beige"},{from: "lavender", to: "light blue"},{from: "lavender", to: "tan"},{from: "lavender", to: "light purple"},{from: "yellow", to: "mustard"},{from: "yellow", to: "lime"},{from: "olive green", to: "brown"},{from: "olive green", to: "light brown"},{from: "olive green", to: "dirt"},{from: "olive green", to: "forest green"},{from: "olive green", to: "green"},{from: "olive green", to: "olive"},{from: "forest green", to: "brown"},{from: "forest green", to: "navy blue"},{from: "forest green", to: "dark blue"},{from: "forest green", to: "black"},{from: "forest green", to: "olive"},{from: "forest green", to: "dark purple"},{from: "forest green", to: "dark green"},{from: "violet", to: "purple"},{from: "violet", to: "magenta"},{from: "magenta", to: "purple"},{from: "magenta", to: "rose"},{from: "magenta", to: "hot pink"},{from: "magenta", to: "maroon"},{from: "magenta", to: "red"},{from: "lime green", to: "mustard"},{from: "lime green", to: "light green"},{from: "lime green", to: "lime"},{from: "tan", to: "pink"},{from: "tan", to: "light brown"},{from: "tan", to: "mustard"},{from: "tan", to: "peach"},{from: "tan", to: "dirt"},{from: "tan", to: "rose"},{from: "tan", to: "light pink"},{from: "tan", to: "salmon"},{from: "tan", to: "grey"},{from: "tan", to: "pale green"},{from: "tan", to: "beige"},{from: "tan", to: "light green"},{from: "tan", to: "lime"},{from: "lime", to: "mustard"},{from: "lime", to: "pale green"},{from: "lime", to: "light green"},{from: "pink", to: "light purple"},{from: "pink", to: "peach"},{from: "pink", to: "light pink"},{from: "pink", to: "salmon"},{from: "pink", to: "beige"},{from: "pink", to: "rose"},{from: "light green", to: "grey"},{from: "light green", to: "pale green"},{from: "light green", to: "beige"},{from: "light green", to: "light blue"},{from: "light brown", to: "mustard"},{from: "light brown", to: "peach"},{from: "light brown", to: "dirt"},{from: "light brown", to: "rose"},{from: "light brown", to: "salmon"},{from: "light brown", to: "grey"},{from: "light brown", to: "orange"},{from: "light brown", to: "olive"},{from: "peach", to: "mustard"},{from: "peach", to: "rose"},{from: "peach", to: "light pink"},{from: "peach", to: "salmon"},{from: "peach", to: "grey"},{from: "peach", to: "pale green"},{from: "peach", to: "beige"},{from: "purple", to: "dirt"},{from: "purple", to: "rose"},{from: "purple", to: "maroon"},{from: "purple", to: "dark purple"},{from: "rose", to: "light purple"},{from: "rose", to: "dirt"},{from: "rose", to: "salmon"},{from: "rose", to: "grey"},{from: "rose", to: "orange"},{from: "light pink", to: "pale green"},{from: "light pink", to: "beige"},{from: "light pink", to: "light blue"},{from: "dark blue", to: "navy blue"},{from: "dark blue", to: "maroon"},{from: "dark blue", to: "royal blue"},{from: "dark blue", to: "black"},{from: "dark blue", to: "dark purple"},{from: "dark blue", to: "dark green"},{from: "periwinkle", to: "light purple"},{from: "periwinkle", to: "grey"},{from: "periwinkle", to: "light blue"},{from: "cyan", to: "turquoise"},{from: "cyan", to: "aqua"},{from: "orange", to: "salmon"},{from: "orange", to: "mustard"},{from: "black", to: "navy blue"},{from: "black", to: "maroon"},{from: "black", to: "dark purple"},{from: "black", to: "dark green"},{from: "brown", to: "dirt"},{from: "brown", to: "maroon"},{from: "brown", to: "olive"},{from: "brown", to: "dark purple"},{from: "brown", to: "dark green"},{from: "turquoise", to: "aqua"},{from: "turquoise", to: "teal"},{from: "light purple", to: "grey"},{from: "light purple", to: "light blue"},{from: "dirt", to: "grey"},{from: "dirt", to: "olive"},{from: "navy blue", to: "maroon"},{from: "navy blue", to: "royal blue"},{from: "navy blue", to: "dark purple"},{from: "navy blue", to: "dark green"},{from: "blue", to: "royal blue"},{from: "light blue", to: "grey"},{from: "light blue", to: "pale green"},{from: "light blue", to: "beige"},{from: "royal blue", to: "dark purple"},{from: "maroon", to: "dark purple"},{from: "bright green", to: "green"},{from: "olive", to: "green"},{from: "dark purple", to: "dark green"},{from: "aqua", to: "teal"},{from: "grey", to: "beige"},{from: "pale green", to: "beige"},{from: "green", to: "teal"},];

const g_labels = [{label: "dark pink", pos: [0.9552735392660637,0.044169472609680294,0.2924064343810989], pos2d: [1.3500314102355182,0.06242209476713824]},{label: "indigo", pos: [-0.03479475124690096,0.9179469476908755,0.3951742988994508], pos2d: [-0.057528559357824825,1.5177049289085545]},{label: "sea green", pos: [0.8277130227301189,-0.5316394703417605,0.1795845917045763], pos2d: [1.0088950236196288,-0.6480125372661483]},{label: "lilac", pos: [0.9724809123345255,-0.22160385010923245,-0.07192085067466683], pos2d: [0.9072320141197422,-0.20673527338306275]},{label: "mauve", pos: [0.9205015260046115,0.1999766796469632,-0.3356877540521212], pos2d: [0.6891592164501432,0.14971813512573365]},{label: "sky blue", pos: [0.8090939462882788,-0.3678242958823156,0.4583364194981008], pos2d: [1.4937204113641565,-0.6790641075434568]},{label: "lavender", pos: [0.9663784301133502,-0.05511394276066106,-0.251147731674075], pos2d: [0.7723935436627499,-0.04405070749472316]},{label: "yellow", pos: [0.4174923560975105,-0.8936151433758288,-0.16477896749751156], pos2d: [0.3584305415425545,-0.767197183595898]},{label: "olive green", pos: [0.4352240983349943,0.3654867445670148,-0.8227997470674724], pos2d: [0.23876681957806095,0.20050844595244835]},{label: "forest green", pos: [0.6054364230421837,0.472462067526769,-0.6404891352725851], pos2d: [0.36905847775796685,0.28800072939725035]},{label: "violet", pos: [0.2854098884032707,0.6454425879517843,0.708480812202938], pos2d: [0.9790432340321824,2.214065540005217]},{label: "magenta", pos: [0.7254431724770677,0.636443536931532,0.2620531011159737], pos2d: [0.9830560621287688,0.8624516721921393]},{label: "lime green", pos: [0.6912397529107778,-0.7176131947348507,-0.08496414972383545], pos2d: [0.6371083810342716,-0.6614165038702068]},{label: "tan", pos: [0.9954884094142205,0.09088179888783676,-0.02726399370695272], pos2d: [0.9690677523135334,0.08846975991038442]},{label: "lime", pos: [0.8452494068604068,-0.5241484239435291,-0.10402821674740316], pos2d: [0.765604894909852,-0.4747599889138087]},{label: "pink", pos: [0.9679852221051536,0.06490356358671046,0.2424708997380445], pos2d: [1.277819191065296,0.08567798064030363]},{label: "light green", pos: [0.9275297688109724,-0.3060525613477298,0.21452355968975292], pos2d: [1.1808498908568372,-0.3896393903639494]},{label: "light brown", pos: [0.835736801074894,-0.2976808332048675,-0.4614435186147531], pos2d: [0.5718570649018699,-0.20368959143014154]},{label: "peach", pos: [0.9865328605478596,-0.13192725128251642,-0.09668565264970441], pos2d: [0.8995584634159256,-0.12029632280112969]},{label: "purple", pos: [0.8505189105554561,0.521660979050487,-0.06698810135868957], pos2d: [0.7971212701176479,0.48890983731328436]},{label: "rose", pos: [0.894228570589938,0.4352032124067125,0.10465862339795823], pos2d: [0.9987571153962224,0.48607517063310046]},{label: "light pink", pos: [0.8533896265187692,-0.18922840703858296,0.4857146850979457], pos2d: [1.6593700068634027,-0.3679444105352717]},{label: "dark blue", pos: [0.4253555407142908,0.8692310885280633,-0.25201186226044603], pos2d: [0.33973762832113447,0.6942674544302713]},{label: "periwinkle", pos: [0.8841713837571115,0.11350290037431346,-0.45316449083268984], pos2d: [0.6084454921207614,0.07810740015349138]},{label: "cyan", pos: [0.5875154592549433,-0.7241248527540108,0.3612046272688546], pos2d: [0.9197240373596371,-1.133578738458988]},{label: "orange", pos: [0.8452583473589305,0.22933288673217336,0.4826435053775599], pos2d: [1.6338025252312507,0.4432782599927299]},{label: "black", pos: [0.32737409530764927,0.9444182647936108,-0.03000571355127926], pos2d: [0.3178371643968078,0.9169058504903066]},{label: "red", pos: [0.38058716394121206,0.715526846715401,0.5858111831236266], pos2d: [0.9188735871997462,1.7275378222704902]},{label: "brown", pos: [0.3103535676953182,0.681038313550024,-0.6632250587061097], pos2d: [0.18659745779489087,0.4094685262136631]},{label: "turquoise", pos: [0.3416087849397252,-0.8468533339850044,0.407606266843988], pos2d: [0.5766583368797379,-1.4295447209972056]},{label: "mustard", pos: [0.8939770801383771,-0.40335410758202234,-0.1952189644577931], pos2d: [0.7479609232471698,-0.33747298158459405]},{label: "light purple", pos: [0.9282924374009988,0.2528645176025068,0.2726402142050335], pos2d: [1.276249327403251,0.34764709644504055]},{label: "dirt", pos: [0.8816172115316208,0.46681066808515204,-0.06956214842211017], pos2d: [0.8242786198373248,0.4364502509497204]},{label: "navy blue", pos: [0.28718518945323673,0.9483800667958818,0.13453592777749424], pos2d: [0.3318279737664293,1.0958052416438828]},{label: "blue", pos: [-0.9435024050662952,0.1639729961247971,0.28795150316672175], pos2d: [-1.3250535732641402,0.2302834664408966]},{label: "salmon", pos: [0.6111748852270731,-0.31263625906160486,-0.7271339829685023], pos2d: [0.3538665160050985,-0.18101447956241526]},{label: "light blue", pos: [0.9093823308737783,-0.2386059666544314,0.34072124819488453], pos2d: [1.3793593808140718,-0.3619196978533352]},{label: "royal blue", pos: [-0.15535750410707658,0.97869368490653,-0.13424871337072516], pos2d: [-0.13696952200667697,0.8628563324511769]},{label: "maroon", pos: [0.6487060595421063,0.7569665694202323,0.07862608405306912], pos2d: [0.7040638423928102,0.8215628381906916]},{label: "bright green", pos: [-0.29542853060646973,0.03979784669297713,-0.9545355492082549], pos2d: [-0.15115024678171865,0.02036179219615549]},{label: "olive", pos: [0.7479129941898209,0.26182061099524473,-0.6099804265549011], pos2d: [0.46454788011940884,0.16262347459434565]},{label: "dark purple", pos: [0.6499758737861413,0.6994379260523151,-0.2971833627503027], pos2d: [0.5010670753655483,0.5391974227678645]},{label: "hot pink", pos: [0.34624305970587566,-0.09010668995920143,0.9338075433568275], pos2d: [5.230853744745991,-1.3612833626185645]},{label: "aqua", pos: [-0.1636921945632283,-0.6789463234711817,-0.7157071714633296], pos2d: [-0.09540800276752061,-0.39572389435902816]},{label: "grey", pos: [0.9791840085484718,-0.15544005365945773,0.13052611662534697], pos2d: [1.1261798971442425,-0.1787748391661342]},{label: "pale green", pos: [0.9336998646807326,-0.35497736514408096,-0.04685758135618592], pos2d: [0.8919072482344165,-0.3390884982503674]},{label: "green", pos: [0.4784844813762053,0.1432252398312327,-0.866336615731683], pos2d: [0.2563763028292831,0.07674137592541544]},{label: "beige", pos: [0.9258927707252202,-0.2607636937317027,0.27335850663582517], pos2d: [1.2742085047174503,-0.35886155155333854]},{label: "teal", pos: [-0.11173938032674446,-0.40310572869117883,-0.9083061611486261], pos2d: [-0.05855422080673237,-0.21123745072884217]},{label: "dark green", pos: [-0.09423904013052437,0.8994237378248755,-0.4267973092141227], pos2d: [-0.0660493536972193,0.6303794743769712]},];

const g_colors = ['#decbe4', '#ccebc5', '#decbe4', '#b3cde3', '#fed9a6', '#fbb4ae', '#fbb4ae'];
const tempV = new THREE.Vector3();
const myV = new THREE.Vector3();

const cameraToPoint = new THREE.Vector3();
const cameraPosition = new THREE.Vector3();
const normalMatrix = new THREE.Matrix3();
const settings = {
  minArea: 20,
  maxVisibleDot: -0.2,
};


  const width = 1200
  const height = 700
  const globeRadius = 200
  const globeSegments = 64
  const globeWidth = 4098 / 2
  const globeHeight = 1968 / 2


const clusterColors = [];

//label and position in a dictionary table for efficient access when drawing edges. 
// key: label name
// value: position in V3 and color of the node, which is inverse color of the cluster.
// if node numbers is more than the numbers of clusters, randomize the color of node.
const labelTable = new Object();  



var labels = [];
var scene = new THREE.Scene();


const canvas = document.querySelector('#c');
const renderer = new THREE.WebGLRenderer({canvas});




var camera = new THREE.PerspectiveCamera(45, width / height, 1, 4000);
camera.position.set(0, 5, -500);



renderer.setSize(width, height);

renderer.setClearColor(0x999999);


var controls = new THREE.OrbitControls(camera, renderer.domElement);

scene.add(new THREE.AxesHelper(1));


let sphereRadius = globeRadius;
const loader = new THREE.TextureLoader();
const geometry = new THREE.SphereGeometry(sphereRadius-2, 128, 64);



const material = new THREE.MeshBasicMaterial({transparent: false, opacity: 0.5, color: '#C8C8C8', vertexColors: THREE.FaceColors, wireframe: false });

let sphere = new THREE.Mesh(geometry, material);
scene.add(sphere);


const labelContainerElem = document.querySelector('#labels');

///// Main actions: 
//  draw clusters, labels and nodes, and then edges.

// draw cluster.
g_clusters.forEach(drawPoly);

// now we have color for clusters, so prepare label hash table and node color
prepareLabels();

//time for nodes and labels
g_labels.forEach(drawLabelAndNode);

// finally the edges.
g_edges.forEach(drawArcForItem);

sphereRadius = sphereRadius-0.5;
g_clusters.forEach(drawPoly);


function prepareLabels()
{
  for (var i=0; i< g_labels.length; i++)
  {
    var labelName = g_labels[i].label;

    var nodeColor;
    if (i < clusterColors.length)
    {
      nodeColor = invertColor(clusterColors[i]);
    }
    else
    {
      nodeColor = getRandomColor();
    }

    var posi = g_labels[i].pos;
    var tempV = new THREE.Vector3(posi[0], posi[1], posi[2]).normalize().multiplyScalar(sphereRadius);

    var posAndColor = {pos: tempV, color: nodeColor};

    labelTable[labelName] = posAndColor;

  }
}

function drawLabelAndNode (data, index, array)
{
  var v3Pos = labelTable[data.label].pos;
  drawLabelAt(v3Pos,  data.label);
  spot(v3Pos, labelTable[data.label].color);

}


function spot(point, color) {
  var s = new THREE.Mesh(new THREE.SphereGeometry(3, 32, 24), new THREE.MeshBasicMaterial({
    color: color
  }));
  s.position.copy(point);
  scene.add(s);
  return s;
}


function spot2(point, color) {
  var s = new THREE.Mesh(new THREE.SphereGeometry(5, 32, 24), new THREE.MeshBasicMaterial({
    color: color
  }));
  s.position.copy(point);
  //scene.add(s);
  return s;
}



function drawLabel (node, index, array)
{
  var tempV = new THREE.Vector3(node.pos[0], node.pos[1], node.pos[2]).normalize().multiplyScalar(sphereRadius);
  var meshPoint = spot(tempV, 0xff0000);
  
  const elem = document.createElement('div');
    elem.textContent = node.label;
    labelContainerElem.appendChild(elem);

    labels.push({elem, meshPoint});

   
}

function drawLabelAt (v3Pos, txt)
{
  
  var meshPoint = spot2(v3Pos, 0xff0000);
  
  const elem = document.createElement('div');
    elem.textContent = txt;
    labelContainerElem.appendChild(elem);

    labels.push({elem, meshPoint});

   
}

function drawArcForItem (edge, index, array)
{

  var fromKey = edge.from.trim();
  var toKey = edge.to.trim();
  if (fromKey in labelTable  && toKey in labelTable)
  {
    var v3Start = labelTable[fromKey].pos;
    var v3End = labelTable[toKey].pos;

    var lineStart = v3Start.clone().normalize().multiplyScalar(sphereRadius +2);
    var lineEnd = v3End.clone().normalize().multiplyScalar(sphereRadius +2);
    setShortArc(lineStart, lineEnd, 20, "white");
  }
  
}

function setArc3D(pointStart, pointEnd, smoothness, color, clockWise) {
  // calculate normal
  var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();

  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  if (clockWise) angle = angle - Math.PI * 2;
  var angleDelta = angle / (smoothness - 1);

  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    geometry.vertices.push(pointStart.clone().applyAxisAngle(normal, angleDelta * i))
  }

  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  return arc;
}


function GetSmoothness(pointStart, pointEnd)
{
  // we use 0.5 degree as the divider.
  var angleInterval = 0.5; 
  var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();

  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  if (Math.abs(angle) > Math.abs(angle - Math.PI*2))
  {
    angle = angle - Math.PI * 2;
  }

  if (Math.abs(angle)*(180.0/Math.PI) < angleInterval)
  {
    return 2;
  }

   var smoothness = (Math.abs(angle) * 180/Math.PI)/angleInterval;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2)
    {
      smoothness =2;
    }

    return smoothness;
}

function setShortArc(pointStart, pointEnd, smoothness, color) {
  // calculate normal
 
  var cb = new THREE.Vector3(), ab = new THREE.Vector3(), normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();
  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  //console.log(angle + " ");
  //////////
  if (Math.abs(angle) < (Math.PI / 180)) {
    smoothness = 2;
  }
  else {
    smoothness = Math.abs(angle) * 180 / Math.PI;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2) {
      smoothness = 2;
    }
  }
  //////
  if (Math.abs(angle) > Math.abs(angle - Math.PI * 2))
  //if (Math.abs(angle) > Math.abs(Math.abs(angle) - Math.PI * 2))
  {
    angle = angle - Math.PI * 2;
  }
  var angleDelta = angle / (smoothness - 1);
  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
    
    geometry.vertices.push(v3);
  }
  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  scene.add(arc);
  }



function setArcGetGeoPoints(pointStart, pointEnd, smoothness, color) {
  // calculate normal
  var geoPoints = [];
  var cb = new THREE.Vector3(), ab = new THREE.Vector3(), normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();
  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  //////////
  if (Math.abs(angle) < (Math.PI / 180)) {
    smoothness = 2;
  }
  else {
    smoothness = Math.abs(angle) * 180 / Math.PI;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2) {
      smoothness = 2;
    }
  }
  //////
  if (Math.abs(angle) > Math.abs(angle - Math.PI * 2)) {
    angle = angle - Math.PI * 2;
  }
  var angleDelta = angle / (smoothness - 1);
  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
    var latLon = vector3toLonLat(v3.clone());
    geoPoints.push(latLon);
    geometry.vertices.push(v3);
  }
  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  return [arc, geoPoints];
  }


function getArcPoints (pointStart, pointEnd, smoothness)
{
  var points = [];
  if (smoothness < 3)
  {
    points.push(pointStart);
    points.push(pointEnd);

  }
  else
  {
    var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
    cb.subVectors(new THREE.Vector3(), pointEnd);
    ab.subVectors(pointStart, pointEnd);
    cb.cross(ab);
    normal.copy(cb).normalize();

    // get angle between vectors
    var angle = pointStart.angleTo(pointEnd);
    if (Math.abs(angle) > Math.abs(angle - Math.PI*2))
    {
      angle = angle - Math.PI * 2;
    }

    var  angleDelta = angle / (smoothness - 1);
  

  
    for (var i = 0; i < smoothness; i++)
     {
      var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
      points.push(v3);
     }
     

  }
  return points;

}

//////////////
function pointInTriangle (position,coord1,coord2,coord3){
  
  
  var d1,d2,d3;
  var m1 = new THREE.Matrix3();
 m1.set(position.x, position.y, position.z, coord2.x, coord2.y, coord2.z, coord3.x, coord3.y, coord3.z );
 d1 = m1.determinant();

 
  var m2 = new THREE.Matrix3();
  m2.set(coord1.x, coord1.y, coord1.z, position.x, position.y, position.z, coord3.x, coord3.y, coord3.z);
  d2 = m2.determinant();

  
  var m3 = new THREE.Matrix3();
  m3.set(coord1.x, coord1.y, coord1.z, coord2.x, coord2.y, coord2.z, position.x, position.y, position.z);
  d3 = m3.determinant();

  if((d1>=0 && d2 >=0 && d3>=0) || (d1<=0 && d2 <=0 && d3<=0)){
      return true;
  }
  return false;
}


function randColorPoly (poly, index, array)
{
   if (poly.length < 3)
   {
     return
   }

   var points = [];
   for (var i=0; i< poly.length; i++)
   {
    var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
    points.push(tempV);
   }
   drawPolygon(points, getRandomColor());
}

function drawPoly ( poly, index, array)
{
  var clr = g_colors[index];
  clusterColors.push(clr);

  drawPolyAzimuthal(poly,clr)
  polyCounter++;
}

function v3toGeoArray (points)  // not Vector3
{
  var geoArray = [];
  for (var i=0; i< points.length; i++)
  {
    var temp = new THREE.Vector3(points[i][0], points[i][1], points[i][2]).normalize();
    var geoPoint = vector3toLonLat(temp);
    geoArray.push(geoPoint);
  }
  return geoArray;

}

function removeStrayEdges (orig_points)
{
  var points = removeStrayEdges1 (orig_points);

  //do one more time, starting from middle
  var shuffledPoints = [];
  var start = Math.floor(points.length/2);
  for (var i= start; i< points.length; i++)
  {
    shuffledPoints.push(points[i]);
  }
  for (var i=0; i< start; i++)
  {
    shuffledPoints.push(points[i]);
  }

  var finalPoints = removeStrayEdges1 (shuffledPoints);
  if (false == almostSame(finalPoints[0], finalPoints[finalPoints.length -1]))
  {
    finalPoints.push(finalPoints[0]);
  }

  /*
  var final = [];
  final.push(finalPoints[0]);

  for (var i=1; i<finalPoints.length; i++)
  {
    

    var distance = 0.0;
     
        distance = finalPoints[i-1].angleTo(finalPoints[i]);
        distance = Math.abs(distance * 180/Math.PI);
        
      
      if (distance > 8.0)
      {
        var smoothPoints = GetSmoothPoint(finalPoints[i-1], finalPoints[i], 10);
        for (var k=0; k<smoothPoints.length; k++)
        {
          final.push(smoothPoints[k]);
        }
      }
      else
      {
        final.push(finalPoints[i]);
      }
  }
  return final;
  */
 return finalPoints;
}
function removeStrayEdges1 (orig_points)
{
  // first go through remove consective points that are almost same
  var points = [];
  points.push(orig_points[0]);

  for (var i=1; i< orig_points.length -1; i++)
  {
    var p = points[points.length-1];
    if (false == almostSame(p, orig_points[i]) )
    {
      points.push(orig_points[i]);
    }
  }



  var flag = [];
  for (var i=0; i< points.length -1; i++)
  {
    flag.push(-1);
  }

  for (var i=1; i< points.length -1; i++)
  {
    var startj =0;
    if (i > (points.length -1)/2 )
    {
      startj =Math.floor( i - (points.length -1)/2);

    }
    for (var j=startj; j < i; j++)
    {
      if (almostSame (points[j], points[i]))
      {
        if (flag[j] < i)
        {
          flag[j] = i;
        }
      }
    }
  }
  var newPoints = [];
  var i=0; 
  while (i< points.length )
  {
    
      newPoints.push(points[i]);
      if (flag[i] > 0)
      {
         i = flag[i];
      }
      else
      {
        i++;
      }
    
  }
  return newPoints;
}


function almostSame (p1, p2)
{
  
  var angle = p1.angleTo(p2);
  if (Math.abs(angle*180/Math.PI) < 0.01)
  {
    return true;
  }
  return false;
}

function v3toGeoAndThreeArray (points)  // not Vector3
{
  var geoArray = [];
  var ThreeArray =[];
  for (var i=0; i< points.length; i++)
  {
    var temp = new THREE.Vector3(points[i][0], points[i][1], points[i][2]).normalize();
    var threeV = temp.multiplyScalar(sphereRadius);
    ThreeArray.push(threeV.clone());
   // var geoPoint = vector3toLonLat(temp);
   // geoArray.push(geoPoint);
  }

  
  var cleanV3Array = removeStrayEdges(ThreeArray);
  for (var i=0; i< cleanV3Array.length; i++)
  {
    //debugging 
    /*
    drawLabelAt(cleanV3Array[i], i.toString());
     if (i < cleanV3Array.length -1) 
     console.log(i + ": " +  cleanV3Array[i].angleTo(cleanV3Array[i+1])* 180/Math.PI);
     */
    ///////////

    var tmp = cleanV3Array[i].clone().normalize();
    var geoPoint = vector3toLonLat(tmp);
    geoArray.push(geoPoint);
  }
  
  
  //return [geoArray, ThreeArray];
  return [geoArray, cleanV3Array];

  /*  isClocwise not work for huge polygon.

  if (isClockwise(geoArray, cleanV3Array) )
 {
  return [geoArray, cleanV3Array];
 }
 else
 {
   console.log ("poly " + polyCounter + " is counter-clockwise");
   var geo = [];
   var v3 = [];
   for (var i= geoArray.length -1; i >=0; i--)
   {
     geo.push(geoArray[i]); v3.push(cleanV3Array[i]);
   }
   return [geo, v3];
 }
 */

}

function getArea (geoPoints)
{
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
  var area = d3.geoArea(geoPolyformat);
  return area;
}

function isClockwise (geoPoints, v3Points)
{
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   var c = d3.geoCentroid(geoPolyformat);
   var ctr = lonLatToVector3(c[0], c[1]).normalize();
   var centerV3 = ctr.clone().multiplyScalar(sphereRadius);
   
   var mid = Math.floor(v3Points.length/2);
   if (centerV3.clone().dot(v3Points[0]) < 0 )
   {
     return false;
   }
   if (centerV3.clone().dot(v3Points[mid]) < 0)
   {
     return false;
   }
   return true;
}

function testDrawPolyEarcut()
{
  var geoRectangle = [ [90, 10], [110, 20], [100, 40], [115, 25], [160, 50], [-160, 50], [150, 10], [145, 40], [120, 20], [130, 10]];
  var v3points = [];
  for (var i=0; i < geoRectangle.length; i++)
  {
    var vct3 = lonLatToVector3(geoRectangle[i][0], geoRectangle[i][1]);
    var v3 = [vct3.x, vct3.y, vct3.z];
    v3points.push(v3);
  }

  // test getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
 var ret = getCross180LatFromLonLat (160, 70, -150, 50);
  //var splitPolys = cutAlong180(geoRectangle);

  drawPolyEarcut2(v3points, getRandomColor());
}


function testDrawPolyEarcut3()
{
  var geoRectangle = [ [90, 10], [110, 20], [100, 40], [115, 25], [160, 50], [-160, 50], [150, 10], [145, 40], [120, 20], [130, 10]];

   var tmp2 = azimuthalProjection (geoRectangle);
  var v3points = [];
  for (var i=0; i < geoRectangle.length; i++)
  {
    var vct3 = lonLatToVector3(geoRectangle[i][0], geoRectangle[i][1]);
    drawLabelAt(vct3.clone().normalize().multiplyScalar(sphereRadius), i.toString());
   
    //var v3 = [vct3.x, vct3.y, vct3.z];
    v3points.push(vct3);
  }

  // test getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
 //var ret = getCross180LatFromLonLat (160, 70, -150, 50);
  //var splitPolys = cutAlong180(geoRectangle);

  drawPolyEarcut3(v3points, getRandomColor());
  
}

function triFaceInside ( a, b, c)
{
  var ac = c.clone().sub(a.clone()).normalize();
  var ab = b.clone().sub(a.clone()).normalize();
  var normal = ac.cross(ab).normalize();
  var final = normal.add(a.clone().normalize());
  if (final.length() < 1)
  {
    return true;
  }
  return false;

}
/**
 * 
 * @param {*} points : THREE.JS Vector3 normalized array, in clockwise order.
 */
function earcut3d (points) 
{
   var ret =[];
  
    var remain =[];
    for (var x=0; x< points.length; x++)
    {
      remain.push(x);
    }

    while (remain.length > 3)
    { 
      var newRemain = [];
      for (var i=0; i< remain.length-2; )
      {
        var a = remain[i];
        var b = remain[i+1];
        var c = remain[i+2];
        newRemain.push(a);
        // for a, b, c triangle.
        // remove same points and point in a straight line

        /****
         *     c
         *   b
         *     a
         */
        var  ba = points[a].clone().sub(points[b].clone()).normalize();
        if (isZero(ba))
        {
          i +=2;
          continue; // drop point b
        }
        var bc = points[c].clone().sub(points[b].clone()).normalize();
        if (isZero(bc))
        {
          i +=2;
          continue;  // drop b
        }

        var cross = ba.cross(bc).normalize();;
        if (isZero(cross))
        {
          i +=2;
          continue; // drop b, straigt line.
        }

        var addV = cross.add(points[b].clone().normalize());

        if (addV.length() > 1)
        {
          // cut it
          // clockwise
          ret.push(a); ret.push(b); ret.push(c);
          i +=2;
        }
        else
        {
          // can't cut
          //newRemain.push(b);
          i++;
        }

      }

      // push the last one/two points for next round
      while (i < remain.length)
      {
        newRemain.push(i);
        i++;
      }

      remain = newRemain;
    }

    // 3 points remaining, figure out clock wise or not
    var fa = remain[0];
    var fb = remain[1];
    var fc = remain[2];
    var  fba = points[fa].clone().sub(points[fb].clone());
    if (isZero(fba))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }
    var fbc = points[fc].clone().sub(points[fb].clone());
    if (isZero(fbc))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }

    var fcross = fba.cross(fbc).normalize();
    if (isZero(fcross))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }

    if (fcross.add(points[fb]).length() > 1)
    {
     
      // clockwise
      ret.push(fa); ret.push(fb); ret.push(fc);
    }
    else
    {
      //counter clockwise
      ret.push(fa); ret.push(fc);  ret.push(fb);
    }

    return ret;


  


}

function isZero (v3)
{
  if ( v3.length() < 0.0001)
  {
    return true;
  }
  return false;
}

function checkClockWise (points)
{
  var sum = 0.0;
  for (var i=0; i< points.length-1; i++)
  {
     sum += (points[i+1][1] - points[i][1])*(points[i+1][0] + points[i][0]);
  }

  if (sum > 0)
  {
    return true;
  }
  return false;
}

function findCenterPointGeo (geoData)
{
  var minLat, maxLat, minLon, maxLon;

  
  minLon = maxLon = geoData[0][0];
  minLat = maxLat = geoData[0][1];

  for (var i=1; i<geoData.length; i++)
  {
    
    var lon = geoData[i][0];
    var lat = geoData[i][1];
    if (lon < minLon)
    {
      minLon = lon;
    }
    if (lon > maxLon)
    {
      maxLon = lon;
    }
    if (lat < minLat)
    {
      minLat = lat;
    }
    if (lat > maxLat)
    {
      maxLat = lat;
    }
  }

  var midLat = (minLat + maxLat)/2.0;

  //we have to take care of +180 and -180 scenarios
  var midLon;
  // all positives or all negative
  if  (((minLon >=0) && (maxLon >=0)) || ((minLon <=0) && (maxLon <=0)))
  {
   midLon = (minLon + maxLon)/2.0;
  }
  else
  {
    // one positive and one negative, which mean minLon is negative.
    if (Math.abs(minLon) + Math.abs(maxLon) <= 180.0)
    {
      midLon = (minLon + maxLon)/2.0;
    }
    else
    {
      var reverseMid = ((180 - Math.abs(minLon) ) + (180 -Math.abs(maxLon)))/2;
      if (Math.abs(minLon) < Math.abs(maxLon))
      {
        midLon = minLon - reverseMid;
      }
      else
      {
        midLon = maxLon + reverseMid;
      }
    }
  }
  //return lonLatToVector3(midLon*Math.PI/180, midLat*Math.PI/180);
  return [midLon, midLat];
}

function splitPolyTo (geoPoints, v3Points, maxArea)
{
  // split twice at most
  var ret = [];
  var t = splitPoly(geoPoints, v3Points);
  for (var i=0; i < t.length; i++)
  {
    if (getArea(t[i][0]) > maxArea)
    {
      t1 = splitPoly(t[i][0], t[i][1]);
      ret.push(t1[0]);
      ret.push(t1[1]);
    }
    else
    {
      ret.push(t[i]);
    }
  }
  return ret;
  
}


function splitPoly (geoPoints, v3Points)
{
  //idea: center to nearest point p1, and then to nearest point p2 that is the opposite direction of p1.
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   var c = d3.geoCentroid(geoPolyformat);
   var ctr = lonLatToVector3(c[0], c[1]).normalize();
   var centerV3 = ctr.clone().multiplyScalar(sphereRadius);

   var twoIndex = getNearest2Points( centerV3, v3Points);

   var geo1 = [];
   var geo2 = [];
   var v1 = [];
   var v2 =[];

   var a = twoIndex[0]; 
   var b = twoIndex[1];

   for (var i = a; i <=b; i++)
   {
     geo1.push(geoPoints[i]);
     v1.push(v3Points[i]);
   }
   geo1.push(c); v1.push(centerV3);
   geo1.push(geoPoints[a]); v1.push(v3Points[a]);

   //second poly
   geo2.push(geoPoints[a]); v2.push(v3Points[a]);
   geo2.push(c); v2.push(centerV3);
   for (var i= b; i < v3Points.length; i++)
   {
    geo2.push(geoPoints[i]);
    v2.push(v3Points[i]);
   }
   for (var i=0; i<=a; i++)
   {
    geo2.push(geoPoints[i]);
    v2.push(v3Points[i]);
   }

   return [[geo1, v1], [geo2, v2]];


}

function getNearest2Points ( center, v3Points)
{
  var angle = Math.abs(center.angleTo(v3Points[0]));
  var idx =0;
  for (var i=1; i< v3Points.length; i++)
  {
     var a =  Math.abs(center.angleTo(v3Points[i]));
     if (a < angle)
     {
       angle = a;
       idx = i;
     }
  }
  // now find the index on the opposite side using dot operation.
  var v1 = v3Points[idx].clone().sub(center.clone());
  var idx2 = -1;
  var angle2 = 999; //init big value
  for (var i=0; i< v3Points.length; i++)
  {
    if (i != idx)
    {
      var v2 =  v3Points[i].clone().sub(center.clone());
      if (v2.dot(v1) < 0)
      {
        var b = Math.abs(center.angleTo(v3Points[i]));
        if (b < angle2)
        {
          angle2 = b;
          idx2 = i;
        }
      }
    }
  }

  if (idx2 > idx)
  {
    return [idx, idx2];
  }
  else
  {
    return [idx2, idx];
  }

  
}

function azimuthalProjection (geoPoints, theColor="")
{
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   
  var c = d3.geoCentroid(geoPolyformat);
 //var c= findCenterPointGeo(geoPoints);
    
  // for debuging only comment out later///////////////
  //plot out the center with Polygon cluster number:
  /*
  var ctr = lonLatToVector3(c[0], c[1]).normalize();
  var centerV3 = ctr.clone().multiplyScalar(sphereRadius);
  var ctrForLine = ctr.clone().multiplyScalar(sphereRadius + 2);
   
  ////// to be commented out /////////////
  if (polyCounter < gNodes.length )
  {  var lbl = gNodes[polyCounter].label;
    if (polyCounter != 20  && polyCounter != 41)
    { 
      if ((lbl != "Modest Mouse")  && (lbl != "Aerosmith"))
      {
        gLabelTable[lbl] = ctrForLine;
      // drawLabelAt (centerV3, polyCounter.toString());
        drawLabelAt (centerV3, lbl);
        var nodeColor = invertColor(theColor);
        spot(centerV3, nodeColor);
      }
    }
  }
  else
  {
  drawLabelAt (centerV3, polyCounter.toString());
  }
  ////////////// to be comment out above /////////////////
  ***/



  var projection = d3.geoAzimuthalEquidistant().rotate([-c[0], -c[1]]);
  var ret =[];

  for (var i=0; i< geoPoints.length; i++)
  {
    var p = projection(geoPoints[i]);
    ret.push(p);
  }

  return ret;
} 


function drawPolyEarcut (points, theColor, )
{
  var geoArray = v3toGeoArray (points);

 

  var wrapper =[];
  wrapper.push(geoArray);
  //wrapper.push(points);
  var data = earcut.flatten(wrapper);
  var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

  var c = -1; // the counter

  const polyGeometry = new THREE.Geometry();

  for ( var i=0; i <= triangles.length -3; i += 3)
  {
    // clock wise triangle
    /*************
        tb--------tc 
        \       /
          \   /
             ta
            
    ************/
    var ia = triangles[i]; 
    var ib = triangles[i+1];
    var ic = triangles[i+2];

    

    var ta = new THREE.Vector3(points[ia][0],points[ia][1], points[ia][2]).normalize().multiplyScalar(sphereRadius);
    var tb = new THREE.Vector3(points[ib][0],points[ib][1], points[ib][2]).normalize().multiplyScalar(sphereRadius);
    var tc = new THREE.Vector3(points[ic][0],points[ic][1], points[ic][2]).normalize().multiplyScalar(sphereRadius);

    // push ta into the vertice array
    c++;
    polyGeometry.vertices.push(ta);
    var taCounter = c;

    var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
    var sectionPoints = getArcPoints(tb, tc, smooth);

    for (var j =0; j< smooth - 1; j++)
    {
      var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
      var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
      var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
      
      for (var k =0; k < cordSmooth; k++)
      {
        polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
        c++;
        polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
        c++;

        if (k == 0)
        {
         // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
          polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
        }
        else
        {
          //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

         // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

        }
      }
    }
  }  // end of for ( var i=0; i < triangles.length -3; i += 3)

  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
     /* wireframe: true,   */
      vertexColors: THREE.FaceColors
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);  

}


function invertColor(hex) {
  if (hex.indexOf('#') === 0) {
      hex = hex.slice(1);
  }
  // convert 3-digit hex to 6-digits.
  if (hex.length === 3) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }
  if (hex.length !== 6) {
      throw new Error('Invalid HEX color.');
  }
  // invert color components
  var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),
      g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),
      b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);
  // pad each with zeros and return
  return '#' + padZero(r) + padZero(g) + padZero(b);
}

function padZero(str, len) {
  len = len || 2;
  var zeros = new Array(len).join('0');
  return (zeros + str).slice(-len);
}


function drawPolyEarcut3 (points, theColor)
{
  
  var triangles = earcut3d(points);
  
  var c = -1; // the counter

  const polyGeometry = new THREE.Geometry();

  for ( var i=0; i <= triangles.length -3; i += 3)
  {
    // clock wise triangle
    /*************
        tb--------tc 
        \       /
          \   /
            ta
            
    ************/
    var ia = triangles[i]; 
    var ib = triangles[i+1];
    var ic = triangles[i+2];

    

    var ta = points[ia].clone().normalize().multiplyScalar(sphereRadius);
    var tb =points[ib].clone().normalize().multiplyScalar(sphereRadius);
    var tc =points[ic].clone().normalize().multiplyScalar(sphereRadius);

    // push ta into the vertice array
    c++;
    polyGeometry.vertices.push(ta);
    var taCounter = c;

    var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
    var sectionPoints = getArcPoints(tb, tc, smooth);

    for (var j =0; j< smooth - 1; j++)
    {
      var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
      var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
      var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
      
      for (var k =0; k < cordSmooth; k++)
      {
        polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
        c++;
        polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
        c++;

        if (k == 0)
        {
        // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
          polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
        }
        else
        {
          //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

        // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

        }
      }
    }
  }  // end of for ( var i=0; i < triangles.length -3; i += 3)

  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      wireframe: true,   
      vertexColors: THREE.FaceColors
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);  
  

  
}


function drawPolyAzimuthal (gPoints, theColor )
{
  var conv = v3toGeoAndThreeArray (gPoints);
  var geoArray = conv[0];
  var points = conv[1];

  var area = getArea(geoArray);
  console.log ("poly " + polyCounter + " area:" + area);

  if (area < 1.8)  // entire sphere area  is 4*PI = 12.
  {
    drawPolyAzimuthal2 (geoArray, points, theColor );
    return;
  }
  
  var split = splitPolyTo(geoArray, points, 1.8);

  for (var i=0; i< split.length; i++)
  {
   drawPolyAzimuthal2 (split[i][0], split[i][1], theColor )
  }
  /*
  var l = geoArray.length/2;
  l = Math.floor(l);
  var geo1 = [];
  var geo2 =[];
  var p1 = [];
  var p2 =[];
  for (var i=0; i<= l; i++)
  {
    geo1.push(geoArray[i]);
    p1.push(points[i]);
  }
  geo1.push(geoArray[0]);
  p1.push(points[0]);

  for (var i=l; i< points.length; i++)
  {
    geo2.push(geoArray[i]);
    p2.push(points[i]);
  }
  geo2.push(geoArray[l]);
  p2.push(points[l]);
  */

  //drawPolyAzimuthal2 (geo1, p1, theColor );
  //drawPolyAzimuthal2 (geo2, p2, theColor );

 // drawPolyAzimuthal2 (geo1, p1, getRandomColor() );
 // drawPolyAzimuthal2 (geo2, p2, theColor );


}
function drawPolyAzimuthal2 (geoArray, points , theColor)
{
  /*
  var conv = v3toGeoAndThreeArray (gPoints);
  var geoArray = conv[0];
  var points = conv[1];
  */
  var aziArray = azimuthalProjection (geoArray, theColor);

  // debugging only: did not work
  //var clockwise = checkClockWise(aziArray);
  //console.log(clockwise);
  ////////////

 
    

    var wrapper =[];
    wrapper.push(aziArray);
  
    var data = earcut.flatten(wrapper);
    var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

    var c = -1; // the counter

    const polyGeometry = new THREE.Geometry();

    for ( var i=0; i <= triangles.length -3; i += 3)
    {
      // clock wise triangle
      /*************
          tb--------tc 
          \       /
            \   /
              ta
              
      ************/
      var ia = triangles[i]; 
      var ib = triangles[i+1];
      var ic = triangles[i+2];

      

      var ta = points[ia];
      var tb =points[ib];
      var tc =points[ic];


      // test out wrong clockwise direction.
      
       if (triFaceInside (ta, tb, tc) )
       {
         // switch tb, tc
         tb = points[ic];
         tc = points[ib];
       }
       

      // push ta into the vertice array
      c++;
      polyGeometry.vertices.push(ta);
      var taCounter = c;

      var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
      var sectionPoints = getArcPoints(tb, tc, smooth);

      for (var j =0; j< smooth - 1; j++)
      {
        var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
        var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
        var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
        
        for (var k =0; k < cordSmooth; k++)
        {
          polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (k == 0)
          {
            polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
           // polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
          }
          else
          {
            polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
           // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

             polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
            //polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

          }
        }
      }
    }  // end of for ( var i=0; i < triangles.length -3; i += 3)

    const polyMaterial = new THREE.MeshBasicMaterial(
      {color: theColor,
        side: THREE.DoubleSide,
       /*wireframe: true,  */ 
        vertexColors: THREE.FaceColors
      });

    const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
    scene.add(myPoly);  
  

}

function drawPolyEarcut2 (gPoints, theColor, )
{
  var geoArray = v3toGeoArray (gPoints);

  var splitPolysBig = cutAlong180(geoArray);
  var splitPolys = [];
  for (var xx=0; xx < splitPolysBig.length; xx++)
  {
    splitPolys = splitPolys.concat(slicePoly(splitPolysBig[xx], 90));
  }

  for (var q=0; q< splitPolys.length; q++)
  {
    //test color
    theColor = getRandomColor();


    var points = [];
    for (var t=0; t< splitPolys[q].length; t++)
    {
      var tmp = lonLatToVector3(splitPolys[q][t][0], splitPolys[q][t][1] ).normalize().multiplyScalar(sphereRadius);
      points.push(tmp);
    }

    var wrapper =[];
    wrapper.push(splitPolys[q]);
    //wrapper.push(points);
    var data = earcut.flatten(wrapper);
    var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

    var c = -1; // the counter

    const polyGeometry = new THREE.Geometry();

    for ( var i=0; i <= triangles.length -3; i += 3)
    {
      // clock wise triangle
      /*************
          tb--------tc 
          \       /
            \   /
              ta
              
      ************/
      var ia = triangles[i]; 
      var ib = triangles[i+1];
      var ic = triangles[i+2];

      

      var ta = points[ia];
      var tb =points[ib];
      var tc =points[ic];

      // push ta into the vertice array
      c++;
      polyGeometry.vertices.push(ta);
      var taCounter = c;

      var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
      var sectionPoints = getArcPoints(tb, tc, smooth);

      for (var j =0; j< smooth - 1; j++)
      {
        var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
        var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
        var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
        
        for (var k =0; k < cordSmooth; k++)
        {
          polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (k == 0)
          {
          // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
            polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
          }
          else
          {
            //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
            polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

          // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
            polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

          }
        }
      }
    }  // end of for ( var i=0; i < triangles.length -3; i += 3)

    const polyMaterial = new THREE.MeshBasicMaterial(
      {color: theColor,
       /*wireframe: true,   */
        vertexColors: THREE.FaceColors
      });

    const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
    scene.add(myPoly);  
  }

}

function randColorPolyLine (poly, index, array)
{
  var clr = getRandomColor();

  if ((polyCounter ==34) /*|| (polyCounter % 2 == 0) */ )
  {
    var points = [];
    var geoPoints =[];
    for (var i=0; i< poly.length; i++)
    {
      var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
      points.push(tempV.clone());

      var geoPoint = vector3toLonLat(tempV);
      geoPoints.push(geoPoint);
      //if( (i == 2 ) || (i== 10) || (i ==20) || (i==30 ) || (i== 60) || (i== 150) || (i== poly.length - 1))
      {
      // drawLabelAt(tempV, i.toString());
      }

    }



    //var hulls = d3.polygonHull(geoPoints);
   //var hulls = geoPoints;


   points.push(points[0]);
   geoPoints.push(vector3toLonLat(points[0].clone()));
   

   

  for (var i=0; i< points.length-1; i++)
  {
    var start = points[i];
    var end =  points[i+1 ];
    var ret = setArcGetGeoPoints(start, end, 6, clr);
    scene.add(ret[0]);
  }
  

  var ctr = findCenterPoint(points);
  drawLabelAt(ctr.normalize().multiplyScalar(sphereRadius), 'c' + polyCounter.toString());


  

  
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};

  
      
      geometry.computeFaceNormals();

      for ( var j = 0; j < geometry.faces.length; j ++ )
      {
        var normalGeo = vector3toLonLat (geometry.faces[j].normal);
        //var idx = geometry.faces[j].a;
       // var normalGeo = vector3toLonLat (geometry.vertices[idx]);
        if (d3.geoContains(geoPolyformat, normalGeo) )
       // if (d3.polygonContains(hulls, normalGeo) )
        {
          geometry.faces[ j ].color.setHex(  0xffff00 );
           //geometry.faces.splice(j, 1) ;
        }
    
      }
      //geometry.elementsNeedUpdate = true;///////////////
      geometry.colorsNeedUpdate = true;
      
      
      
  }
  polyCounter++;
  
  
}

// split along the +- 180 lontitude line
function splitPolygon (geoPts)
{
  var retPolys = []
  
}


function  PointInPoly(polyPoints, L)
{
  var x = L[0], y = L[1];

  var inside = false;

  var intersections = 0;

  var ss;

  for (var i = 0, j = polyPoints.length -1; i < polyPoints.length; j = i++)
   {

    var xi = polyPoints[i][0], yi = polyPoints[i][1]; var xj = polyPoints[j][0], yj = polyPoints[j][1];
    if (yj == yi && yj == y && x > Math.min(xj, xi) && x < Math.max(xj, xi)) 
    { // Check if point is on an horizontal polygon boundary
     return true;

    }

    if (y > Math.min(yj, yi) && y <= Math.max(yj, yi) && x <= Math.max(xj, xi) && yj != yi)
    {
      ss = (y - yj) * (xi - xj) / (yi - yj) + xj;
      if (ss == x) 
      { // Check if point is on the polygon boundary (other than horizontal)
        return true;
      }

      if (xj == xi || x <= ss) 
      {
        intersections++;
      } 
    }
  }

  // If the number of edges we passed through is odd, then it’s in the polygon.

  if (intersections % 2 != 0) 
  {
    return true;
  } 
  else
  {
    return false;
  }
}



function randColorPoly2 (poly, index, array)
{
   if (poly.length < 3)
   {
     return
   }

   var points = [];
   for (var i=0; i< poly.length; i++)
   {
    var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
    points.push(tempV);
   }
   var polyCenter = findCenterPoint(points);

   //if ((index > 10) && (index < 13))
   //{
     spot(polyCenter.normalize().multiplyScalar(sphereRadius), 'pink');
   
    //drawPolygon2(points, polyCenter, getRandomColor(), true);

    drawPolygon3(points, getRandomColor(), false);
  //}
}

function drawPolygon( abcde, theColor)
{
  //abcde are points (vertex) in vector3 format.
  // walk from a to b to c to d to e... and back to a. After every degree create an additional point (lat, lon).
  var geoJsonArray =[];
  var polyArray =[];

  var smoothness = 8;
  for (var i=0; i< abcde.length-1; i++)
  {
  var smoothness = 8;
  var arcAndGeoPoints = setArcGetGeoPoints(abcde[i], abcde[i+1], smoothness, theColor);
     // scene.add(arcAndGeoPoints[0]);
      polyArray = polyArray.concat(arcAndGeoPoints[1]);
  }
  var closing = setArcGetGeoPoints(abcde[abcde.length-1], abcde[0], smoothness, theColor);
 // scene.add(closing[0]);
  polyArray = polyArray.concat(closing[1]);
  geoJsonArray.push(polyArray);

  //draw a polygon with color
const polyMesh = new THREE.Mesh(
  //new THREE.ConicPolygonGeometry(polygonGeoJson, 0, sphereRadius, false, true, false ),
  new THREE.ConicPolygonBufferGeometry(geoJsonArray, 0, sphereRadius, false, true, false ),
 
  new THREE.MeshBasicMaterial({ color: theColor })
);
scene.add(polyMesh);
}

/***
 *  sides: THREE.Vector3 arrays of 3d point forming the outsides of the polygon.
 *  center: a THREE.Vector3 3d point inside the polygon, does not have to be exactly the center point.
 * sidesCounterClockWise: weather the side point array goes couterclockwise or not.
 */
function drawPolygon2 (sides, center, theColor, sidesCounterClockWise = true)
{
  /***
   * idea:  connect the central point to every out edge point, to form trianles, then sub divide each triangle to more smaller triangles to form a mesh.
   */

  const polyGeometry = new THREE.Geometry();
  polyGeometry.vertices.push(center.normalize().multiplyScalar(sphereRadius));
   var c = 0;

   if (false == sides[0].equals(sides[sides.length-1]))
   {
     sides.push(sides[0]);
   }

  for (var i=0; i < sides.length-1; i++)
  {
      var smooth = GetSmoothness(sides[i], sides[i+1]);
      var sectionPoints = getArcPoints(sides[i], sides[i+1], smooth);
      for (var j =0; j< smooth - 1; j++)
      {
         var cordSmooth =  GetSmoothness (center, sectionPoints[j]);
         var cordPointsA = getArcPoints(center, sectionPoints[j], cordSmooth);
         var cordPointsB = getArcPoints(center, sectionPoints[j+1], cordSmooth);
         for (var k =0; k < cordSmooth; k++)
         {
          polyGeometry.vertices.push(cordPointsA[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsB[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (true == sidesCounterClockWise)
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c-1, c));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -1, c- 2));
              polyGeometry.faces.push( new THREE.Face3 (c-2, c -1, c));
            }

          }
          else
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c, c-1));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -2, c));
              polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));
            }
          }

        }
      }
  }
 


  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      /* wireframe: true, */
      vertexColors: THREE.FaceColors
      
      
      
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);
}



function drawPolygon3(sides, theColor, sidesCounterClockWise = true)
{
  /***
   * idea:  connect the central point to every out edge point, to form trianles, then sub divide each triangle to more smaller triangles to form a mesh.
   */


  var geoPoints =[];
  for (var i=0; i< sides.length; i++)
  {
    
    
    var geoPoint = vector3toLonLat(sides[i].clone());
    geoPoints.push(geoPoint);
  }
  geoPoints.push(geoPoints[0]);

  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   
  var geoCenter = d3.geoCentroid(geoPolyformat);
  var center = lonLatToVector3(geoCenter[0], geoCenter[1]);



  const polyGeometry = new THREE.Geometry();
  polyGeometry.vertices.push(center.normalize().multiplyScalar(sphereRadius));
   var c = 0;

   if (false == sides[0].equals(sides[sides.length-1]))
   {
     sides.push(sides[0]);
   }

  for (var i=0; i < sides.length-1; i++)
  {
      var smooth = GetSmoothness(sides[i], sides[i+1]);
      var sectionPoints = getArcPoints(sides[i], sides[i+1], smooth);
      for (var j =0; j< smooth - 1; j++)
      {
         var cordSmooth =  GetSmoothness (center, sectionPoints[j]);
         var cordPointsA = getArcPoints(center, sectionPoints[j], cordSmooth);
         var cordPointsB = getArcPoints(center, sectionPoints[j+1], cordSmooth);
         for (var k =0; k < cordSmooth; k++)
         {
          polyGeometry.vertices.push(cordPointsA[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsB[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (true == sidesCounterClockWise)
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c-1, c));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -1, c- 2));
              polyGeometry.faces.push( new THREE.Face3 (c-2, c -1, c));
            }

          }
          else
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c, c-1));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -2, c));
              polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));
            }
          }

        }
      }
  }
 


  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      /* wireframe: true, */
      vertexColors: THREE.FaceColors
      
      
      
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  
  scene.add(myPoly);
  
  polyGeometry.computeFaceNormals();

  for ( var j = 0; j < polyGeometry.faces.length; j ++ )
  {
    var normalGeo = vector3toLonLat (polyGeometry.faces[j].normal);
    //var idx = geometry.faces[j].a;
    // var normalGeo = vector3toLonLat (geometry.vertices[idx]);
    if (false == d3.geoContains(geoPolyformat, normalGeo) )
    // if (d3.polygonContains(hulls, normalGeo) )
    {
      //polyGeometry.faces[ j ].color.setHex(  0xffffff );
        polyGeometry.faces.splice(j, 1) ;
    }

  }
  geometry.elementsNeedUpdate = true;///////////////
  polyGeometry.colorsNeedUpdate = true;
  

  
  }


////////////////
function vector3toLonLat( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [ lng*(180.0/Math.PI),lat*(180.0/Math.PI) ];

}

function vector3toLonLatRadians( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [ lng,lat ];

}


function vector3toLatLon( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [lat*(180.0/Math.PI), lng*(180.0/Math.PI) ];

}

/**
 * converts a XYZ vector3 to longitude latitude (Direct Polar)
 * @param lng longitude, in degree ( -180 to + 180)
 * @param lat latitude, in degree ( -90 to + 50)
 * @param vector3 optional output vector3
 * @returns a unit vector of the 3d position
 */
function lonLatToVector3( lng, lat, out )
{
    lng = lng*Math.PI/180;
    lat = lat*Math.PI/180;

    out = out || new THREE.Vector3();

    //flips the Y axis
    lat = Math.PI / 2 - lat;

    //distribute to sphere
    out.set(
                Math.sin( lat ) * Math.sin( lng ),
                Math.cos( lat ),
                Math.sin( lat ) * Math.cos( lng )
    );

    return out;

}

function getCrossLatFromLonLat (lon0, lat0, lon1, lat1, lont)
{
  if (Math.abs(lat1 - lat0) < 0.01)
  {
    return (lat1 + lat0)/2.0;
  }
 
  var est =  lat0 + (lat1 -lat0) *( lont  - lon0)/ ( lon1 -lon0);

  var v0 = lonLatToVector3(lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);
  v0.cross(v1);

  var l0 = lonLatToVector3(lont, lat0);
  var l1 = lonLatToVector3(lont, lat1);
  l0.cross(l1);

  var x1 = v0.clone().cross(l0);
  var x2 = l0.clone().cross(v0);

  var lonlat1 = vector3toLonLat(x1);
  var lonlat2 = vector3toLonLat(x2);
 
  if (Math.abs(lonlat1[1] - est) < Math.abs(lonlat2[1] -est) )
  {
    return lonlat1[1];
  }
  else
  return lonlat2[1];


}


function getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
{
  if (Math.abs(lat1 - lat0) < 0.01)
  {
    return (lat1 + lat0)/2.0;
  }

  
  //return getCrossLatFromLonLat(lon0, lat0, lon1, lat1, 180);

 var est =  lat0 + (lat1 -lat0) *( 180  - Math.abs(lon0) )/ ( 180  - Math.abs(lon0) + 180 - Math.abs(lon1));

 var v0 = lonLatToVector3(lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);
  v0.cross(v1);

  var l0 = lonLatToVector3(180, lat0);
  var l1 = lonLatToVector3(180, lat1);
  l0.cross(l1);

  var x1 = v0.clone().cross(l0);
  var x2 = l0.clone().cross(v0);

  var lonlat1 = vector3toLonLat(x1);
  var lonlat2 = vector3toLonLat(x2);
 
  if (Math.abs(lonlat1[1] - est) < Math.abs(lonlat2[1] -est) )
  {
    return lonlat1[1];
  }
  else
  return lonlat2[1];

  //https://gis.stackexchange.com/questions/18562/how-can-i-make-a-polyline-wrap-around-the-world
  // original post is in Cartesian coordinates
 
  //(x0, y0, z0) = (cos(lon0)*sin(lat0), sin(lon0)*sin(lat0), cos(lat0))
  
   var x0 = Math.cos(lon0*Math.PI/180)*Math.sin(lat0*Math.PI/180);
   var y0 = Math.sin(lon0*Math.PI/180) * Math.sin(lat0*Math.PI/180);
   var z0 = Math.cos(lat0*Math.PI/180);

   var x1 = Math.cos(lon1*Math.PI/180)*Math.sin(lat1*Math.PI/180);
   var y1 = Math.sin(lon1*Math.PI/180) * Math.sin(lat1*Math.PI/180);
   var z1 = Math.cos(lat1*Math.PI/180);

   var t = y1 / (y1 - y0);

   //(x, y, z) = (t * x0 + (1-t) * x1, 0, t * z0 + (1-t) * z1)
   var x = t * x0 + (1-t) * x1;
   var z =  t * z0 + (1-t) * z1;
   
   //lat2 = ATan(z/x).
   var lat2 = Math.atan(z/x)*180/Math.PI;
   return lat2;






  // based on   
  //https://gis.stackexchange.com/questions/18562/how-can-i-make-a-polyline-wrap-around-the-world
  // original post is in Cartesian coordinates, not Three.js's, so  bit conversion. 
  /**
    Cartesin:   z                             WebGL THREE.JS:           y
                |                                                       |
                |                                                       |
                --------y                                                --------- x
               /                                                       /
              /                                                       /
            x                                                        z

  var v0 = lonLatToVector3 (lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);

  var t = v1.z/(v1.x - v0.x);
  var z = t*v0.z + (1-t)*v1.z;
  var y = t*v0.y + (1-t)*v1.y

  var lat2 = Math.atan(y/z)*180/Math.PI;

  return lat2;
  */


}

function slicePoly (poly, wlont)
{
  var ret =[];
  var minMax = polyMinMaxLon (poly);
  if (minMax[1] - minMax[0] <=wlont)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    var polyArray = cutAlongLont (poly, minMax[0] + (minMax[1] - minMax[0])/2);
    for (var i=0; i < polyArray.length; i++)
    {
       var newPolyArray = slicePoly(polyArray[i], wlont);
       ret = ret.concat(newPolyArray);

    }
    return ret;
  }
}

function polyMinMaxLon (poly)
{
  var min = poly[0][0];
  var max = min;
  for (var i=1; i<poly.length; i++)
  {
    if (poly[i][0] < min)
    {
      min = poly[i][0];
    }
    if (poly[i][0] > max)
    {
      max = poly[i][0];
    }
  }

  return [min, max];
}

// the poly arrray in  geo point.
function cutAlong180 (poly)
{
  var ret = [];
  var crossIndice =[];   // contain [beforeIdx, afterIdx, crossLat]


  var counter =0;  // how many times crossed the line

  for (var i=0; i < poly.length-1; i++)
  {
    if (Math.abs(poly[i][0] - poly[i+1][0]) > 180)
    {
      counter++;
      var crossLat = getCross180LatFromLonLat(poly[i][0], poly[i][1], poly[i+1][0], poly[i+1][1]);
      var cross = [i, i+1, crossLat];
      if ((crossIndice.length == 0) || (crossLat <= crossIndice[crossIndice.length-1][2]) )
      {
        crossIndice.push(cross);
      }
      else
      {
        for (var j=0; j< crossIndice.length; j++)
        {
          if (crossLat > crossIndice[j][2])
          {
            crossIndice.splice(j, 0, cross);
            break; 
          }
        }
        
      }
    }
  }

  // check end point to start point
  var end = poly.length -1;
  if (Math.abs(poly[end][0] - poly[0][0]) > 180)
  {
    counter++;
    var crossLat2 = getCross180LatFromLonLat(poly[end][0], poly[End][1], poly[0][0], poly[0][1]);
    var cross2 = [end, 0, crossLat2];
    if ((crossIndice.length == 0) || (crossLat2 <= crossIndice[crossIndice.length-1][2]) )
    {
      crossIndice.push(cross2);
    }
    else
    {
      for (var j=0; j< crossIndice.length; j++)
      {
        if (crossLat2 > crossIndice[j][2])
        {
          crossIndice.splice(j, 0, cross2);
          break; 
        }
      }
      
    }
  }


  if (counter == 0)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    // split into two poly, and recursively keep spliting
    var rightPoly =[];  // negative lon
     var rstart = [-180, crossIndice[0][2]];
     rightPoly.push(rstart);

     // then copy from after index of top cross all the way to the before index of the 2nd cross
     if (crossIndice[1][0] >= crossIndice[0][1])
     {
       for (var k = crossIndice[0][1];k <= crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }
     else
     {
       // rounded back to o, 1, 2, ...
       for (var k = crossIndice[0][1]; k <= poly.length -1; k++)
       {
         rightPoly.push(poly[k]);
       }

       for (var k = 0; k < crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }

     var rend = [ -180, crossIndice[1][2] ];
     rightPoly.push (rend);


     var leftPoly = [];
     var lstart = [180, crossIndice[1][2]];
     leftPoly.push(lstart);

     // then copy from after index of 2nd top cross all the to the before index of the 1st top cross
     if (crossIndice[0][0] >= crossIndice[1][1])
     {
       for (var k = crossIndice[1][1]; k  <= crossIndice[0][0]; k++ )
       {
         leftPoly.push(poly[k]);
       }
     }
     else
     {
       for (var k= crossIndice[1][1]; k <= poly.length -1; k++)
       {
         leftPoly.push(poly[k]);

       }
       for (var k=0; k <= crossIndice[0][0]; k++)
       {
        leftPoly.push(poly[k]);
       }
     }

     var lend = [180, crossIndice[0][2]];
     leftPoly.push(lend);

     return cutAlong180(leftPoly).concat(cutAlong180(rightPoly));





  }



}

function crossedLont (leftLon, crossLon, rightLon)
{
   if ( ( ( leftLon < crossLon) && (rightLon > crossLon) ) ||   ((rightLon < crossLon) && (leftLon > crossLon)))
    {
      return true;
    }
    return false;

}

// cut along a latitude, the poly is not cross 180
function cutAlongLont (poly, lont)
{
  var ret = [];
  var crossIndice =[];   // contain [beforeIdx, afterIdx, crossLat]


  var counter =0;  // how many times crossed the line

  for (var i=0; i < poly.length-1; i++)
  {
    if ( crossedLont(poly[i][0], lont, poly[i+1][0]) )
    {
      counter++;
      var crossLat = getCrossLatFromLonLat(poly[i][0], poly[i][1], poly[i+1][0], poly[i+1][1], lont);
      var cross = [i, i+1, crossLat];
      if ((crossIndice.length == 0) || (crossLat <= crossIndice[crossIndice.length-1][2]) )
      {
        crossIndice.push(cross);
      }
      else
      {
        for (var j=0; j< crossIndice.length; j++)
        {
          if (crossLat > crossIndice[j][2])
          {
            crossIndice.splice(j, 0, cross);
            break; 
          }
        }
        
      }
    }
  }

  // check end point to start point
  var end = poly.length -1;
  if (crossedLont(poly[end][0], lont, poly[0][0]))
  {
    counter++;
    var crossLat2 = getCrossLatFromLonLat(poly[end][0], poly[End][1], poly[0][0], poly[0][1], lont);
    var cross2 = [end, 0, crossLat2];
    if ((crossIndice.length == 0) || (crossLat2 <= crossIndice[crossIndice.length-1][2]) )
    {
      crossIndice.push(cross2);
    }
    else
    {
      for (var j=0; j< crossIndice.length; j++)
      {
        if (crossLat2 > crossIndice[j][2])
        {
          crossIndice.splice(j, 0, cross2);
          break; 
        }
      }
      
    }
  }


  if (counter == 0)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    // split into two poly, and recursively keep spliting
    var rightPoly =[];  // 
     var rstart = [lont, crossIndice[0][2]];
     rightPoly.push(rstart);

     // then copy from after index of top cross all the way to the before index of the 2nd cross
     if (crossIndice[1][0] >= crossIndice[0][1])
     {
       for (var k = crossIndice[0][1];k <= crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }
     else
     {
       // rounded back to o, 1, 2, ...
       for (var k = crossIndice[0][1]; k <= poly.length -1; k++)
       {
         rightPoly.push(poly[k]);
       }

       for (var k = 0; k < crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }

     var rend = [ lont, crossIndice[1][2] ];
     rightPoly.push (rend);


     var leftPoly = [];
     var lstart = [lont, crossIndice[1][2]];
     leftPoly.push(lstart);

     // then copy from after index of 2nd top cross all the to the before index of the 1st top cross
     if (crossIndice[0][0] >= crossIndice[1][1])
     {
       for (var k = crossIndice[1][1]; k  <= crossIndice[0][0]; k++ )
       {
         leftPoly.push(poly[k]);
       }
     }
     else
     {
       for (var k= crossIndice[1][1]; k <= poly.length -1; k++)
       {
         leftPoly.push(poly[k]);

       }
       for (var k=0; k <= crossIndice[0][0]; k++)
       {
        leftPoly.push(poly[k]);
       }
     }

     var lend = [lont, crossIndice[0][2]];
     leftPoly.push(lend);

     return cutAlongLont(leftPoly, lont).concat(cutAlongLont(rightPoly, lont));





  }



}

/**
 * Find the bounding regtangle and uses the mid point of the rectangle in terms of lon. and lat.
 * 
 * @param polySides  Vecter3 array composing the sides of the polygon.
 */
function findCenterPoint (polySides)
{
  var minLat, maxLat, minLon, maxLon;

  var init = vector3toLonLat(polySides[0]);
  minLon = maxLon = init[0];
  minLat = maxLat = init[1];

  for (var i=1; i<polySides.length; i++)
  {
    var temp = vector3toLonLat(polySides[i]);
    var lon = temp[0];
    var lat = temp[1];
    if (lon < minLon)
    {
      minLon = lon;
    }
    if (lon > maxLon)
    {
      maxLon = lon;
    }
    if (lat < minLat)
    {
      minLat = lat;
    }
    if (lat > maxLat)
    {
      maxLat = lat;
    }
  }

  var midLat = (minLat + maxLat)/2.0;

  //we have to take care of +180 and -180 scenarios
  var midLon;
  // all positives or all negative
  if  (((minLon >=0) && (maxLon >=0)) || ((minLon <=0) && (maxLon <=0)))
  {
   midLon = (minLon + maxLon)/2.0;
  }
  else
  {
    // one positive and one negative, which mean minLon is negative.
    if (Math.abs(minLon) + Math.abs(maxLon) <= 180.0)
    {
      midLon = (minLon + maxLon)/2.0;
    }
    else
    {
      var reverseMid = ((180 - Math.abs(minLon) ) + (180 -Math.abs(maxLon)))/2;
      if (Math.abs(minLon) < Math.abs(maxLon))
      {
        midLon = minLon - reverseMid;
      }
      else
      {
        midLon = maxLon + reverseMid;
      }
    }
  }
  //return lonLatToVector3(midLon*Math.PI/180, midLat*Math.PI/180);
  return lonLatToVector3(midLon, midLat);
}


function getRandomColor() {
  var letters = '0123456789ABCDEF';
  var color = '#';
  for (var i = 0; i < 6; i++) {
  color += letters[Math.floor(Math.random() * 16)];
  }
  return color;
  }

function convertFlatCoordsToSphereCoords(x, y) {
  // Calculate the relative 3d coordinates using Mercator projection relative to the radius of the globe.
  // Convert latitude and longitude on the 90/180 degree axis.
  let latitude = ((x - globeWidth) / globeWidth) * -180
  let longitude = ((y - globeHeight) / globeHeight) * -90
  latitude = (latitude * Math.PI) / 180 //(latitude / 180) * Math.PI
  longitude = (longitude * Math.PI) / 180 //(longitude / 180) * Math.PI // Calculate the projected starting point
  const radius = Math.cos(longitude) * globeRadius
  const targetX = Math.cos(latitude) * radius
  const targetY = Math.sin(longitude) * globeRadius
  const targetZ = Math.sin(latitude) * radius

  
 

  return new THREE.Vector3(targetX, targetY, targetZ);
}

render();


function resizeRendererToDisplaySize(renderer) {
  const canvas = renderer.domElement;
  const width = canvas.clientWidth;
  const height = canvas.clientHeight;
  const needResize = canvas.width !== width || canvas.height !== height;
  if (needResize) {
    renderer.setSize(width, height, false);
  }
  return needResize;
}



function render() {

  if (resizeRendererToDisplaySize(renderer)) {
    const canvas = renderer.domElement;
    camera.aspect = canvas.clientWidth / canvas.clientHeight;
    camera.updateProjectionMatrix();
  }
  sphere.updateWorldMatrix(true, false);

  ///
  normalMatrix.getNormalMatrix(camera.matrixWorldInverse);
  camera.getWorldPosition(cameraPosition);
  labels.forEach((info, ndx) => {
    const {elem, meshPoint} = info;
    
    meshPoint.updateWorldMatrix(true, false);
    meshPoint.getWorldPosition(tempV);
    myV.copy(tempV);
    // 
    cameraToPoint.copy(myV);
    // get the normalized screen coordinate of that position
    // x and y will be in the -1 to +1 range with x = -1 being
    // on the left and y = -1 being on the bottom
    tempV.project(camera);

    //////////////////////////// make label invisible if on the other side of the sphere
    // Orient the position based on the camera's orientation.
    // Since the sphere is at the origin and the sphere is a unit sphere
    // this gives us a camera relative direction vector for the position.
    
    myV.applyMatrix3(normalMatrix);
    

    // compute the direction to this position from the camera
    
    cameraToPoint.applyMatrix4(camera.matrixWorldInverse).normalize();

    // get the dot product of camera relative direction to this position
    // on the globe with the direction from the camera to that point.
    // -1 = facing directly towards the camera
    // 0 = exactly on tangent of the sphere from the camera
    // > 0 = facing away
    const dot = myV.dot(cameraToPoint);

    // if the orientation is not facing us hide it.
    if (dot > settings.maxVisibleDot) {
      elem.style.display = 'none';
      
    }
    else {

       // restore the element to its default display style
       elem.style.display = '';
    ////////////////////////////////////////////////

    // convert the normalized position to CSS coordinates
    const x = (tempV.x *  .5 + .5) * canvas.clientWidth;
    const y = (tempV.y * -.5 + .5) * canvas.clientHeight;
    
   /* 
   const x = ((tempV.x *  .5 + .5) * canvas.clientWidth)%canvas.clientWidth;
   const y = ((tempV.y * -.5 + .5) * canvas.clientHeight)%canvas.clientHeight;
   */

    // move the elem to that position
    elem.style.transform = `translate(-50%, -50%) translate(${x}px,${y}px)`;
    }
  });
  ////



  requestAnimationFrame(render);
  renderer.render(scene, camera);
}
