
// Mason Yin's sphere test with three.js
let  polyCounter =0;




  
// input data: clusters, egdes, and labels.
// Later on in the real web site we will read them from json files generated by the web server.
// from the update baby test data:


const g_clusters = 
[[[-0.15179258316357214,0.8640881110037779,-0.47990702028460985],[-0.15285969902925445,0.8580711614592085,-0.4902527861060361],[-0.1542432813710499,0.8520346534359838,-0.5002458990297813],[-0.16820065888716754,0.6687455567562158,-0.724215381408557],[-0.10202261227248643,0.6251060177353519,-0.7738435585931746],[-0.022351507393624393,0.5676364098131776,-0.8229758905166293],[-0.0010599674492995225,0.5519844677107412,-0.8338537185112844],[-0.0008124528977386984,0.5517949000030146,-0.8339794531347594],[0.04982707476220109,0.5105769869579537,-0.8583870939206737],[0.08300316630676362,0.4845998283508951,-0.8707889989804275],[0.022948733073525678,0.8567819946577688,-0.5151679039697398],[0.02611484588737733,0.8646880600233541,-0.5016299170477446],[0.02611484588737733,0.8646880600233541,-0.5016299170477446],[0.022948733073525678,0.8567819946577688,-0.5151679039697398],[0.08300316630676362,0.4845998283508951,-0.8707889989804275],[0.0874394947461984,0.48096964735361786,-0.8723660545224499],[0.48712707084659584,0.6768055825129894,-0.5519433126034492],[0.5356047655797185,0.6954003565952437,-0.47910946466909077],[0.5486772865764888,0.7001043617746896,-0.4569541747474425],[0.5878769788539373,0.7411994620650171,-0.32407408901067186],[0.5939393506987894,0.7468936359923735,-0.2989748220261908],[0.5953423097065708,0.7482490175649182,-0.2927301521647202],[0.6169237595041327,0.7655555524455097,-0.1825644299395085],[0.6193483950006067,0.7641325622492272,-0.18030250392216798],[0.6200753792636964,0.7636989021841937,-0.17963994776674957],[0.6383750107657711,0.7524774555326136,-0.16203402280066093],[0.41025061424940146,0.8808090676241527,0.23636797562076736],[0.40648338983056964,0.8821991205698037,0.23768879960510167],[0.40569031322193805,0.8823759742894721,0.23838626167334126],[0.4025310824677462,0.8834655509464189,0.2397026239703797],[0.4015337325615498,0.8842917253391792,0.2383250010213938],[0.4015337325615498,0.8842917253391792,0.2383250010213938],[0.4025310824677462,0.8834655509464189,0.2397026239703797],[0.4022853828938297,0.8830216436401102,0.24174210963976328],[0.40136457430136596,0.8827745565200185,0.2441629801111712],[0.3988110616504267,0.8829263013960821,0.24777183739944014],[0.3975740521284493,0.8831829917750876,0.2488426734171022],[0.3947552503588482,0.8844406265508368,0.2488635578394042],[0.3927188226641153,0.8855230742682768,0.2482353948649773],[0.3890601509652038,0.8878646944308322,0.24561857282008986],[0.38818160952023006,0.8885583310870152,0.24449771018588715],[0.388366078096719,0.8888901787044656,0.2429939085378818],[0.38897326727437836,0.8890748174646063,0.24134159669682312],[0.38897326727437836,0.8890748174646063,0.24134159669682312],[0.388366078096719,0.8888901787044656,0.2429939085378818],[0.38818160952023006,0.8885583310870152,0.24449771018588715],[0.3890601509652038,0.8878646944308322,0.24561857282008986],[0.3927188226641153,0.8855230742682768,0.2482353948649773],[0.3947552503588482,0.8844406265508368,0.2488635578394042],[0.3975740521284493,0.8831829917750876,0.2488426734171022],[0.3988110616504267,0.8829263013960821,0.24777183739944014],[0.40136457430136596,0.8827745565200185,0.2441629801111712],[0.4022853828938297,0.8830216436401102,0.24174210963976328],[0.4025310824677462,0.8834655509464189,0.2397026239703797],[0.40569031322193805,0.8823759742894721,0.23838626167334126],[0.40648338983056964,0.8821991205698037,0.23768879960510167],[0.41025061424940146,0.8808090676241527,0.23636797562076736],[0.6383750107657711,0.7524774555326136,-0.16203402280066093],[0.6425135616537656,0.7498241785147,-0.1579241096405114],[0.6639902640552716,0.7353966862529833,-0.1353094345858482],[0.8201083866825281,0.5477589909007912,0.16547604654549902],[0.5939146983700352,0.7042686182543276,0.3889357844197039],[0.5916729105364756,0.7048846912237243,0.39122977777225826],[0.5886299868525255,0.705651336929769,0.39442480812852687],[0.5765337704680136,0.7086062640394779,0.40679967314877435],[0.5600851842372623,0.7121815504651423,0.42320447253659543],[0.5534557819096454,0.7134347903716164,0.42976446730527984],[0.3794756557369685,0.7004875507286991,0.6044132840839174],[0.26721435346274125,0.8283068377395401,0.4924472274847453],[0.2611403734479613,0.8326881870642597,0.48829917927342015],[0.353878460844734,0.8841204479067689,0.3051246770474267],[0.3807920897191194,0.890785953953138,0.2479874364703665],[0.3807920897191194,0.890785953953138,0.2479874364703665],[0.353878460844734,0.8841204479067689,0.3051246770474267],[0.2611403734479613,0.8326881870642597,0.48829917927342015],[0.1764711149300984,0.880197886848235,0.44057873936815184],[0.1479913920044105,0.892050326896507,0.42701845648219017],[0.1295864426467074,0.8989093132208401,0.41853243660080774],[0.12015514393458229,0.9001677126545193,0.41864164924239267],[0.06981483070601784,0.9047327427083874,0.42021964933216654],[0.10250763564521828,0.9896468822077654,0.10045513013717462],[0.14877382114177642,0.9834072624364883,0.10380995294309028],[0.270028420691599,0.9530222501930132,0.1372342619605117],[0.2795864745337156,0.952842601719515,0.11799313372478053],[0.26956515559546423,0.9560986300509404,0.11493492290643494],[0.117182079213575,0.9897995675656417,0.0810257758867654],[0.10315426891079021,0.9917809434402226,0.07569515859222772],[0.10592619574188579,0.9917025769034529,0.07283982440055159],[0.10728601179293527,0.9942206518408415,-0.003873903294925455],[0.10452457821453194,0.9944131096109862,0.014737027613566767],[0.10082343487754893,0.9919571330071872,0.07652242322126332],[0.09750051841316491,0.992071319557308,0.07929782986302938],[0.09567971064657291,0.9923312290357514,0.07825678789078444],[0.08953676901871041,0.9930226787170646,0.07674064468894895],[0.08529307193571266,0.9933788394011296,0.07696475368526971],[0.0844936187500395,0.9934275121301632,0.07721791588354054],[0.0841930984087576,0.9934383361546807,0.07740668213115039],[0.08016653799942501,0.993978832806232,0.0746954223386389],[0.07693532070820285,0.9945909001392145,0.0697846529531621],[-0.018944127049775553,0.9976695149743017,0.06554890495853828],[-0.03281421084642631,0.9973463073126044,0.06498900565817638],[-0.0077563981675413595,0.9999493768916455,-0.006409519597944665],[-0.0077563981675413595,0.9999493768916455,-0.006409519597944665],[-0.03281421084642631,0.9973463073126044,0.06498900565817638],[-0.018944127049775553,0.9976695149743017,0.06554890495853828],[0.07693532070820285,0.9945909001392145,0.0697846529531621],[0.08016653799942501,0.993978832806232,0.0746954223386389],[0.0841930984087576,0.9934383361546807,0.07740668213115039],[0.0844936187500395,0.9934275121301632,0.07721791588354054],[0.08529307193571266,0.9933788394011296,0.07696475368526971],[0.08953676901871041,0.9930226787170646,0.07674064468894895],[0.09567971064657291,0.9923312290357514,0.07825678789078444],[0.09750051841316491,0.992071319557308,0.07929782986302938],[0.10082343487754893,0.9919571330071872,0.07652242322126332],[0.10452457821453194,0.9944131096109862,0.014737027613566767],[0.10728601179293527,0.9942206518408415,-0.003873903294925455],[0.10592619574188579,0.9917025769034529,0.07283982440055159],[0.10315426891079021,0.9917809434402226,0.07569515859222772],[0.117182079213575,0.9897995675656417,0.0810257758867654],[0.26956515559546423,0.9560986300509404,0.11493492290643494],[0.2795864745337156,0.952842601719515,0.11799313372478053],[0.270028420691599,0.9530222501930132,0.1372342619605117],[0.14877382114177642,0.9834072624364883,0.10380995294309028],[0.10250763564521828,0.9896468822077654,0.10045513013717462],[0.06981483070601784,0.9047327427083874,0.42021964933216654],[0.06780276218240607,0.9048272845680182,0.4203455370783694],[0.04408392342928074,0.905289493651195,0.42250152707397903],[0.037589309633223274,0.9052301666811639,0.42325570183009953],[0.07514701967337756,0.9924044165194211,0.09739814940211446],[-0.05635592014374242,0.9913499447752467,0.11852973153967514],[-0.06860777981240314,0.9870877076007727,0.14474401560224967],[-0.10294477723629794,0.9880715161209552,0.11452969863841442],[-0.21508478441546797,0.9694104934005512,0.11824479184239627],[-0.21827810592660737,0.9689425042948494,0.11621141012791592],[-0.21938327239037358,0.9687144278928144,0.11603162063674129],[-0.2232304932481628,0.9680906562271369,0.11387988501001203],[-0.22343352635772118,0.9680665920728897,0.11368611441919783],[-0.22292561683400608,0.968534667898227,0.11065607275901897],[-0.22331415903501511,0.9688649237313101,0.10691840785200063],[-0.22331415903501511,0.9688649237313101,0.10691840785200063],[-0.22292561683400608,0.968534667898227,0.11065607275901897],[-0.22343352635772118,0.9680665920728897,0.11368611441919783],[-0.2232304932481628,0.9680906562271369,0.11387988501001203],[-0.21938327239037358,0.9687144278928144,0.11603162063674129],[-0.21827810592660737,0.9689425042948494,0.11621141012791592],[-0.21508478441546797,0.9694104934005512,0.11824479184239627],[-0.10294477723629794,0.9880715161209552,0.11452969863841442],[-0.06860777981240314,0.9870877076007727,0.14474401560224967],[-0.06327929687824409,0.9752948829442569,0.21164976231818305],[-0.10074974144156167,0.9742169251685934,0.2018684529947901],[-0.16945950203300014,0.9613473794794891,0.2170131174345155],[-0.16945950203300014,0.9613473794794891,0.2170131174345155],[-0.10074974144156167,0.9742169251685934,0.2018684529947901],[-0.06327929687824409,0.9752948829442569,0.21164976231818305],[-0.06860777981240314,0.9870877076007727,0.14474401560224967],[-0.05635592014374242,0.9913499447752467,0.11852973153967514],[0.07514701967337756,0.9924044165194211,0.09739814940211446],[0.037589309633223274,0.9052301666811639,0.42325570183009953],[0.03653997986722079,0.9052118348431903,0.4233867781723088],[-0.042747063094260025,0.9666102012315267,0.2526606567551877],[-0.042747063094260025,0.9666102012315267,0.2526606567551877],[0.03653997986722079,0.9052118348431903,0.4233867781723088],[-0.04272328884737744,0.8788424235138793,0.47519544949664116],[-0.13479384762321026,0.8992281362180518,0.4161963210754508],[-0.16490806331697888,0.9020723251370727,
  0.39883687251160577],[-0.20446393855800846,0.9330838946146917,0.29588670710261056],[-0.2243087010328513,0.9416103640410664,0.2511085999550907],[-0.22681841038435935,0.941322242948786,0.24993167794535237],[-0.22720606137095417,0.9411516857195352,0.2502217219658909],[-0.2310240712966689,0.9398108035469804,0.2517608627604593],[-0.23354307114404407,0.9391163802101128,0.25202789199146763],[-0.236360781652156,0.9385358048545479,0.2515633596190194],[-0.23778213359287187,0.9386227654667614,0.249893899668541],[-0.23951760665006194,0.9391369434387852,0.246278536565983],[-0.24029166646007144,0.9401270028165889,0.241704641256512],[-0.24023803299972232,0.9403093857352078,0.241047602350035],[-0.23976651662583276,0.9405255865328059,0.2406733025955221],[-0.23475969608207126,0.9423298045469228,0.23854229092136225],[-0.22944006589719346,0.9437712432622041,0.23801910963703143],[-0.22942457187118329,0.9437818173727379,0.23799211545413898],[-0.24345862286028006,0.9460513285373119,0.21381015581062346],[-0.2527280584203591,0.9492295993267312,0.1873277775693954],[-0.24985481053196945,0.9511504308075497,0.18134340800990348],[-0.24455531684219836,0.9525922711465883,0.180999066174378],[-0.2305294804759438,0.956335943196482,0.179660018874503],[-0.22388754597359783,0.9580699605426353,0.17881923124695923],[-0.23445423848654695,0.9622875984047913,0.13796299508213208],[-0.24051520360094963,0.9626123041975004,0.1246193750761602],[-0.2809823781700241,0.9494810352240504,0.13976647276004095],[-0.2855818841066471,0.9490720680512265,0.13306087747743855],[-0.2911602283334228,0.9483750871682352,0.12573947461108478],[-0.29773523144412894,0.9471794646112499,0.11918386541666251],[-0.30086065252937905,0.9465462044032318,0.11633207076912079],[-0.28215730902148634,0.953708153992807,0.10405772423701182],[-0.2572070002494199,0.9625098101961157,0.08613608012286422],[-0.26282534015261555,0.9620859297914343,0.07289378760232995],[-0.26282534015261555,0.9620859297914343,0.07289378760232995],[-0.2572070002494199,0.9625098101961157,0.08613608012286422],[-0.28215730902148634,0.953708153992807,0.10405772423701182],[-0.30086065252937905,0.9465462044032318,0.11633207076912079],[-0.29773523144412894,0.9471794646112499,0.11918386541666251],[-0.2911602283334228,0.9483750871682352,0.12573947461108478],[-0.2855818841066471,0.9490720680512265,0.13306087747743855],[-0.2809823781700241,0.9494810352240504,0.13976647276004095],[-0.24051520360094963,0.9626123041975004,0.1246193750761602],[-0.23445423848654695,0.9622875984047913,0.13796299508213208],[-0.22388754597359783,0.9580699605426353,0.17881923124695923],[-0.2305294804759438,0.956335943196482,0.179660018874503],[-0.24455531684219836,0.9525922711465883,0.180999066174378],[-0.24985481053196945,0.9511504308075497,0.18134340800990348],[-0.2535464525189892,0.9508018683914052,0.17801686290475102],[-0.26716805397335947,0.9464357742649222,0.18132996478145927],[-0.30099304521619097,0.933439241968571,0.19517778635035193],[-0.298862536831893,0.933290111602231,0.19912496494387807],[-0.30291161433263963,0.9317825875569069,0.2000643982025521],[-0.30565778715053443,0.9322931528496957,0.1933980204237174],[-0.3061007615801399,0.9322241354652162,0.19302975163478997],[-0.29137896343063424,0.9382969140006799,0.18627184662983803],[-0.3089421773940244,0.9325529843799505,0.18681451322391154],[-0.3089978874593115,0.9325810290158849,0.1865822335201184],[-0.3089978874593115,0.9325810290158849,0.1865822335201184],[-0.3089421773940244,0.9325529843799505,0.18681451322391154],[-0.30912142054115344,0.9315923649306462,0.19125797490704838],[-0.31557133664165615,0.9286934172561033,0.19479031863873503],[-0.31638069981914957,0.9283832336984967,0.19495595443450214],[-0.3194093832820711,0.9273921163708901,0.194734456027916],[-0.3195535188553187,0.9272661412014861,0.19509754475259083],[-0.3195535188553187,0.9272661412014861,0.19509754475259083],[-0.3194093832820711,0.9273921163708901,0.194734456027916],[-0.31638069981914957,0.9283832336984967,0.19495595443450214],[-0.31557133664165615,0.9286934172561033,0.19479031863873503],[-0.30912142054115344,0.9315923649306462,0.19125797490704838],[-0.3089421773940244,0.9325529843799505,0.18681451322391154],[-0.29137896343063424,0.9382969140006799,0.18627184662983803],[-0.3061007615801399,0.9322241354652162,0.19302975163478997],[-0.30565778715053443,0.9322931528496957,0.1933980204237174],[-0.30291161433263963,0.9317825875569069,0.2000643982025521],[-0.303165152580886,0.931540403210409,0.20080679133733675],[-0.3068752827969033,0.930126119551816,0.20172496755682354],[-0.3037853805843471,0.9296169927558046,0.208630509089342],[-0.30514756811489613,0.9284110583419066,0.2119855382379322],[-0.30731817292322905,0.9277481412666048,0.2117520412357062],[-0.30731817292322905,0.9277481412666048,0.2117520412357062],[-0.30514756811489613,0.9284110583419066,0.2119855382379322],[-0.3037853805843471,0.9296169927558046,0.208630509089342],[-0.3068752827969033,0.930126119551816,0.20172496755682354],[-0.303165152580886,0.931540403210409,0.20080679133733675],[-0.30291161433263963,0.9317825875569069,0.2000643982025521],[-0.298862536831893,0.933290111602231,0.19912496494387807],[-0.30099304521619097,0.933439241968571,0.19517778635035193],[-0.26716805397335947,0.9464357742649222,0.18132996478145927],[-0.2535464525189892,0.9508018683914052,0.17801686290475102],[-0.24985481053196945,0.9511504308075497,0.18134340800990348],[-0.2527280584203591,0.9492295993267312,0.1873277775693954],[-0.24345862286028006,0.9460513285373119,0.21381015581062346],[-0.22942457187118329,0.9437818173727379,0.23799211545413898],[-0.22944006589719346,0.9437712432622041,0.23801910963703143],[-0.23475969608207126,0.9423298045469228,0.23854229092136225],[-0.23976651662583276,0.9405255865328059,0.2406733025955221],[-0.24023803299972232,0.9403093857352078,0.241047602350035],[-0.24029166646007144,0.9401270028165889,0.241704641256512],[-0.23951760665006194,0.9391369434387852,0.246278536565983],[-0.23778213359287187,0.9386227654667614,0.249893899668541],[-0.236360781652156,0.9385358048545479,0.2515633596190194],[-0.23745683474979948,0.9377342462106423,0.2535127908299006],[-0.2376016645076404,0.9374774110405478,0.25432568256452304],[-0.24041098946856262,0.9355022595234127,0.2589171268366314],[-0.25442057156135456,0.9316002103428809,0.2595981911637555],[-0.2781555738555911,0.9233060048234346,0.2648310748195058],[-0.2811902046919677,0.9206809172761434,0.270700419927359],[-0.28550051195296455,0.9160684219824649,0.28161694537288057],[-0.29044880951398694,0.9092041474842322,0.29830740394663074],[-0.29476544645384845,0.9010924779378828,0.31803408273427186],[-0.3380559832448231,0.9057535226800578,0.25559481282890323],[-0.36568462307212374,0.8911156636550454,0.2686775584920092],[-0.36142509065602924,0.8895895796251352,0.2792888892646042],[-0.3725101238118281,0.8888479487006268,0.2668061688724315],[-0.3731820460048734,0.8886289476842263,0.26659661265147616],[-0.37342550695455035,0.8885707273983109,0.2664497197719936],[-0.3737006053615,0.8894292506462462,0.26317953120884097],[-0.3743845345142579,0.8897113318941204,0.26124694489262984],[-0.3743845345142579,0.8897113318941204,0.26124694489262984],[-0.3737006053615,0.8894292506462462,0.26317953120884097],[-0.37342550695455035,0.8885707273983109,0.2664497197719936],[-0.3731820460048734,0.8886289476842263,0.26659661265147616],[-0.36752816900500623,0.8857166599034455,0.2836001469627827],[-0.35536313580134016,0.8828586686542927,0.30704659727052536],[-0.3703702565140605,0.8815112500420579,0.29285455287394374],[-0.3706520681774579,0.8814656369581537,0.2926352255244224],[-0.3821173007387074,0.8825188897570138,0.27412912595748046],[-0.38208295628365024,0.8835198116637678,0.27093422986984556],[-0.3898780269994752,0.8783555706911732,0.2765621367772168],[-0.39006993375515164,0.8783114567791067,0.2764316039652755],[-0.39201925201047116,0.8783453305912495,0.27355143260765336],[-0.3922155133488385,0.8785413363982558,0.27263915956456797],[-0.3935101916346225,0.8785597199983083,0.2707074943110683],[-0.3937756483562167,0.8788242285702074,0.2694600416381273],[-0.39514000466856125,0.8788301728437338,0.2674357941824214],[-0.399806629044759,0.876174788620137,0.2692069820014421],[-0.40107673639409674,0.8741535771523871,0.2738484527528793],[-0.4016267117319746,0.8736682183833685,0.2745902922723093],[-0.402228566760591,0.8727858157536837,0.276508770025288],[-0.4028536540185915,0.8724888163612046,0.27653607136952896],[-0.4063746200706296,0.8704774220112427,0.2777205896780297],[-0.4063746200706296,0.8704774220112427,0.2777205896780297],[-0.4028536540185915,0.8724888163612046,0.27653607136952896],[-0.402228566760591,0.8727858157536837,0.276508770025288],[-0.4016267117319746,0.8736682183833685,0.2745902922723093],[-0.40107673639409674,0.8741535771523871,0.2738484527528793],[-0.399806629044759,0.876174788620137,0.2692069820014421],[-0.39514000466856125,0.8788301728437338,0.2674357941824214],[-0.3937756483562167,0.8788242285702074,0.2694600416381273],[-0.3935101916346225,0.8785597199983083,0.2707074943110683],[-0.3922155133488385,0.8785413363982558,0.27263915956456797],[-0.39201925201047116,0.8783453305912495,0.27355143260765336],[-0.39006993375515164,0.8783114567791067,0.2764316039652755],[-0.3898780269994752,0.8783555706911732,0.2765621367772168],[-0.38208295628365024,0.8835198116637678,0.27093422986984556],[-0.3821173007387074,0.8825188897570138,0.27412912595748046],[-0.38352691049944654,0.8809411318988052,0.27721802079158103],[-0.38352691049944654,0.8809411318988052,0.27721802079158103],[-0.3821173007387074,0.8825188897570138,0.27412912595748046],[-0.3706520681774579,0.8814656369581537,0.2926352255244224],[-0.3703702565140605,0.8815112500420579,0.29285455287394374],[-0.35536313580134016,0.8828586686542927,0.30704659727052536],[-0.36752816900500623,0.8857166599034455,0.2836001469627827],[-0.3731820460048734,0.8886289476842263,0.26659661265147616],[-0.3725101238118281,0.8888479487006268,0.2668061688724315],[-0.36142509065602924,0.8895895796251352,0.2792888892646042],
  [-0.36568462307212374,0.8911156636550454,0.2686775584920092],[-0.3380559832448231,0.9057535226800578,0.25559481282890323],[-0.29476544645384845,0.9010924779378828,0.31803408273427186],[-0.2916403564805629,0.8955692143828144,0.33600845930071316],[-0.29720955353287326,0.8942501839424216,0.33463874522794784],[-0.3723690742816216,0.8522346059152023,0.3674744195167988],[-0.3744012451074042,0.8524828838734647,0.3648241225094721],[-0.3759908430492373,0.8523457553907366,0.36350735784921645],[-0.37718328035174903,0.8518047420927543,0.36354016885536944],[-0.3795116622573178,0.8504617306793099,0.3642605425524987],[-0.39327473263120427,0.8519919691132773,0.3456076811072567],[-0.40143535442122086,0.8534193650408824,0.33245306976162176],[-0.40871455480922964,0.8493717150385147,0.33394625672348166],[-0.3960186046148066,0.8477917592171265,0.35272992189842806],[-0.3842690688063332,0.8473201882550736,0.3665866627880784],[-0.3842690688063332,0.8473201882550736,0.3665866627880784],[-0.3960186046148066,0.8477917592171265,0.35272992189842806],[-0.40871455480922964,0.8493717150385147,0.33394625672348166],[-0.40143535442122086,0.8534193650408824,0.33245306976162176],[-0.39327473263120427,0.8519919691132773,0.3456076811072567],[-0.3795116622573178,0.8504617306793099,0.3642605425524987],[-0.3825926386786395,0.8481280326131869,0.3664719813636523],[-0.3830869550434827,0.847621515262661,0.3671268877913238],[-0.38288208633522686,0.8472289840226568,0.36824496818764635],[-0.38288208633522686,0.8472289840226568,0.36824496818764635],[-0.3830869550434827,0.847621515262661,0.3671268877913238],[-0.3825926386786395,0.8481280326131869,0.3664719813636523],[-0.3795116622573178,0.8504617306793099,0.3642605425524987],[-0.37718328035174903,0.8518047420927543,0.36354016885536944],[-0.3759908430492373,0.8523457553907366,0.36350735784921645],[-0.3744012451074042,0.8524828838734647,0.3648241225094721],[-0.3723690742816216,0.8522346059152023,0.3674744195167988],[-0.29720955353287326,0.8942501839424216,0.33463874522794784],[-0.2916403564805629,0.8955692143828144,0.33600845930071316],[-0.29476544645384845,0.9010924779378828,0.31803408273427186],[-0.29044880951398694,0.9092041474842322,0.29830740394663074],[-0.28550051195296455,0.9160684219824649,0.28161694537288057],[-0.2811902046919677,0.9206809172761434,0.270700419927359],[-0.2781555738555911,0.9233060048234346,0.2648310748195058],[-0.25442057156135456,0.9316002103428809,0.2595981911637555],[-0.24041098946856262,0.9355022595234127,0.2589171268366314],[-0.2376016645076404,0.9374774110405478,0.25432568256452304],[-0.23745683474979948,0.9377342462106423,0.2535127908299006],[-0.236360781652156,0.9385358048545479,0.2515633596190194],[-0.23354307114404407,0.9391163802101128,0.25202789199146763],[-0.2310240712966689,0.9398108035469804,0.2517608627604593],[-0.22720606137095417,0.9411516857195352,0.2502217219658909],[-0.22681841038435935,0.941322242948786,0.24993167794535237],[-0.2243087010328513,0.9416103640410664,0.2511085999550907],[-0.20446393855800846,0.9330838946146917,0.29588670710261056],[-0.16490806331697888,0.9020723251370727,0.39883687251160577],[-0.13479384762321026,0.8992281362180518,0.4161963210754508],[-0.29109197043998075,0.8523533525288397,0.43446429908361506],[-0.2928098961769306,0.8521145139325333,0.4337778461913166],[-0.29378591763869033,0.8522592284242816,0.4328325798306325],[-0.16932907990459733,0.9022885720239897,0.3964883295805467],[-0.17110353698486483,0.902375112352115,0.39552842658749177],[-0.1804776888431368,0.9027859090554122,0.39039135011015935],[-0.22169439450323328,0.8893090784362601,0.39997619736266166],[-0.2869193094276606,0.8623256086553359,0.4172191924333767],[-0.2986633625046184,0.8573142981751362,0.4192998808035948],[-0.30010140762002013,0.8554894939468634,0.42199155310387715],[-0.30020723633632557,0.8546254619822021,0.4236637050574586],[-0.3005663411944774,0.8540478972694987,0.424572801425754],[-0.3018836986186165,0.8536166093527736,0.4245054967199112],[-0.3030262212625814,0.8530949427531763,0.42474007095666866],[-0.3140261571631544,0.8548871720633178,0.4129836505951842],[-0.327039764580354,0.8609103732737912,0.38971569325959693],[-0.332579811420882,0.8563726406743961,0.39498932813382714],[-0.31310059041275495,0.8492698866425147,0.42509843557156796],[-0.36430404633910124,0.8223765954181752,0.43701178145373715],[-0.3552775617288478,0.8355085406112768,0.41916981367653283],[-0.3794831221334757,0.8429250137899292,0.3814052715197801],[-0.3794831221334757,0.8429250137899292,0.3814052715197801],[-0.3552775617288478,0.8355085406112768,0.41916981367653283],[-0.36430404633910124,0.8223765954181752,0.43701178145373715],[-0.31310059041275495,0.8492698866425147,0.42509843557156796],[-0.332579811420882,0.8563726406743961,0.39498932813382714],[-0.327039764580354,0.8609103732737912,0.38971569325959693],[-0.3140261571631544,0.8548871720633178,0.4129836505951842],[-0.3030262212625814,0.8530949427531763,0.42474007095666866],[-0.30630563234682034,0.8510032925104155,0.4265797179063331],[-0.3074886062455001,0.8499182477509586,0.42788985635223925],[-0.30737679985554334,0.8494311233793911,0.4289362068478144],[-0.3064716672932607,0.8485611509536328,0.43129930470467387],[-0.3064716672932607,0.8485611509536328,0.43129930470467387],[-0.30737679985554334,0.8494311233793911,0.4289362068478144],[-0.3074886062455001,0.8499182477509586,0.42788985635223925],[-0.30630563234682034,0.8510032925104155,0.4265797179063331],[-0.3030262212625814,0.8530949427531763,0.42474007095666866],[-0.3018836986186165,0.8536166093527736,0.4245054967199112],[-0.3005663411944774,0.8540478972694987,0.424572801425754],[-0.30020723633632557,0.8546254619822021,0.4236637050574586],[-0.30010140762002013,0.8554894939468634,0.42199155310387715],[-0.2986633625046184,0.8573142981751362,0.4192998808035948],[-0.2869193094276606,0.8623256086553359,0.4172191924333767],[-0.22169439450323328,0.8893090784362601,0.39997619736266166],[-0.1804776888431368,0.9027859090554122,0.39039135011015935],[-0.17110353698486483,0.902375112352115,0.39552842658749177],[-0.16932907990459733,0.9022885720239897,0.3964883295805467],[-0.29378591763869033,0.8522592284242816,0.4328325798306325],[-0.2928098961769306,0.8521145139325333,0.4337778461913166],[-0.29109197043998075,0.8523533525288397,0.43446429908361506],[-0.13479384762321026,0.8992281362180518,0.4161963210754508],[-0.04272328884737744,0.8788424235138793,0.47519544949664116],[-0.11247520951245739,0.7917167799506458,0.600444724841271],[-0.12096611161813048,0.7765227443028949,0.6183685207223044],[-0.1217926347315658,0.775039100049472,0.6200652768214394],[-0.1362167479611267,0.7468007602359373,0.6509482483930047],[-0.15826818518507577,0.6875461164965955,0.7086829469153837],[-0.15906273484496755,0.6871881067500157,0.7088522782110308],[-0.17976883463080726,0.6768130438281933,0.7138678237597613],[-0.3137478361198438,0.5562572576336605,0.7695064383486308],[-0.44522767972287003,0.5756248259152494,0.6858778120034416],[-0.4756276615141904,0.5710997681945005,0.6690466219709434],[-0.5069127716078508,0.5641060215326485,0.6517851167765754],[-0.5853950048161539,0.5352555185375875,0.6089451684768946],[-0.5881014100761002,0.5339079871403941,0.6075187180113839],[-0.6476948635689135,0.4882915586271807,0.5848612805442717],[-0.6842479829726986,0.451546641116431,0.5726345507339411],[-0.6984196725965225,0.4348145075131345,0.5684595895807166],[-0.7248692103891611,0.4606442998571012,0.5122220776567086],[-0.7318060557051786,0.4656348446966803,0.49763851161011174],[-0.7445757502948327,0.47465681954558014,0.46936963656777114],[-0.7857217694573183,0.5024260545419961,0.36084534182697153],[-0.8211059287876238,0.4969723339493581,0.2807197053980027],[-0.8359441012865574,0.49241711635660823,0.24232796587115693],[-0.8575221943306897,0.48183236848572036,0.18025885528794444],[-0.8617412984539398,0.47916355190471793,0.16674598965184312],[-0.8686249934066321,0.4745234330574765,0.1425416862138056],[-0.8750594354470613,0.46906307373127604,0.11937678709379722],[-0.8794507434315012,0.46494349538320356,0.10195065462579912],[-0.8799831672899215,0.46439147820697785,0.09985078995749627],[-0.9181670016981927,0.3264333640689238,-0.2245230852611742],[-0.8943782944100924,0.362481655023806,-0.26209638734499285],[-0.8880317103231901,0.37257680284304795,-0.26941827600168966],[-0.7941933493296539,0.5879101416016543,-0.15368340600881158],[-0.7842684880137086,0.6052390450812708,-0.1364134781383525],[-0.7792155742500656,0.6116278709521814,-0.13687379705642166],[-0.8320617198941953,0.5532181229840176,-0.04028650752738405],[-0.7755629821788644,0.6167964736275423,-0.1344030163145712],[-0.7748774162982927,0.6179556214734848,-0.13302571029767848],[-0.770902212064532,0.6237696378392159,-0.1289233041150622],[-0.7688011636756403,0.6265499770020602,-0.1279839718468659],[-0.7660496733866542,0.6294874355717854,-0.13005178338438045],[-0.7653297829693115,0.6301743899286684,-0.13096015263497934],[-0.7612972428138994,0.6333113599372266,-0.13907993909408833],[-0.7610056413921814,0.6334497210081249,-0.140042367603534],[-0.7617126014539706,0.6318459654688907,-0.1434035867993194],[-0.7617126014539706,0.6318459654688907,-0.1434035867993194],[-0.7610056413921814,0.6334497210081249,-0.140042367603534],[-0.7612972428138994,0.6333113599372266,-0.13907993909408833],[-0.7653297829693115,0.6301743899286684,-0.13096015263497934],[-0.7660496733866542,0.6294874355717854,-0.13005178338438045],[-0.7688011636756403,0.6265499770020602,-0.1279839718468659],[-0.770902212064532,0.6237696378392159,-0.1289233041150622],[-0.7748774162982927,0.6179556214734848,-0.13302571029767848],[-0.7755629821788644,0.6167964736275423,-0.1344030163145712],[-0.8320617198941953,0.5532181229840176,-0.04028650752738405],[-0.7792155742500656,0.6116278709521814,-0.13687379705642166],[-0.7842684880137086,0.6052390450812708,-0.1364134781383525],[-0.7941933493296539,0.5879101416016543,-0.15368340600881158],[-0.8880317103231901,0.37257680284304795,-0.26941827600168966],[-0.8709513190961264,0.39802047105623317,-0.2881379953857035],
  [-0.8300761426775279,0.45087243702152824,-0.32815795418039845],[-0.7005511654555742,0.5835511685603076,-0.410726305769105],[-0.6636826285580208,0.6155864421922554,-0.4249455267906665],[-0.6617779533708785,0.6172375641010392,-0.4255205399212438],[-0.6140317172235972,0.6721941997648663,-0.4136665420914671],[-0.5980559171788803,0.7144020897947396,-0.3632613026792655],[-0.5945634054627605,0.722048850534651,-0.35375106265015577],[-0.5827210258733672,0.7468446959404562,-0.3204047536331168],[-0.5734353095054957,0.7630537339996881,-0.2981961516208243],[-0.5566714835926947,0.7921702822090428,-0.2501661514664877],[-0.5379421376941264,0.8199819870329251,-0.19557044110654695],[-0.5368888187651851,0.8225079551388115,-0.187699387367927],[-0.6535226731401028,0.7546954887903001,-0.05781725427054059],[-0.5879185995429363,0.8069191361287321,0.05686148134487011],[-0.5804176786186949,0.8117106411356606,0.06512413848965957],[-0.5804176786186949,0.8117106411356606,0.06512413848965957],[-0.5879185995429363,0.8069191361287321,0.05686148134487011],[-0.6535226731401028,0.7546954887903001,-0.05781725427054059],[-0.5368888187651851,0.8225079551388115,-0.187699387367927],[-0.5295137729577646,0.8287790071392728,-0.18094342091735288],[-0.5232071906801654,0.8340850033225535,-0.17480401269131368],[-0.4963361803034598,0.8556553215430613,-0.146643673020052],[-0.4814463988639344,0.8668822349834685,-0.12932345375459037],[-0.4523028201267492,0.8892010201265796,-0.06887455779342291],[-0.4420885080233666,0.8957847986032285,-0.04612315757889084],[-0.43921861149240293,0.8975111315780618,-0.03950670844493087],[-0.43588567951118384,0.8991252687442652,-0.03971681637073198],[-0.3863930711862419,0.9214445640535278,-0.04050073969038054],[-0.29802354957755367,0.9540926414608383,-0.029819379729896487],[-0.2854293561848893,0.9579891303212886,-0.02805189501870859],[-0.2784595705165317,0.9600608900809027,-0.027264536027844264],[-0.26338294811722945,0.964325611552003,-0.026561956741407426],[-0.26015636244237933,0.9651987485640146,-0.026646629265438822],[-0.2430033384924133,0.9693198225246735,0.03699269038982141],[-0.24572206199367516,0.9684378981274555,0.04181752886114362],[-0.24593224685730772,0.968309561041809,0.0435192365596577],[-0.24756086703566038,0.9677349022922104,0.04693374050763652],[-0.252944048163892,0.966388185582121,0.045969373127755266],[-0.25460471421886705,0.9659422241920701,0.0461742246324241],[-0.25460471421886705,0.9659422241920701,0.0461742246324241],[-0.252944048163892,0.966388185582121,0.045969373127755266],[-0.24756086703566038,0.9677349022922104,0.04693374050763652],[-0.24593224685730772,0.968309561041809,0.0435192365596577],[-0.24572206199367516,0.9684378981274555,0.04181752886114362],[-0.2430033384924133,0.9693198225246735,0.03699269038982141],[-0.26015636244237933,0.9651987485640146,-0.026646629265438822],[-0.22979509256053288,0.9728316463828091,-0.028156761731585697],[-0.22786329290030155,0.9732864604077011,-0.0281386875258951],[-0.2242433898061202,0.9739685009806294,-0.03317018579698224],[-0.22011649864748262,0.9747187157148887,-0.038368636388213265],[-0.21110058032474519,0.9763014203467274,-0.04766635727133621],[-0.1964758083317901,0.9786992590810321,-0.05954004547032705],[-0.17027942666930315,0.9823595960667174,-0.07729515423886278],[-0.15714022831470992,0.9837418938609388,-0.08694156030400214],[-0.1339295484480571,0.9846768896883821,-0.11168840121567408],[-0.13033559401273498,0.9846604812906308,-0.11600159273842303],[-0.10720301166914507,0.9844157216921532,-0.13940301709210703],[-0.0958565468332559,0.9842091624650126,-0.1488080876468826],[-0.050001933689383736,0.9818766902564148,-0.1828058307561087],[-0.0217181320947516,0.9792634517111636,-0.2014234715246778],[0.012723911915603976,0.977603019464904,-0.21007245987674514],[0.010608116295172625,0.9769838563236771,-0.21304931905919094],[-0.012452830708636703,0.9699660108168893,-0.24292151997571634],[-0.025875220295932103,0.9654944973799694,-0.259134807587937],[-0.01893442126896695,0.9114315578267017,-0.41101581853841196],[-0.020282516130169317,0.887188783063541,-0.4609606086702668],[-0.020282516130169317,0.887188783063541,-0.4609606086702668],[-0.01893442126896695,0.9114315578267017,-0.41101581853841196],[-0.025875220295932103,0.9654944973799694,-0.259134807587937],[-0.05220149465785139,0.9563011472692468,-0.28768580028741203],[-0.07126972099025539,0.9486464407534038,-0.30820538171140044],[-0.09600830173589071,0.9355255275345711,-0.33996234104522943],[-0.14584117497502053,0.9037844758817795,-0.40237292756471904],[-0.14883068655342885,0.883337873180427,-0.4444813028071202],[-0.14917014113173474,0.8785289302447692,-0.4538008238398426],[-0.14971046386530415,0.876395355723315,-0.45773131581293386],[-0.15179060650207712,0.8652163587945365,-0.47787055177323445],[-0.15179258316357214,0.8640881110037779,-0.47990702028460985],],
[[0.9705824404517237,-0.11866069039572842,0.20949789221275067],[0.9704816058049731,-0.12004379624714216,0.20917681462527227],[0.9705135634130775,-0.12272907166775454,0.20746324541668035],[0.9672220687149475,-0.12441928064771492,0.22136240058754916],[0.9692446764771302,-0.13066600070687745,0.20854532691962588],[0.9689610810728081,-0.13275843114899355,0.20854165609075087],[0.9688202631211329,-0.13444550421758641,0.20811464187216086],[0.9688090149475109,-0.1349071939811418,0.20786808694113781],[0.9690799720200104,-0.1362378151328494,0.20572619074275234],[0.969349218114302,-0.13674229721537468,0.20411672516835455],[0.9669691140225518,-0.15559485896030434,0.20189346792693527],[0.9567551422472553,-0.20502400433112972,0.2063607410130696],[0.9711147633884928,-0.13864146720336482,0.19420262588495077],[0.9711432756125532,-0.13893606103217362,0.19384919184093755],[0.9710589746467576,-0.14359620731476894,0.19085229105987134],[0.951548090581896,-0.22833041071076404,0.2059646932233818],[0.9524108022370067,-0.22988619489464598,0.20016493493897022],[0.9362118308701219,-0.27970011655957105,0.21277982172982593],[0.9246756454162027,-0.30814214665650563,0.2236590445925445],[0.9246756454162027,-0.30814214665650563,0.2236590445925445],[0.9362118308701219,-0.27970011655957105,0.21277982172982593],[0.9524108022370067,-0.22988619489464598,0.20016493493897022],[0.951548090581896,-0.22833041071076404,0.2059646932233818],[0.9710589746467576,-0.14359620731476894,0.19085229105987134],[0.9803691420079502,-0.19039923296428013,0.051229654353796575],[0.9682066065217833,-0.24505020899384078,0.05026293027319404],[0.9569368342216675,-0.2347732245612962,0.17074375051199983],[0.9307222253508295,-0.30690580181091576,0.19890944686665527],[0.9268499375984873,-0.31717298244815156,0.2008743198585247],[0.9268499375984873,-0.31717298244815156,0.2008743198585247],[0.9307222253508295,-0.30690580181091576,0.19890944686665527],[0.9569368342216675,-0.2347732245612962,0.17074375051199983],[0.9682066065217833,-0.24505020899384078,0.05026293027319404],[0.9803691420079502,-0.19039923296428013,0.051229654353796575],[0.9710589746467576,-0.14359620731476894,0.19085229105987134],[0.9711432756125532,-0.13893606103217362,0.19384919184093755],[0.9711147633884928,-0.13864146720336482,0.19420262588495077],[0.9567551422472553,-0.20502400433112972,0.2063607410130696],[0.9669691140225518,-0.15559485896030434,0.20189346792693527],[0.969349218114302,-0.13674229721537468,0.20411672516835455],[0.9690799720200104,-0.1362378151328494,0.20572619074275234],[0.9688090149475109,-0.1349071939811418,0.20786808694113781],[0.9688202631211329,-0.13444550421758641,0.20811464187216086],[0.9689610810728081,-0.13275843114899355,0.20854165609075087],[0.9692446764771302,-0.13066600070687745,0.20854532691962588],[0.9706082292358843,-0.12356691280914708,0.20652090305438273],[0.9716506543603406,-0.12235214981843598,0.20229917774407546],[0.9716741093798731,-0.1223536136105875,0.20218560383286818],[0.9728878952433191,-0.12465672934044354,0.19480719473152946],[0.972941181238234,-0.12492971096814694,0.1943656995669897],[0.972941181238234,-0.12492971096814694,0.1943656995669897],[0.9728878952433191,-0.12465672934044354,0.19480719473152946],[0.9746031435544124,-0.10788574968061952,0.1962380635598207],[0.9509151904705909,0.23121075886328496,0.20567422181241815],[0.9764897285160071,-0.10562407140404297,0.18791318645259697],[0.9750006280181988,-0.11956759029023618,0.18728952644583283],[0.9750006280181988,-0.11956759029023618,0.18728952644583283],[0.9764897285160071,-0.10562407140404297,0.18791318645259697],[0.9509151904705909,0.23121075886328496,0.20567422181241815],[0.8949762691369533,0.3699473163824191,0.24931197480896505],[0.9966297269270012,-0.057750400407021646,0.05825872173537426],[0.9931933338462192,-0.08121436733413902,-0.0834938808652946],[0.9907549567386941,-0.08221493590148232,-0.10791348392311133],[0.9893170983948019,-0.09072619946675395,-0.1141071231519259],[0.9892105425728772,-0.09116937250776459,-0.11467627470063081],[0.9910638515774837,-0.0957334153109038,-0.09288463430144649],[0.9883144941739155,-0.10187055345145975,-0.11338805468501077],[0.9879902050004985,-0.10485952041189028,-0.11348936426846921],[0.9876106067609179,-0.10752002420946258,-0.11430106651876942],[0.9871938265930048,-0.1088543396119712,-0.1166150997268448],[0.9871938265930048,-0.1088543396119712,-0.1166150997268448],[0.9876106067609179,-0.10752002420946258,-0.11430106651876942],[0.9879902050004985,-0.10485952041189028,-0.11348936426846921],[0.9883144941739155,-0.10187055345145975,-0.11338805468501077],[0.9890120412118093,-0.09179268321339704,-0.1158847947167158],[0.9888647807979682,-0.09123818364777482,-0.11756716864006389],[0.9881171334196751,-0.09082356891903443,-0.12399842729362913],[0.987011179413649,-0.09253982842814316,-0.13132140673541134],[0.9867559833724547,-0.09328823906111906,-0.1327024254922846],[0.9860762983901389,-0.0981096859786662,-0.1342684745961222],[0.9859275343148847,-0.09952516378746402,-0.13431916785347647],[0.9818976915937689,-0.10662253743347018,-0.15655209278088925],[0.9815879369084021,-0.11141003330767989,-0.1551545248914405],[0.9814831315848358,-0.11242665549820731,-0.1550842014774925],[0.9810298045362,-0.11564625202605669,-0.1555842762106469],[0.9805857411875961,-0.1197429153300808,-0.1552843791494365],[0.980430518098046,-0.12181888099022765,-0.15464850279354767],[0.9801328575733779,-0.12444770016083741,-0.1544420649619884],[0.9794474667613283,-0.13287468202723057,-0.1517464290551154],[0.9791744498590632,-0.13823550099825369,-0.14868874539440666],[0.9743560533216223,-0.13994732747667374,-0.17619598998742428],[0.9738428837245114,-0.14258039015598936,-0.17692051933592534],[0.9722780748862354,-0.14610542235543844,-0.18256108745802058],[0.9700579793794383,-0.14579143517488916,-0.19424822797628677],[0.9701272487770395,-0.14354831234861748,-0.1955684105425928],[0.9701272487770395,-0.14354831234861748,-0.1955684105425928],[0.9700579793794383,-0.14579143517488916,-0.19424822797628677],[0.9722780748862354,-0.14610542235543844,-0.18256108745802058],[0.9738428837245114,-0.14258039015598936,-0.17692051933592534],[0.9743560533216223,-0.13994732747667374,-0.17619598998742428],[0.9791744498590632,-0.13823550099825369,-0.14868874539440666],[0.9794474667613283,-0.13287468202723057,-0.1517464290551154],[0.9801328575733779,-0.12444770016083741,-0.1544420649619884],[0.980430518098046,-0.12181888099022765,-0.15464850279354767],[0.9805857411875961,-0.1197429153300808,-0.1552843791494365],[0.9810298045362,-0.11564625202605669,-0.1555842762106469],[0.9814831315848358,-0.11242665549820731,-0.1550842014774925],[0.9815879369084021,-0.11141003330767989,-0.1551545248914405],[0.9818976915937689,-0.10662253743347018,-0.15655209278088925],[0.9859275343148847,-0.09952516378746402,-0.13431916785347647],[0.9860762983901389,-0.0981096859786662,-0.1342684745961222],[0.9867559833724547,-0.09328823906111906,-0.1327024254922846],[0.987011179413649,-0.09253982842814316,-0.13132140673541134],[0.9881171334196751,-0.09082356891903443,-0.12399842729362913],[0.9888647807979682,-0.09123818364777482,-0.11756716864006389],[0.9890120412118093,-0.09179268321339704,-0.1158847947167158],[0.9883144941739155,-0.10187055345145975,-0.11338805468501077],[0.9910638515774837,-0.0957334153109038,-0.09288463430144649],[0.9892105425728772,-0.09116937250776459,-0.11467627470063081],[0.9893170983948019,-0.09072619946675395,-0.1141071231519259],[0.9907549567386941,-0.08221493590148232,-0.10791348392311133],[0.9931933338462192,-0.08121436733413902,-0.0834938808652946],[0.9966297269270012,-0.057750400407021646,0.05825872173537426],[0.8949762691369533,0.3699473163824191,0.24931197480896505],[0.9509151904705909,0.23121075886328496,0.20567422181241815],[0.9746031435544124,-0.10788574968061952,0.1962380635598207],[0.9728878952433191,-0.12465672934044354,0.19480719473152946],[0.9716741093798731,-0.1223536136105875,0.20218560383286818],[0.9716506543603406,-0.12235214981843598,0.20229917774407546],[0.9706082292358843,-0.12356691280914708,0.20652090305438273],[0.9692446764771302,-0.13066600070687745,0.20854532691962588],[0.9672220687149475,-0.12441928064771492,0.22136240058754916],[0.9705135634130775,-0.12272907166775454,0.20746324541668035],[0.9704816058049731,-0.12004379624714216,0.20917681462527227],[0.9705824404517237,-0.11866069039572842,0.20949789221275067],[0.9704857363957112,-0.11643841025501192,0.21118601295957018],[0.8770594262155968,0.33358160923571106,0.3456733615222346],[0.8825588102219627,0.3886405697432315,0.26466668481176503],[0.8634279515024369,0.4637103737825129,0.1986576497665966],[0.946685147418158,0.3179976209655271,-0.05162116540843909],[0.951346918680519,0.2984019009319873,-0.07678115548269854],[0.9575302615685637,0.2703661064159042,-0.10018965356733252],[0.9676095570522751,0.05689043170929512,-0.24595776849091378],[0.9709106602814249,0.03253520879033048,-0.23722131004793226],[0.971133158679931,-0.11963094694393324,-0.20637060024537876],[0.9312124660649673,-0.1227015119115777,-0.34320210083828906],[0.9582249246381935,0.00079475703441416,-0.28601461879313916],[0.9120327006450288,0.005211671835632153,-0.41008437111259544],[0.9120327006450288,0.005211671835632153,-0.41008437111259544],[0.9582249246381935,0.00079475703441416,-0.28601461879313916],[0.9312124660649673,-0.1227015119115777,-0.34320210083828906],[0.971133158679931,-0.11963094694393324,-0.20637060024537876],[0.9709106602814249,0.03253520879033048,-0.23722131004793226],[0.9676095570522751,0.05689043170929512,-0.24595776849091378],[0.9575302615685637,0.2703661064159042,-0.10018965356733252],[0.951346918680519,0.2984019009319873,-0.07678115548269854],[0.9134598930940325,0.1872047235583484,-0.36131069066121085],[0.9107888910146756,0.18239211673029837,-0.3704007448141791],[0.9070780607873641,0.17421400669752127,-0.3832217002058093],[0.90681157739045,0.17358984650291598,-0.3841345184980622],[0.9036499507077778,0.14726160847126457,-0.40215766218771326],[0.8944985712190582,0.09599505972283141,
  -0.4366431662076867],[0.8878855195565047,0.07601467343434985,-0.45374119670198004],[0.8875172955256612,0.07526175059582503,-0.45458631638014385],[0.8744675846019907,0.07844058933805531,-0.4786998197457974],[0.8715255913327289,0.07114221838312194,-0.4851617548979571],[0.8841751794884798,0.06945350959175511,-0.4619637020177048],[0.8812722064736925,0.06333125318640546,-0.4683465068374363],[0.8802875627435295,0.058337934781353504,-0.470840198203704],[0.8781724265162089,0.0555363920768061,-0.47510935421408534],[0.8785223180713196,0.04790571917649649,-0.4752931502986107],[0.8816288375502543,0.047393237206790985,-0.4695577428462321],[0.883456270466505,0.044040100779566896,-0.4664391575508422],[0.884062245397023,0.041059188406036555,-0.4655621218602427],[0.8868822110020199,0.03468850157432394,-0.4606914929393606],[0.88663392690682,0.03333009189660697,-0.4612693189796558],[0.8860012215345305,0.021263151399760205,-0.4631951142141621],[0.8877714737109268,0.013114596802207067,-0.4600976177028575],[0.886285211522284,0.010257277068389708,-0.4630262542276007],[0.8856712415040967,0.008013805875602069,-0.4642437192768259],[0.8776674044648184,-0.11930029903438791,-0.4641846246810579],[0.8821985679458522,-0.12969530615954572,-0.4526641296529575],[0.8855528767944432,-0.13825301497640738,-0.4434886765758729],[0.8888053740808215,-0.14619380427009873,-0.4343413157852786],[0.8900733260503338,-0.14858666425048778,-0.4309193398544663],[0.8910107988278031,-0.15049548480940897,-0.428311645212013],[0.8928021708298546,-0.1544398154416968,-0.4231461061711828],[0.9012798452991305,-0.17688308600389563,-0.39548326683099233],[0.8228520765507931,-0.18660515751829526,-0.5367429322344356],[0.8228520765507931,-0.18660515751829526,-0.5367429322344356],[0.9012798452991305,-0.17688308600389563,-0.39548326683099233],[0.8928021708298546,-0.1544398154416968,-0.4231461061711828],[0.8910107988278031,-0.15049548480940897,-0.428311645212013],[0.8900733260503338,-0.14858666425048778,-0.4309193398544663],[0.8888053740808215,-0.14619380427009873,-0.4343413157852786],[0.8855528767944432,-0.13825301497640738,-0.4434886765758729],[0.8821985679458522,-0.12969530615954572,-0.4526641296529575],[0.8776674044648184,-0.11930029903438791,-0.4641846246810579],[0.8856712415040967,0.008013805875602069,-0.4642437192768259],[0.886285211522284,0.010257277068389708,-0.4630262542276007],[0.8877714737109268,0.013114596802207067,-0.4600976177028575],[0.8860012215345305,0.021263151399760205,-0.4631951142141621],[0.88663392690682,0.03333009189660697,-0.4612693189796558],[0.8868822110020199,0.03468850157432394,-0.4606914929393606],[0.884062245397023,0.041059188406036555,-0.4655621218602427],[0.883456270466505,0.044040100779566896,-0.4664391575508422],[0.8816288375502543,0.047393237206790985,-0.4695577428462321],[0.8785223180713196,0.04790571917649649,-0.4752931502986107],[0.8779326128528505,0.04734492447618996,-0.47643759865874447],[0.8781861618963838,0.040535576316852395,-0.47659829217734206],[0.872514676143566,0.03851207969997712,-0.4870677156528348],[0.8754505748702519,0.03293561357793185,-0.4821841311341455],[0.8754505748702519,0.03293561357793185,-0.4821841311341455],[0.872514676143566,0.03851207969997712,-0.4870677156528348],[0.871971187124583,0.0389797239559584,-0.48800289952505693],[0.8691925257857033,0.043892084514532914,-0.4925219162994055],[0.8690034871517288,0.04373956700112953,-0.49286893754495115],[0.8690034871517288,0.04373956700112953,-0.49286893754495115],[0.8691925257857033,0.043892084514532914,-0.4925219162994055],[0.8706260359648523,0.051256134587414175,-0.48926793699085236],[0.8707401040950904,0.05429127113217087,-0.48873728014069506],[0.869889046775119,0.06244693575311037,-0.4892784754265426],[0.8684902712979773,0.06800687020550376,-0.49101905692713965],[0.8674694622656923,0.06890580342034386,-0.4926953645930389],[0.8583099707157503,0.053318514310111524,-0.510353926409595],[0.857510573318184,0.05037962880874335,-0.5119936617269912],[0.8561759994795026,0.053146991145830234,-0.5139436304181809],[0.8529469000932484,0.056519342443561556,-0.5189288482548119],[0.8505557309263175,0.06495593916437867,-0.5218579064799836],[0.8535345045840559,0.07064546318411202,-0.5162248231303418],[0.8538252948196475,0.07331365863694206,-0.5153711996060781],[0.8543739864259454,0.07467748670207017,-0.5142648775665132],[0.8543831869733848,0.07479250446033371,-0.514232876325263],[0.8554612978995333,0.07675057118850595,-0.512147749793245],[0.853743366551941,0.09652908784749296,-0.5116682511822375],[0.8535797934761633,0.09695561223407888,-0.511860474568515],[0.8511450702186267,0.10053740424569378,-0.51521286842437],[0.8497516757417062,0.09269062710190516,-0.5189706515995078],[0.8429257163207856,0.08164945338696646,-0.5317984613805311],[0.8408619182630355,0.08035506981317844,-0.535251620427559],[0.8398284264097328,0.08124883345631387,-0.5367372180649858],[0.8390614275645266,0.08397302474298261,-0.5375169317229861],[0.8390614275645266,0.08397302474298261,-0.5375169317229861],[0.8398284264097328,0.08124883345631387,-0.5367372180649858],[0.8408619182630355,0.08035506981317844,-0.535251620427559],[0.8429257163207856,0.08164945338696646,-0.5317984613805311],[0.8497516757417062,0.09269062710190516,-0.5189706515995078],[0.8511450702186267,0.10053740424569378,-0.51521286842437],[0.8535797934761633,0.09695561223407888,-0.511860474568515],[0.853743366551941,0.09652908784749296,-0.5116682511822375],[0.8567748818342106,0.09207973154633492,-0.5074033158113271],[0.8567748818342106,0.09207973154633492,-0.5074033158113271],[0.853743366551941,0.09652908784749296,-0.5116682511822375],[0.8554612978995333,0.07675057118850595,-0.512147749793245],[0.8543831869733848,0.07479250446033371,-0.514232876325263],[0.8543739864259454,0.07467748670207017,-0.5142648775665132],[0.8538252948196475,0.07331365863694206,-0.5153711996060781],[0.8535345045840559,0.07064546318411202,-0.5162248231303418],[0.8505557309263175,0.06495593916437867,-0.5218579064799836],[0.8529469000932484,0.056519342443561556,-0.5189288482548119],[0.8561759994795026,0.053146991145830234,-0.5139436304181809],[0.857510573318184,0.05037962880874335,-0.5119936617269912],[0.8583099707157503,0.053318514310111524,-0.510353926409595],[0.8674694622656923,0.06890580342034386,-0.4926953645930389],[0.8684902712979773,0.06800687020550376,-0.49101905692713965],[0.869889046775119,0.06244693575311037,-0.4892784754265426],[0.8707401040950904,0.05429127113217087,-0.48873728014069506],[0.8706260359648523,0.051256134587414175,-0.48926793699085236],[0.8691925257857033,0.043892084514532914,-0.4925219162994055],[0.871971187124583,0.0389797239559584,-0.48800289952505693],[0.872514676143566,0.03851207969997712,-0.4870677156528348],[0.8781861618963838,0.040535576316852395,-0.47659829217734206],[0.8779326128528505,0.04734492447618996,-0.47643759865874447],[0.8785223180713196,0.04790571917649649,-0.4752931502986107],[0.8781724265162089,0.0555363920768061,-0.47510935421408534],[0.8802875627435295,0.058337934781353504,-0.470840198203704],[0.8812722064736925,0.06333125318640546,-0.4683465068374363],[0.8841751794884798,0.06945350959175511,-0.4619637020177048],[0.8715255913327289,0.07114221838312194,-0.4851617548979571],[0.8744675846019907,0.07844058933805531,-0.4786998197457974],[0.8875172955256612,0.07526175059582503,-0.45458631638014385],[0.8878855195565047,0.07601467343434985,-0.45374119670198004],[0.8944985712190582,0.09599505972283141,-0.4366431662076867],[0.9036499507077778,0.14726160847126457,-0.40215766218771326],[0.90681157739045,0.17358984650291598,-0.3841345184980622],[0.8958156255645179,0.16192029992865972,-0.41387942865702393],[0.8937305024473489,0.15950136349501115,-0.41929119241696683],[0.8937305024473489,0.15950136349501115,-0.41929119241696683],[0.8958156255645179,0.16192029992865972,-0.41387942865702393],[0.90681157739045,0.17358984650291598,-0.3841345184980622],[0.9070780607873641,0.17421400669752127,-0.3832217002058093],[0.9107888910146756,0.18239211673029837,-0.3704007448141791],[0.9134598930940325,0.1872047235583484,-0.36131069066121085],[0.8395060520315861,0.21096416213832334,-0.500723187894884],[0.8367702193987323,0.20451836423025266,-0.5079250324801676],[0.8957538768599883,0.18580618402786997,-0.40385771512662993],[0.8834076952501624,0.18743300219503267,-0.4294877340052369],[0.8370281745468394,0.18793073052345358,-0.5138734041957289],[0.837220898246243,0.18087519044659292,-0.5160865557449282],[0.8370193083959402,0.17934556913734523,-0.5169466550846266],[0.834479426520217,0.1776327624249994,-0.5216231287316098],[0.8293684641105542,0.177194340354166,-0.5298585815907413],[0.8272502214981987,0.17806280732422772,-0.5328702540759769],[0.8280144342635406,0.14281668222196905,-0.5422135113867397],[0.8307974801349671,0.1415053869799576,-0.5382859578858077],[0.8314878150586659,0.13490432280046338,-0.5389144988759482],[0.8314878150586659,0.13490432280046338,-0.5389144988759482],[0.8307974801349671,0.1415053869799576,-0.5382859578858077],[0.8280144342635406,0.14281668222196905,-0.5422135113867397],[0.8272502214981987,0.17806280732422772,-0.5328702540759769],[0.8238482088962729,0.1810020787630565,-0.5371334807865319],[0.8225668312541495,0.18493233421781727,-0.5377581611479804],[0.8219974579600753,0.18811611334585654,-0.5375244245676872],[0.8219974579600753,0.18811611334585654,-0.5375244245676872],[0.8225668312541495,0.18493233421781727,-0.5377581611479804],[0.8238482088962729,0.1810020787630565,-0.5371334807865319],[0.8272502214981987,0.17806280732422772,-0.5328702540759769],[0.8293684641105542,0.177194340354166,-0.5298585815907413],[0.834479426520217,0.1776327624249994,-0.5216231287316098],[0.8370193083959402,0.17934556913734523,-0.5169466550846266],[0.837220898246243,0.18087519044659292,-0.5160865557449282],[0.8370281745468394,0.18793073052345358,-0.5138734041957289],[0.8834076952501624,0.18743300219503267,-0.4294877340052369],[0.8957538768599883,0.18580618402786997,-0.40385771512662993],[0.8367702193987323,0.20451836423025266,-0.5079250324801676],
  [0.8395060520315861,0.21096416213832334,-0.500723187894884],[0.9134598930940325,0.1872047235583484,-0.36131069066121085],[0.951346918680519,0.2984019009319873,-0.07678115548269854],[0.946685147418158,0.3179976209655271,-0.05162116540843909],[0.8634279515024369,0.4637103737825129,0.1986576497665966],[0.8201083866825281,0.5477589909007912,0.16547604654549902],[0.6639902640552716,0.7353966862529833,-0.1353094345858482],[0.6425135616537656,0.7498241785147,-0.1579241096405114],[0.6383750107657711,0.7524774555326136,-0.16203402280066093],[0.6200753792636964,0.7636989021841937,-0.17963994776674957],[0.8184261290792827,0.22845446205606731,-0.5272449430833588],[0.8168744043922959,0.2128128202425157,-0.5361221045519002],[0.8138053182302426,0.21678264162932917,-0.5391903099169933],[0.7738850747855355,0.21620955674127193,-0.5952775139360876],[0.755275412614833,0.21756934191632582,-0.6182415648899633],[0.7306544297015916,0.22228880664169665,-0.6455476673331355],[0.7347009589938063,0.1935895376336392,-0.650182737214989],[0.7348356122595409,0.19238252139218454,-0.6503887978877952],[0.6349219730926092,0.1903898539533165,-0.7487494852057147],[0.6313575588851466,0.18441683103094914,-0.7532450233961664],[0.6612879504239211,0.17278676907724355,-0.7299609435140876],[0.70829430945775,0.16279659266850943,-0.6868889579876013],[0.738185285492571,0.15797380699974037,-0.6558404993474103],[0.739322905336994,0.1496281078491608,-0.6565158573755444],[0.7444634846223483,0.11939954202958677,-0.656900197463112],[0.6380990428229918,0.13784537960192939,-0.7575145298083608],[0.6331871811972303,0.14527980632758122,-0.7602419163930166],[0.6309434658161861,0.1467857368165384,-0.7618164414155718],[0.6293019709447278,0.061150831422762154,-0.7747513182830901],[0.6335164748161869,0.06024287493575578,-0.7713803680130489],[0.7394798549369247,0.027262138250733273,-0.6726264341820524],[0.7440679114699065,0.002155185865526422,-0.6681005151133297],[0.780554708978352,-0.019987893736291264,-0.6247678211909661],[0.7838172835393556,-0.12783239939546703,-0.6076918163755238],[0.7805967065903734,-0.14837696989241533,-0.607168062784768],[0.7805967065903734,-0.14837696989241533,-0.607168062784768],[0.7838172835393556,-0.12783239939546703,-0.6076918163755238],[0.780554708978352,-0.019987893736291264,-0.6247678211909661],[0.7440679114699065,0.002155185865526422,-0.6681005151133297],[0.7394798549369247,0.027262138250733273,-0.6726264341820524],[0.6335164748161869,0.06024287493575578,-0.7713803680130489],[0.6293019709447278,0.061150831422762154,-0.7747513182830901],[0.6309434658161861,0.1467857368165384,-0.7618164414155718],[0.6261019136056301,0.1532046100232657,-0.764542177546136],[0.6229031221670208,0.15153508041163352,-0.7674821299543186],[0.6154750526390078,0.15061326205858916,-0.773631763096036],[0.6055634698851871,0.15309076786716475,-0.7809328400921901],[0.6038150894657993,0.1575645354065128,-0.7813966693783245],[0.6038150894657993,0.1575645354065128,-0.7813966693783245],[0.6055634698851871,0.15309076786716475,-0.7809328400921901],[0.6154750526390078,0.15061326205858916,-0.773631763096036],[0.6229031221670208,0.15153508041163352,-0.7674821299543186],[0.6261019136056301,0.1532046100232657,-0.764542177546136],[0.6309434658161861,0.1467857368165384,-0.7618164414155718],[0.6331871811972303,0.14527980632758122,-0.7602419163930166],[0.6380990428229918,0.13784537960192939,-0.7575145298083608],[0.7444634846223483,0.11939954202958677,-0.656900197463112],[0.739322905336994,0.1496281078491608,-0.6565158573755444],[0.738185285492571,0.15797380699974037,-0.6558404993474103],[0.70829430945775,0.16279659266850943,-0.6868889579876013],[0.6612879504239211,0.17278676907724355,-0.7299609435140876],[0.6313575588851466,0.18441683103094914,-0.7532450233961664],[0.6349219730926092,0.1903898539533165,-0.7487494852057147],[0.7348356122595409,0.19238252139218454,-0.6503887978877952],[0.7347009589938063,0.1935895376336392,-0.650182737214989],[0.7306544297015916,0.22228880664169665,-0.6455476673331355],[0.755275412614833,0.21756934191632582,-0.6182415648899633],[0.7738850747855355,0.21620955674127193,-0.5952775139360876],[0.8138053182302426,0.21678264162932917,-0.5391903099169933],[0.8168744043922959,0.2128128202425157,-0.5361221045519002],[0.8184261290792827,0.22845446205606731,-0.5272449430833588],[0.6200753792636964,0.7636989021841937,-0.17963994776674957],[0.6193483950006067,0.7641325622492272,-0.18030250392216798],[0.6169237595041327,0.7655555524455097,-0.1825644299395085],[0.5953423097065708,0.7482490175649182,-0.2927301521647202],[0.5939393506987894,0.7468936359923735,-0.2989748220261908],[0.5878769788539373,0.7411994620650171,-0.32407408901067186],[0.5486772865764888,0.7001043617746896,-0.4569541747474425],[0.5356047655797185,0.6954003565952437,-0.47910946466909077],[0.48712707084659584,0.6768055825129894,-0.5519433126034492],[0.5760569028602458,0.3452789970080573,-0.74090543181446],[0.5910825697189885,0.23479563980585683,-0.7716815426732425],[0.591333336893992,0.19503094854574324,-0.7824882195836333],[0.591333336893992,0.19503094854574324,-0.7824882195836333],[0.5910825697189885,0.23479563980585683,-0.7716815426732425],[0.5760569028602458,0.3452789970080573,-0.74090543181446],[0.48712707084659584,0.6768055825129894,-0.5519433126034492],[0.0874394947461984,0.48096964735361786,-0.8723660545224499],[0.07412631204976722,0.42863651593100494,-0.9004310229398084],[0.022703225323197043,0.2074720340978795,-0.9779774632511797],[0.01860059397589395,0.19150211015616253,-0.9813159326687206],[0.00712828888478444,0.16570838624556572,-0.9861490344899525],[0.06417715941113983,0.006215526521638005,-0.9979191647823866],[0.07605830943967999,-0.028347154759926933,-0.996700342320697],[0.09106674283242966,-0.07504690436949071,-0.9930129961357246],[0.1162728243450355,-0.1662004507247292,-0.9792129699394946],[0.10131042436980767,-0.31045927234497156,-0.9451725970049282],[0.09674005173298812,-0.356574601180625,-0.929244809608091],[0.09604715743164895,-0.364343905074847,-0.9262982577896339],[0.09419475454836483,-0.3824328913195057,-0.9191694249987739],[0.09092059850146983,-0.43038571731465874,-0.8980543297037665],[0.0901022443345871,-0.4482969245381035,-0.8893320263071315],[0.07816916010316362,-0.5524267501452355,-0.8298881057906179],[0.06500824819693204,-0.6467474169865605,-0.7599287507967956],[0.1334990750365351,-0.7616101477312001,-0.6341356162819191],[0.16428926684549747,-0.8054888501297741,-0.5693827790827392],[0.23768541530553805,-0.8884133569548608,-0.39271790197956224],[0.2976221631652689,-0.8802794283531152,-0.3694985466969239],[0.333686229720345,-0.8735720795254369,-0.3542955291400458],[0.36066519403942443,-0.8677484248894483,-0.3419550977985064],[0.465098833374818,-0.585618510536016,-0.6638780274349811],[0.4865487471386424,-0.4453541896246953,-0.7516182291839045],[0.4907589561042482,-0.44033046413984156,-0.7518408936429705],[0.45813733053751465,-0.4338191236480415,-0.7758293332461755],[0.453500495851054,-0.4336132592905947,-0.7786634970449274],[0.4997108862390145,-0.41784299509259903,-0.7587465068296954],[0.5001198245711114,-0.4162659872055957,-0.7593436566974876],[0.5047498465781957,-0.40749488261139827,-0.7610358158620466],[0.5050874328139898,-0.407309318434325,-0.760911167173895],[0.5050874328139898,-0.407309318434325,-0.760911167173895],[0.5047498465781957,-0.40749488261139827,-0.7610358158620466],[0.5001198245711114,-0.4162659872055957,-0.7593436566974876],[0.4997108862390145,-0.41784299509259903,-0.7587465068296954],[0.4997964311349017,-0.42889565160670934,-0.7524972076078899],[0.500539201184274,-0.4313216541762612,-0.7506145073980803],[0.5072024534033466,-0.43365497451353213,-0.7447744855600883],[0.5078636672487764,-0.433653111046408,-0.7443248449221589],[0.5183528348477305,-0.43051422374482545,-0.7388963674012153],[0.5227704604643035,-0.42791428325127057,-0.7372926229493223],[0.5227704604643035,-0.42791428325127057,-0.7372926229493223],[0.5183528348477305,-0.43051422374482545,-0.7388963674012153],[0.5078636672487764,-0.433653111046408,-0.7443248449221589],[0.5072024534033466,-0.43365497451353213,-0.7447744855600883],[0.500539201184274,-0.4313216541762612,-0.7506145073980803],[0.4997964311349017,-0.42889565160670934,-0.7524972076078899],[0.4997108862390145,-0.41784299509259903,-0.7587465068296954],[0.453500495851054,-0.4336132592905947,-0.7786634970449274],[0.45813733053751465,-0.4338191236480415,-0.7758293332461755],[0.4907589561042482,-0.44033046413984156,-0.7518408936429705],[0.4865487471386424,-0.4453541896246953,-0.7516182291839045],[0.465098833374818,-0.585618510536016,-0.6638780274349811],[0.36066519403942443,-0.8677484248894483,-0.3419550977985064],[0.4100712388209402,-0.8557636132126947,-0.3154524011527141],[0.6913781396891883,-0.7212459338471785,-0.04243313409151848],[0.6338101240501469,-0.7315912189625917,0.2511155411127848],[0.7044904923366525,-0.5983690698450552,0.3816380516405882],[0.7077067143323126,-0.5869809922829141,0.3931978143219112],[0.7107165483780337,-0.5750156559657266,0.4052640907555458],[0.7131752886559288,-0.5643421051301125,0.4158112504825304],[0.7132825142453648,-0.5638498943452075,0.41629478920436835],[0.7137308171973967,-0.5616773034071759,0.41845779646217546],[0.9156066140114163,-0.3290341606966688,0.23108667091199353],[0.9168460712030876,-0.3278756948855963,0.22779554522147757],[0.9179431344114617,-0.32604176785217737,0.22600258317702482],[0.9187652423913537,-0.3250552305433204,0.22407482337376916],[0.918278134575101,-0.32922495604814117,0.21994589306548185],[0.9182990849642122,-0.3295980224326321,0.2192987326967232],[0.9187361828994529,-0.3304914185446217,0.21610008907843306],[0.9196015045147381,-0.33053966109967114,0.2123125180820595],[0.9197606208803044,-0.3303333643989609,0.21194402242748064],[0.920087707349911,-0.3297769364064323,0.2113901203887553],[0.9215879592509304,-0.3266795180430701,0.20965716266050366],[0.9215879592509304,-0.3266795180430701,0.20965716266050366],[0.920087707349911,-0.3297769364064323,0.2113901203887553],[0.9197606208803044,-0.3303333643989609,0.21194402242748064],[0.9196015045147381,-0.33053966109967114,0.2123125180820595],[0.9187361828994529,-0.3304914185446217,0.21610008907843306],[0.9182990849642122,-0.3295980224326321,0.2192987326967232],[0.918278134575101,-0.32922495604814117,0.21994589306548185],[0.9187652423913537,-0.3250552305433204,0.22407482337376916],[0.9179431344114617,-0.32604176785217737,0.22600258317702482],[0.9168460712030876,-0.3278756948855963,0.22779554522147757],[0.9156066140114163,-0.3290341606966688,0.23108667091199353],[0.7137308171973967,-0.5616773034071759,0.41845779646217546],[0.7152060980823247,-0.5538127958969146,0.42634683576484866],[0.47502383569831896,-0.11292387155993577,0.8726972870075692],[0.47138309358398794,-0.10311765437526764,0.8758794029084895],[0.4647192332957179,-0.08749216496241322,0.8811249373813171],[0.46335586715963134,-0.08489515158403865,0.8820964536864827],[0.46110284270498886,-0.08072995656172711,0.8836667033236683],[0.4547796594493351,-0.0697951213222411,0.8878649122421498],[0.4908408576980141,-0.04715509752533731,0.8699722117353254],[0.5122115905500652,-0.03037705512050079,0.8583219215587929],[0.5187973692777565,-0.024625957967589332,0.8545424809947471],[0.5343766136963791,-0.009589575773420777,0.845192093414791],[0.5444923710174344,0.0012223232643689046,0.8387649037898821],[0.568270543191632,0.030960687579401996,0.8222590988035938],[0.5704157811374138,0.03402374250694638,0.8206510961274682],[0.57597970351654,0.04227638465252357,0.8163700683132072],[0.8630097323413833,0.28625686738989675,0.41625858280181666],[0.867223860486233,0.29811530358975463,0.39881078416831117],[0.8734409433700684,0.3186838474997648,0.36815964443098814],[0.8770594262155968,0.33358160923571106,0.3456733615222346],[0.9704857363957112,-0.11643841025501192,0.21118601295957018],[0.9705824404517237,-0.11866069039572842,0.20949789221275067],],
[[0.1819529606706355,-0.9829541420819224,0.026349092340761552],[0.1771143619835328,-0.982874752260812,0.050869678074601736],[0.1771143619835328,-0.982874752260812,0.050869678074601736],[0.1819529606706355,-0.9829541420819224,0.026349092340761552],[0.2074992464768722,-0.9014943523298378,-0.3798052072167215],[-0.12877350272616783,-0.9793356602333282,-0.1559456623025629],[-0.13615513665742154,-0.9836552736316668,-0.11783073206260551],[-0.15703645162964058,-0.9875052556952075,0.01315001269636213],[-0.16528329332563232,-0.9837684909345159,0.06986407654766899],[-0.16621331905214262,-0.9831727986903612,0.07579169139841974],[-0.17498161090826844,-0.9755268800807848,0.13314932250596492],[-0.17922253463811483,-0.9702770138178807,0.16260934639357635],[0.013046421386799073,-0.9778242997676343,0.20902016570879892],[0.0478496823849594,-0.9740402673982158,0.22125994979315822],[0.07739476500474943,-0.9698185538010211,0.23121856122110007],[0.059814404261396344,-0.9458109270365365,0.31916128734723137],[0.0476430202182758,-0.9264534683643773,0.37338199418303103],[0.0476430202182758,-0.9264534683643773,0.37338199418303103],[0.059814404261396344,-0.9458109270365365,0.31916128734723137],[0.07739476500474943,-0.9698185538010211,0.23121856122110007],[0.0478496823849594,-0.9740402673982158,0.22125994979315822],[0.013046421386799073,-0.9778242997676343,0.20902016570879892],[0.032659146345173654,-0.9286120926912524,0.3696119065554808],[0.03459702632562403,-0.9279526089367824,0.37108893992794106],[0.035219047366535944,-0.9273096499968674,0.37263444785108246],[0.03741601200592906,-0.9263269860024326,0.3748577824311794],[0.03599048457336084,-0.9253496199128607,0.3774026575784794],[0.03566260363033934,-0.924721220409684,0.37897076830057747],[0.03591141049340049,-0.9235922604612787,0.38169059067836614],[0.03648774284747025,-0.9229553396125568,0.3831737017366493],[0.036601949274156845,-0.9229298943610857,0.3832240955419782],[0.04230378961152711,-0.9222551245945695,0.38426016517921663],[0.043326703086079936,-0.922245101373112,0.38417023543344564],[0.04585525805753128,-0.9134902610441844,0.4042682751415265],[0.0458854745257564,-0.9128342145582631,0.40574403256159575],[0.05059504633133276,-0.920202949968782,0.38815805048392543],[0.32858738052508335,-0.8111374610262887,0.48382471276226696],[0.32130846073510866,-0.8074546189178212,0.49475035265102263],[0.49908340505814697,-0.6421569667611383,0.5818506550960477],[0.5011598281092267,-0.6409929833933087,0.5813491394421049],[0.5011598281092267,-0.6409929833933087,0.5813491394421049],[0.49908340505814697,-0.6421569667611383,0.5818506550960477],[0.32130846073510866,-0.8074546189178212,0.49475035265102263],[0.32858738052508335,-0.8111374610262887,0.48382471276226696],[0.05059504633133276,-0.920202949968782,0.38815805048392543],[0.0458854745257564,-0.9128342145582631,0.40574403256159575],[0.035582549158358213,-0.838288346881802,0.5440648212093563],[0.012745084805862722,-0.39520512157627685,0.9185044772308798],[0.051203140743125895,-0.4172296857896587,0.9073574971718161],[0.12043876006409361,-0.4245094054578401,0.897377439961611],[0.1333444802380374,-0.4235220279478988,0.8960180474928766],[0.21446440049710044,-0.2564668976041839,0.9424594162894784],[0.21456616298434872,-0.2535222458143967,0.9432326502933401],[0.21461553615298018,-0.245351070188296,0.9453798305439073],[0.27449160361437536,-0.2538161276307858,0.9274867831401811],[0.27449160361437536,-0.2538161276307858,0.9274867831401811],[0.21461553615298018,-0.245351070188296,0.9453798305439073],[0.17153843452237968,-0.10994006978149563,0.9790238743452844],[0.17770831880574905,-0.06802402871625748,0.9817293338514664],[0.17725574093960764,-0.06270602132823003,0.9821651374352147],[0.19960600541699783,-0.06638569771185429,0.9776248675953265],[0.41476856136213636,-0.054069470244597406,0.9083190699820478],[0.3296966043328485,0.1373758553117294,0.9340385556650004],[0.3261945360162401,0.1398898382044312,0.9348946239230858],[0.3176181942737501,0.14554367012888295,0.936982242495394],[0.06962767535611884,0.12322154314406353,0.9899335523810164],[0.035666633426086856,0.1109449396295304,0.9931863428534693],[0.030330861582386254,0.10623302159240897,0.9938785559408236],[-0.0031614377409802945,0.12793001674578014,0.9917781587264535],[-0.0036621744705794663,0.12806751896887628,0.9917586899358651],[-0.04974543311941441,0.46549296691342057,0.8836524710755371],[-0.07171015490109889,0.5488821495159253,0.8328181311828159],[-0.07296169684835963,0.5522274562556908,0.8304946883336324],[-0.0745090320270243,0.5549735160768187,0.8285244719377509],[-0.07377100590352043,0.5561328444298078,0.8278128399791791],[-0.07371329617053665,0.5563764316350585,0.8276542854892459],[-0.07365990773533651,0.5564664346929119,0.827598528909145],[-0.07362311100741736,0.5565028664049675,0.8275773058806317],[-0.07285596164719592,0.5564193221848006,0.8277013632656826],[-0.07212755943833922,0.5565065259353327,0.8277065311817081],[-0.07142082717484981,0.5567671531902746,0.827592534145915],[-0.07098164097837908,0.5570591141562632,0.827433834200328],[-0.07093643718115922,0.5572701595725936,0.827295588728708],[-0.07101608406857647,0.558049248589901,0.8267634195776998],[-0.07101608406857647,0.558049248589901,0.8267634195776998],[-0.07093643718115922,0.5572701595725936,0.827295588728708],[-0.07098164097837908,0.5570591141562632,0.827433834200328],[-0.07142082717484981,0.5567671531902746,0.827592534145915],[-0.07212755943833922,0.5565065259353327,0.8277065311817081],[-0.07285596164719592,0.5564193221848006,0.8277013632656826],[-0.07362311100741736,0.5565028664049675,0.8275773058806317],[-0.07410502626876671,0.557479283500612,0.826876830942402],[-0.07415502375842897,0.5578794006533596,0.8266024478417877],[-0.07401768773477223,0.5585354354209734,0.8261716221715083],[-0.0736161171046786,0.5588022211029439,0.8260270849026967],[-0.07304388864672805,0.5590138171958077,0.8259347083853157],[-0.07198347728989414,0.559139521146354,0.8259427188912566],[-0.07161162568930765,0.5591008197987799,0.8260012399303446],[-0.07130828124688399,0.5595041089580551,0.8257543709146613],[-0.07130828124688399,0.5595041089580551,0.8257543709146613],[-0.07161162568930765,0.5591008197987799,0.8260012399303446],[-0.07198347728989414,0.559139521146354,0.8259427188912566],[-0.07304388864672805,0.5590138171958077,0.8259347083853157],[-0.0736161171046786,0.5588022211029439,0.8260270849026967],[-0.07401768773477223,0.5585354354209734,0.8261716221715083],[-0.07415502375842897,0.5578794006533596,0.8266024478417877],[-0.07410502626876671,0.557479283500612,0.826876830942402],[-0.07362311100741736,0.5565028664049675,0.8275773058806317],[-0.07365990773533651,0.5564664346929119,0.827598528909145],[-0.07371329617053665,0.5563764316350585,0.8276542854892459],[-0.07377100590352043,0.5561328444298078,0.8278128399791791],[-0.0745090320270243,0.5549735160768187,0.8285244719377509],[-0.07296169684835963,0.5522274562556908,0.8304946883336324],[-0.07171015490109889,0.5488821495159253,0.8328181311828159],[-0.04974543311941441,0.46549296691342057,0.8836524710755371],[-0.0036621744705794663,0.12806751896887628,0.9917586899358651],[-0.02709712095393355,0.13011481720130966,0.9911285892257764],[-0.03566884141661072,0.09014862590060978,0.9952893845511609],[-0.035747655417135774,0.08647857687339232,0.9956121538401038],[-0.035746033617919865,0.08486242945861698,0.9957512687147166],[-0.033282689349857224,0.06158949319471144,0.9975464885997342],[-0.03282484609878919,0.05947527144613335,0.997689942599904],[-0.048618336543895274,0.06819767354510729,0.9964864949786021],[-0.04874683457793973,0.06822948995415559,0.9964780393060485],[-0.04875632076380114,0.06825280889607141,0.9964759782670999],[-0.0486602182663013,0.06821848661774386,0.9964830260681116],[-0.0487541367475145,0.0682792375206505,0.9964742745668868],[-0.048752353148330096,0.06828276653329171,0.9964741200136914],[-0.04874787784000542,0.06830605762731398,0.9964727426766424],[-0.04874884310323393,0.06831854982049772,0.9964718390634633],[-0.04875067072638783,0.06832014708990482,0.9964716401410233],[-0.04876878318100983,0.06832933920037207,0.9964701235819788],[-0.04876878318100983,0.06832933920037207,0.9964701235819788],[-0.04875067072638783,0.06832014708990482,0.9964716401410233],[-0.04874884310323393,0.06831854982049772,0.9964718390634633],[-0.04874787784000542,0.06830605762731398,0.9964727426766424],[-0.048752353148330096,0.06828276653329171,0.9964741200136914],[-0.0487541367475145,0.0682792375206505,0.9964742745668868],[-0.0486602182663013,0.06821848661774386,0.9964830260681116],[-0.04875632076380114,0.06825280889607141,0.9964759782670999],[-0.04876127769430558,0.0682579796273673,0.9964753815397592],[-0.04876557398305262,0.06826679816677407,0.9964745671928413],[-0.04877700602020011,0.06826582780648278,0.9964740741422232],[-0.048785974159917964,0.0682675202972795,0.9964735191653256],[-0.048807533111025425,0.06827870570612465,0.9964716970685684],[-0.0488136142556673,0.0682844374896932,0.9964710064322068],[-0.04881463249718563,0.06829572388760412,0.9964701830726461],[-0.04881158080044817,0.06831171103572009,0.9964692367128719],[-0.04880429237336402,0.068325998022275,0.9964686141771829],[-0.04879869565443251,0.0683322096595069,0.9964684623335931],[-0.04880426043391182,0.0683441618905529,0.9964673701125275],[-0.04880426043391182,0.0683441618905529,0.9964673701125275],[-0.04879869565443251,0.0683322096595069,0.9964684623335931],[-0.04880429237336402,0.068325998022275,0.9964686141771829],[-0.04881158080044817,0.06831171103572009,0.9964692367128719],[-0.04881463249718563,0.06829572388760412,0.9964701830726461],[-0.0488136142556673,0.0682844374896932,0.9964710064322068],[-0.048807533111025425,0.06827870570612465,0.9964716970685684],[-0.048785974159917964,0.0682675202972795,0.9964735191653256],[-0.04877700602020011,0.06826582780648278,0.9964740741422232],[-0.04876557398305262,0.06826679816677407,0.9964745671928413],[-0.04876127769430558,0.0682579796273673,0.9964753815397592],
[-0.04875632076380114,0.06825280889607141,0.9964759782670999],[-0.04874683457793973,0.06822948995415559,0.9964780393060485],[-0.048618336543895274,0.06819767354510729,0.9964864949786021],[-0.03282484609878919,0.05947527144613335,0.997689942599904],[-0.03132924987257749,0.05357577367113981,0.9980721990807881],[-0.03233613834884232,0.053085585149762624,0.9980662777621494],[-0.04593538062900623,0.04474591999733154,0.9979417535357766],[-0.05088093443593448,0.04523218774842281,0.9976798984155276],[-0.053186936715032024,0.04529951019174509,0.9975565668869406],[-0.05361251030594407,0.045301086565925824,0.9975337138636676],[-0.0738233541788046,0.071776302812104,0.9946850128218561],[-0.07421727978070969,0.07237489836056575,0.994612321193162],[-0.07441185336845403,0.07267172687905273,0.9945761389610592],[-0.09613848509494527,0.11419851061922437,0.9887952729741379],[-0.1117654440340482,0.10679049158949425,0.9879798967721692],[-0.0961891300363036,0.04113422939446774,0.9945127583067914],[-0.09489868746547518,0.03927290848327296,0.9947119571899167],[-0.09298444928675799,0.036688359386117766,0.9949913851267224],[-0.0667359414168925,0.013071996830179275,0.9976850389887948],[-0.06565186153726857,0.010980910612472694,0.9977821669476822],[-0.0652774161580308,0.010319853331664679,0.9978137900264479],[-0.06757031751865977,0.008760135746679169,0.9976760557476195],[-0.0692552898953517,0.007487255717254764,0.9975708725816604],[-0.10608826328335823,0.022191415755651447,0.9941090591380207],[-0.10638248161346757,0.02235852661748219,0.9940738724527748],[-0.10648441114056958,0.022445147336330712,0.9940610069533442],[-0.10638114922998584,0.02243304187732775,0.9940723362616212],[-0.10646013963080564,0.022502237188998974,0.9940623159496992],[-0.10647169736000497,0.022500203273376516,0.9940611241336904],[-0.10648198952759057,0.022511756725762673,0.9940597601328435],[-0.10648198952759057,0.022511756725762673,0.9940597601328435],[-0.10647169736000497,0.022500203273376516,0.9940611241336904],[-0.10648662152848619,0.022446106205117895,0.994060748521778],[-0.10651187793887608,0.022422899067180865,0.9940585664111331],[-0.1065164106320991,0.022422980115039477,0.9940580789012353],[-0.1065627692291354,0.022435927721895635,0.9940528181950273],[-0.10657284403464187,0.022442137191861007,0.9940515979528576],[-0.10657284403464187,0.022442137191861007,0.9940515979528576],[-0.1065627692291354,0.022435927721895635,0.9940528181950273],[-0.1065164106320991,0.022422980115039477,0.9940580789012353],[-0.10651187793887608,0.022422899067180865,0.9940585664111331],[-0.10648662152848619,0.022446106205117895,0.994060748521778],[-0.10647169736000497,0.022500203273376516,0.9940611241336904],[-0.10646013963080564,0.022502237188998974,0.9940623159496992],[-0.10638114922998584,0.02243304187732775,0.9940723362616212],[-0.10648441114056958,0.022445147336330712,0.9940610069533442],[-0.10638248161346757,0.02235852661748219,0.9940738724527748],[-0.10608826328335823,0.022191415755651447,0.9941090591380207],[-0.0692552898953517,0.007487255717254764,0.9975708725816604],[-0.07649834573994442,0.00045179937372282945,0.9970696058833495],[-0.10661597821792398,-0.01739118236940355,0.9941481680134151],[-0.11008635741476648,-0.020479988597309543,0.9937110062680208],[-0.13155924572619443,-0.04889163366429512,0.9901019003221796],[-0.14246986914026066,-0.05514769902221682,0.988261639283703],[-0.12850610350359976,-0.1144726606273001,0.9850797893222808],[-0.06057372667066949,-0.15028580386634002,0.9867851847253662],[-0.06580924475085051,-0.2167604126049327,0.9740041410757256],[-0.06403067128196946,-0.24791979134134684,0.9666622213557554],[-0.06275435476091266,-0.2587577815932308,0.9639016036004356],[-0.03939578088225994,-0.3449780311455428,0.9377836266834807],[-0.36473252892151353,-0.7003220959991892,0.6136115580738518],[-0.5131754990176065,-0.4342299364293669,0.7403345659339287],[-0.5140258424104942,-0.43316668075759873,0.7403675168560724],[-0.5141148817588294,-0.4331042498051607,0.7403422162451727],[-0.514864456667365,-0.43219244261341855,0.74035416106649],[-0.5149933181771985,-0.4319445173318362,0.7404092221061309],[-0.5144028647447191,-0.4309015326699579,0.7414267070217445],[-0.5143614047836025,-0.4306625147873589,0.7415943255082709],[-0.5145536029573686,-0.42886586743288796,0.7425016211663293],[-0.5146117978893184,-0.4286902900454915,0.742562679303125],[-0.5150433659778022,-0.4283581436823424,0.7424551379735165],[-0.5150433659778022,-0.4283581436823424,0.7424551379735165],[-0.5146117978893184,-0.4286902900454915,0.742562679303125],[-0.5145536029573686,-0.42886586743288796,0.7425016211663293],[-0.5143614047836025,-0.4306625147873589,0.7415943255082709],[-0.5144028647447191,-0.4309015326699579,0.7414267070217445],[-0.5149933181771985,-0.4319445173318362,0.7404092221061309],[-0.514864456667365,-0.43219244261341855,0.74035416106649],[-0.5141148817588294,-0.4331042498051607,0.7403422162451727],[-0.5140258424104942,-0.43316668075759873,0.7403675168560724],[-0.5131754990176065,-0.4342299364293669,0.7403345659339287],[-0.36473252892151353,-0.7003220959991892,0.6136115580738518],[-0.03939578088225994,-0.3449780311455428,0.9377836266834807],[-0.036258650244078754,-0.34899251257462616,0.9364238017315274],[0.012745084805862722,-0.39520512157627685,0.9185044772308798],[0.035582549158358213,-0.838288346881802,0.5440648212093563],[0.0458854745257564,-0.9128342145582631,0.40574403256159575],[0.04585525805753128,-0.9134902610441844,0.4042682751415265],[0.043326703086079936,-0.922245101373112,0.38417023543344564],[0.04230378961152711,-0.9222551245945695,0.38426016517921663],[0.036601949274156845,-0.9229298943610857,0.3832240955419782],[0.03648774284747025,-0.9229553396125568,0.3831737017366493],[0.03591141049340049,-0.9235922604612787,0.38169059067836614],[0.03566260363033934,-0.924721220409684,0.37897076830057747],[0.03599048457336084,-0.9253496199128607,0.3774026575784794],[0.03741601200592906,-0.9263269860024326,0.3748577824311794],[0.035219047366535944,-0.9273096499968674,0.37263444785108246],[0.03459702632562403,-0.9279526089367824,0.37108893992794106],[0.032659146345173654,-0.9286120926912524,0.3696119065554808],[0.013046421386799073,-0.9778242997676343,0.20902016570879892],[-0.17922253463811483,-0.9702770138178807,0.16260934639357635],[-0.2751470945732987,-0.9144590683815519,0.29674684261608675],[-0.3024783056773,-0.8881775861693022,0.34590092515207543],[-0.3060312156110723,-0.8841464648536715,0.3530296358074839],[-0.3222158548018009,-0.8634061239298015,0.3882097475268505],[-0.33623362530977174,-0.840840011936767,0.42418748630437664],[-0.34082173001000454,-0.8326040142035892,0.436590315839755],[-0.34919637505599305,-0.8159605035990009,0.46072806319370135],[-0.3526249957698028,-0.8084202072669086,0.47128800201243765],[-0.3803578954595106,-0.7049710731075672,0.5986181232164437],[-0.47492159121285554,-0.691758643339752,0.5439847990197842],[-0.5823567618361326,-0.42203191973328197,0.694801885914233],[-0.5773495143589836,-0.42432374071232776,0.6975793154454503],[-0.5837212980941479,-0.4192464255183898,0.6953429951048162],[-0.5837677636687533,-0.41915917834605776,0.6953565857237856],[-0.583666125739192,-0.4190139216243535,0.6955294293914398],[-0.5831760396992733,-0.41745237737144664,0.6968781954887087],[-0.5831760396992733,-0.41745237737144664,0.6968781954887087],[-0.583666125739192,-0.4190139216243535,0.6955294293914398],[-0.5837677636687533,-0.41915917834605776,0.6953565857237856],[-0.5837942408510343,-0.4191563016257837,0.6953360907910359],[-0.5859695992077186,-0.4183487534466987,0.6939913178808068],[-0.5872774205699668,-0.4174329657392158,0.6934370558333677],[-0.5874944039509375,-0.4172075217878411,0.6933889306081982],[-0.5877277359906973,-0.4161800003306084,0.6938085583733196],[-0.5877008002744754,-0.4147232421757215,0.6947031033153654],[-0.5873978834027783,-0.41379693942945117,0.6955111929313252],[-0.5871562584695487,-0.4134698674340072,0.6959096183155863],[-0.5868563455219414,-0.41350331618707975,0.6961426845287679],[-0.5868563455219414,-0.41350331618707975,0.6961426845287679],[-0.5871562584695487,-0.4134698674340072,0.6959096183155863],[-0.5873978834027783,-0.41379693942945117,0.6955111929313252],[-0.5877008002744754,-0.4147232421757215,0.6947031033153654],[-0.5877277359906973,-0.4161800003306084,0.6938085583733196],[-0.5874944039509375,-0.4172075217878411,0.6933889306081982],[-0.5872774205699668,-0.4174329657392158,0.6934370558333677],[-0.5859695992077186,-0.4183487534466987,0.6939913178808068],[-0.5837942408510343,-0.4191563016257837,0.6953360907910359],[-0.5837677636687533,-0.41915917834605776,0.6953565857237856],[-0.5837212980941479,-0.4192464255183898,0.6953429951048162],[-0.5773495143589836,-0.42432374071232776,0.6975793154454503],[-0.5823567618361326,-0.42203191973328197,0.694801885914233],[-0.47492159121285554,-0.691758643339752,0.5439847990197842],[-0.487856102026803,-0.6883015742251071,0.5368774223549106],[-0.5589689576749685,-0.6364881410857646,0.5314475991223849],[-0.5638702962540381,-0.6321784379295958,0.5314138797766574],[-0.5698444660886727,-0.6268896084928364,0.531306600026589],[-0.589620354335762,-0.6083032884935585,0.5313331788632187],[-0.6374420138767543,-0.5537467872379408,0.5357538376609229],[-0.7393237367904034,-0.3084388193635967,0.5985531780283727],[-0.7422697872297368,-0.2744740332078836,0.6113097153330044],[-0.7422828489454567,-0.27424580679443294,0.6113962787072611],[-0.7429983775222601,-0.25588067625383776,0.618448454213581],[-0.5878183799696345,-0.4123176779728892,0.6960342553358414],[-0.5886052623086214,-0.41060638925638065,0.696380814127182],[-0.5694100862337653,-0.34197762619888455,0.7475449530795002],[-0.5690973807934934,-0.3410530891427818,0.7482051600731924],[-0.6046012145779884,-0.3288917627289733,0.7254568076321636],[-0.5846481209353988,-0.26661144683129834,0.7662277149158918],[-0.5849706761796357,-0.26551894447883917,0.7663608798293288],[-0.5848774569984858,-0.26414828208417074,0.7669054996327551],[-0.5846575352555664,-0.2641170415014045,0.7670839294741035],
[-0.5844843120734262,-0.26402768251268677,0.7672466824998552],[-0.5839440706825224,-0.26347934861138467,0.7678463096024137],[-0.583413133235454,-0.2624004247984049,0.7686189777997985],[-0.5833130643389021,-0.26187259619833425,0.7688749003133761],[-0.5835130945497956,-0.26142724204312623,0.7688746748376137],[-0.5843125692543585,-0.2603303562651303,0.768639660060708],[-0.5843125692543585,-0.2603303562651303,0.768639660060708],[-0.5835130945497956,-0.26142724204312623,0.7688746748376137],[-0.5833130643389021,-0.26187259619833425,0.7688749003133761],[-0.583413133235454,-0.2624004247984049,0.7686189777997985],[-0.5839440706825224,-0.26347934861138467,0.7678463096024137],[-0.5844843120734262,-0.26402768251268677,0.7672466824998552],[-0.5846575352555664,-0.2641170415014045,0.7670839294741035],[-0.5848774569984858,-0.26414828208417074,0.7669054996327551],[-0.5850838462899144,-0.26404654867815536,0.7667830938027745],[-0.5863714746539749,-0.2629758281082148,0.766167219047462],[-0.5869494275416016,-0.2621963588393979,0.7659918008177032],[-0.5871988762025829,-0.2616574301958105,0.7659849012935883],[-0.5874711043242903,-0.26164287956143634,0.7657811078622917],[-0.5874711043242903,-0.26164287956143634,0.7657811078622917],[-0.5871988762025829,-0.2616574301958105,0.7659849012935883],[-0.5869494275416016,-0.2621963588393979,0.7659918008177032],[-0.5863714746539749,-0.2629758281082148,0.766167219047462],[-0.5850838462899144,-0.26404654867815536,0.7667830938027745],[-0.5848774569984858,-0.26414828208417074,0.7669054996327551],[-0.5849706761796357,-0.26551894447883917,0.7663608798293288],[-0.5846481209353988,-0.26661144683129834,0.7662277149158918],[-0.6046012145779884,-0.3288917627289733,0.7254568076321636],[-0.5690973807934934,-0.3410530891427818,0.7482051600731924],[-0.5694100862337653,-0.34197762619888455,0.7475449530795002],[-0.5886052623086214,-0.41060638925638065,0.696380814127182],[-0.5878183799696345,-0.4123176779728892,0.6960342553358414],[-0.7429983775222601,-0.25588067625383776,0.618448454213581],[-0.7422828489454567,-0.27424580679443294,0.6113962787072611],[-0.7422697872297368,-0.2744740332078836,0.6113097153330044],[-0.7393237367904034,-0.3084388193635967,0.5985531780283727],[-0.6374420138767543,-0.5537467872379408,0.5357538376609229],[-0.589620354335762,-0.6083032884935585,0.5313331788632187],[-0.5698444660886727,-0.6268896084928364,0.531306600026589],[-0.5638702962540381,-0.6321784379295958,0.5314138797766574],[-0.5589689576749685,-0.6364881410857646,0.5314475991223849],[-0.819583699483788,-0.462835898465785,0.3377358296536475],[-0.8398165687047491,-0.4382257970106695,0.32041579512150303],[-0.8413163825516801,-0.43439209047171073,0.32169901489711195],[-0.8414382488264022,-0.4341663804931788,0.32168498171566884],[-0.8426455453491325,-0.43107135946934455,0.32268555584115355],[-0.8417616017432716,-0.4304197288440682,0.3258469930080693],[-0.8419321754662068,-0.4260071211685622,0.33116181034112957],[-0.8419752022088279,-0.42592634282552966,0.33115632162571307],[-0.8419752022088279,-0.42592634282552966,0.33115632162571307],[-0.8419321754662068,-0.4260071211685622,0.33116181034112957],[-0.8417616017432716,-0.4304197288440682,0.3258469930080693],[-0.8426455453491325,-0.43107135946934455,0.32268555584115355],[-0.8441063962525742,-0.42978952369701245,0.3205703622074058],[-0.8447560879596727,-0.4290031245318726,0.31991166123941217],[-0.8469784324684629,-0.42556468283501064,0.3186255414382251],[-0.848127925440257,-0.4233470479213003,0.3185220543458904],[-0.8488796488285988,-0.42316761863354985,0.3167530715630795],[-0.859383469268916,-0.4100527359481132,0.305477996734281],[-0.8512060346207999,-0.4226451303108534,0.31115812772552703],[-0.8512060346207999,-0.4226451303108534,0.31115812772552703],[-0.859383469268916,-0.4100527359481132,0.305477996734281],[-0.8488796488285988,-0.42316761863354985,0.3167530715630795],[-0.848127925440257,-0.4233470479213003,0.3185220543458904],[-0.8469784324684629,-0.42556468283501064,0.3186255414382251],[-0.8447560879596727,-0.4290031245318726,0.31991166123941217],[-0.8441063962525742,-0.42978952369701245,0.3205703622074058],[-0.8426455453491325,-0.43107135946934455,0.32268555584115355],[-0.8414382488264022,-0.4341663804931788,0.32168498171566884],[-0.8413163825516801,-0.43439209047171073,0.32169901489711195],[-0.8398165687047491,-0.4382257970106695,0.32041579512150303],[-0.819583699483788,-0.462835898465785,0.3377358296536475],[-0.5589689576749685,-0.6364881410857646,0.5314475991223849],[-0.487856102026803,-0.6883015742251071,0.5368774223549106],[-0.7099181107726867,-0.6741008087300023,0.20397150699667901],[-0.7274557163013318,-0.6634145124603633,0.17518380483793317],[-0.747186194333201,-0.6490016866104886,0.14321173755879538],[-0.7929700787840996,-0.6055569354934257,0.06707646404626479],[-0.807219066324446,-0.5887926140747946,0.04148055656883095],[-0.8383060779071861,-0.5448348980139732,-0.01994626907404469],[-0.8399700498230621,-0.5422151015082274,-0.021286124510235833],[-0.8770225186544572,-0.4778980394488278,-0.0494465940582234],[-0.897447492205476,-0.43666032006353256,-0.06257606264471534],[-0.9131377408108693,-0.40135617476428814,-0.07136306667597765],[-0.9157226897688991,-0.39523106308431055,-0.07241796887277586],[-0.9526305550118667,-0.2935438453718067,-0.07954267095160869],[-0.9634537555231281,-0.26606155615204,-0.0311144549419648],[-0.9745090568664257,-0.21443458501626209,0.0659538234995727],[-0.9745388682498765,-0.21405826254908172,0.06673121087406186],[-0.9749738406272744,-0.19645656545116674,0.10407126396673265],[-0.9675350455140472,-0.1534457616005774,0.2008241368684284],[-0.9603747183868712,-0.13406012853873403,0.2443527823036114],[-0.8612295579454686,-0.39877657208919837,0.31505696956874524],[-0.8557728639307076,-0.40661143831809193,0.3198748873993191],[-0.8488540748563077,-0.41465580189796836,0.3278830973871555],[-0.8497635464720302,-0.41191465866128835,0.32898059071506336],[-0.7472887867588314,-0.23002962113419598,0.6234146634346774],[-0.7488082089512197,-0.22378930795861346,0.6238626546369572],[-0.6987278527431355,-0.17433001113353355,0.6938216161371373],[-0.7090647540068634,0.0001111609521796139,0.7051433629187961],[-0.7083127244221932,0.000804956301478721,0.7058983187874605],[-0.7072678229282564,-0.006460739728911233,0.7069161799622922],[-0.7069117076325176,0.002216044348179533,0.7072983293911594],[-0.7064267689430498,0.002116820131692661,0.7077829746420955],[-0.7046066892364439,0.0024867490836510014,0.709593707386313],[-0.7053065267464306,-0.004120364013356729,0.7088904893770857],[-0.699857004509993,-0.05493779766141833,0.7121671233821544],[-0.703324944901144,-0.004301024634339313,0.710855486767105],[-0.7027241431397749,0.0002492965046852455,0.7114623788365215],[-0.7027241431397749,0.0002492965046852455,0.7114623788365215],[-0.703324944901144,-0.004301024634339313,0.710855486767105],[-0.699857004509993,-0.05493779766141833,0.7121671233821544],[-0.7053065267464306,-0.004120364013356729,0.7088904893770857],[-0.7046066892364439,0.0024867490836510014,0.709593707386313],[-0.7043054074101902,0.002666091656629736,0.7098920939467099],[-0.7040201486415384,0.0052142061883255295,0.7101608566800706],[-0.7041191971398484,0.006408701312110684,0.7100528746273952],[-0.7042218107495256,0.006790417779333494,0.7099475554511343],[-0.7044694812883429,0.006948033712142553,0.709700271072844],[-0.7050931516218846,0.012452825403781988,0.709005341781979],[-0.7017998056268121,0.036985830835405895,0.7114134389647018],[-0.7030972321816926,0.014574475000280845,0.7109443485793451],[-0.70262877466512,0.009152156993122218,0.7114977463316139],[-0.70262877466512,0.009152156993122218,0.7114977463316139],[-0.7030972321816926,0.014574475000280845,0.7109443485793451],[-0.7017998056268121,0.036985830835405895,0.7114134389647018],[-0.6329014149484108,0.216402120335397,0.7433746843084206],[-0.20149800347720223,0.02394385559063837,0.9791962246527282],[-0.18913291525981313,0.02154914495702026,0.981715017057876],[-0.18858401500811472,0.026221102436946083,0.9817069435785867],[-0.5061699648521557,0.35604429792044806,0.7855090226088448],[-0.5053477647591633,0.3563223366410217,0.785912227327963],[-0.5053477647591633,0.3563223366410217,0.785912227327963],[-0.5061699648521557,0.35604429792044806,0.7855090226088448],[-0.18858401500811472,0.026221102436946083,0.9817069435785867],[-0.18913291525981313,0.02154914495702026,0.981715017057876],[-0.20149800347720223,0.02394385559063837,0.9791962246527282],[-0.6329014149484108,0.216402120335397,0.7433746843084206],[-0.7017998056268121,0.036985830835405895,0.7114134389647018],[-0.7050931516218846,0.012452825403781988,0.709005341781979],[-0.7044694812883429,0.006948033712142553,0.709700271072844],[-0.7042218107495256,0.006790417779333494,0.7099475554511343],[-0.7041191971398484,0.006408701312110684,0.7100528746273952],[-0.7040201486415384,0.0052142061883255295,0.7101608566800706],[-0.7043054074101902,0.002666091656629736,0.7098920939467099],[-0.7046066892364439,0.0024867490836510014,0.709593707386313],[-0.7064267689430498,0.002116820131692661,0.7077829746420955],[-0.7069117076325176,0.002216044348179533,0.7072983293911594],[-0.7072678229282564,-0.006460739728911233,0.7069161799622922],[-0.7083127244221932,0.000804956301478721,0.7058983187874605],[-0.7090647540068634,0.0001111609521796139,0.7051433629187961],[-0.6987278527431355,-0.17433001113353355,0.6938216161371373],[-0.7488082089512197,-0.22378930795861346,0.6238626546369572],[-0.7472887867588314,-0.23002962113419598,0.6234146634346774],[-0.8497635464720302,-0.41191465866128835,0.32898059071506336],[-0.8488540748563077,-0.41465580189796836,0.3278830973871555],[-0.8557728639307076,-0.40661143831809193,0.3198748873993191],[-0.8612295579454686,-0.39877657208919837,0.31505696956874524],[-0.9603747183868712,-0.13406012853873403,0.2443527823036114],[-0.9534235920943106,-0.11920975755837808,0.2770784866077739],[-0.8722138900263097,-0.03173869454590986,0.48809382839131876],[-0.8712836397993499,-0.007518467949534084,0.49072221435114244],
[-0.8703315180270671,0.007184373880910314,0.49241388434998484],[-0.8620390740716922,0.07073682664916177,0.5018813964765242],[-0.8578945971180074,0.09089777634443881,0.5057217164522089],[-0.8512733963320451,0.11668501936725248,0.5115840214007557],[-0.7296933952223116,0.32631784673176234,0.6008861887855981],[-0.6629147485305753,0.24450339296787407,0.7076454811611824],[-0.6520500297220323,0.2341390480097231,0.7211169564894432],[-0.5523488898277782,0.33235739161017286,0.7644928175909198],[-0.5361187216474124,0.34295776352194446,0.7713343559956152],[-0.5091384163126896,0.3595464967635883,0.7819874613442581],[-0.5091384163126896,0.3595464967635883,0.7819874613442581],[-0.5361187216474124,0.34295776352194446,0.7713343559956152],[-0.5523488898277782,0.33235739161017286,0.7644928175909198],[-0.6520500297220323,0.2341390480097231,0.7211169564894432],[-0.6629147485305753,0.24450339296787407,0.7076454811611824],[-0.7296933952223116,0.32631784673176234,0.6008861887855981],[-0.6984196725965225,0.4348145075131345,0.5684595895807166],[-0.6842479829726986,0.451546641116431,0.5726345507339411],[-0.6476948635689135,0.4882915586271807,0.5848612805442717],[-0.5881014100761002,0.5339079871403941,0.6075187180113839],[-0.5853950048161539,0.5352555185375875,0.6089451684768946],[-0.5069127716078508,0.5641060215326485,0.6517851167765754],[-0.4756276615141904,0.5710997681945005,0.6690466219709434],[-0.44522767972287003,0.5756248259152494,0.6858778120034416],[-0.3137478361198438,0.5562572576336605,0.7695064383486308],[-0.17976883463080726,0.6768130438281933,0.7138678237597613],[-0.15906273484496755,0.6871881067500157,0.7088522782110308],[-0.15826818518507577,0.6875461164965955,0.7086829469153837],[-0.1362167479611267,0.7468007602359373,0.6509482483930047],[-0.1217926347315658,0.775039100049472,0.6200652768214394],[-0.12096611161813048,0.7765227443028949,0.6183685207223044],[-0.11247520951245739,0.7917167799506458,0.600444724841271],[-0.04272328884737744,0.8788424235138793,0.47519544949664116],[0.03653997986722079,0.9052118348431903,0.4233867781723088],[0.037589309633223274,0.9052301666811639,0.42325570183009953],[0.04408392342928074,0.905289493651195,0.42250152707397903],[0.06780276218240607,0.9048272845680182,0.4203455370783694],[0.06981483070601784,0.9047327427083874,0.42021964933216654],[0.12015514393458229,0.9001677126545193,0.41864164924239267],[0.09810988589803475,0.7918530873167192,0.6027795105974114],[0.09637594224200896,0.7895157553702399,0.6061159540707741],[0.09637594224200896,0.7895157553702399,0.6061159540707741],[0.09810988589803475,0.7918530873167192,0.6027795105974114],[0.12015514393458229,0.9001677126545193,0.41864164924239267],[0.1295864426467074,0.8989093132208401,0.41853243660080774],[0.1479913920044105,0.892050326896507,0.42701845648219017],[0.1764711149300984,0.880197886848235,0.44057873936815184],[0.2611403734479613,0.8326881870642597,0.48829917927342015],[0.26721435346274125,0.8283068377395401,0.4924472274847453],[0.3794756557369685,0.7004875507286991,0.6044132840839174],[0.5534557819096454,0.7134347903716164,0.42976446730527984],[0.5600851842372623,0.7121815504651423,0.42320447253659543],[0.5765337704680136,0.7086062640394779,0.40679967314877435],[0.5886299868525255,0.705651336929769,0.39442480812852687],[0.5916729105364756,0.7048846912237243,0.39122977777225826],[0.5939146983700352,0.7042686182543276,0.3889357844197039],[0.8201083866825281,0.5477589909007912,0.16547604654549902],[0.8634279515024369,0.4637103737825129,0.1986576497665966],[0.8825588102219627,0.3886405697432315,0.26466668481176503],[0.8770594262155968,0.33358160923571106,0.3456733615222346],[0.8734409433700684,0.3186838474997648,0.36815964443098814],[0.6642924522865957,0.5284592204148216,0.5286268912887617],[0.6576428342302518,0.5314094498509826,0.5339568327071745],[0.6447133131424209,0.5378229299816362,0.5432230111500165],[0.6438229604831261,0.537289476143249,0.5448045653080158],[0.6424869989007189,0.5384530762364117,0.5452327401533154],[0.6419195616707812,0.5387962211385818,0.5455620115359726],[0.639261754379656,0.5396656675522656,0.5478187443423344],[0.6388269147456029,0.53967774494982,0.5483138741656016],[0.6385720477446802,0.5390474415310017,0.5492300024744161],[0.6385720477446802,0.5390474415310017,0.5492300024744161],[0.6388269147456029,0.53967774494982,0.5483138741656016],[0.639261754379656,0.5396656675522656,0.5478187443423344],[0.6419195616707812,0.5387962211385818,0.5455620115359726],[0.6424869989007189,0.5384530762364117,0.5452327401533154],[0.6438229604831261,0.537289476143249,0.5448045653080158],[0.6447133131424209,0.5378229299816362,0.5432230111500165],[0.6576428342302518,0.5314094498509826,0.5339568327071745],[0.6642924522865957,0.5284592204148216,0.5286268912887617],[0.8734409433700684,0.3186838474997648,0.36815964443098814],[0.867223860486233,0.29811530358975463,0.39881078416831117],[0.8630097323413833,0.28625686738989675,0.41625858280181666],[0.57597970351654,0.04227638465252357,0.8163700683132072],[0.574041676930232,0.21849895063874322,0.7891351986300543],[0.574041676930232,0.21849895063874322,0.7891351986300543],[0.57597970351654,0.04227638465252357,0.8163700683132072],[0.5704157811374138,0.03402374250694638,0.8206510961274682],[0.3986285757445997,0.253152260309899,0.8814812486376674],[0.39627730640232867,0.2544927615572468,0.8821551625113812],[0.39627730640232867,0.2544927615572468,0.8821551625113812],[0.3986285757445997,0.253152260309899,0.8814812486376674],[0.5704157811374138,0.03402374250694638,0.8206510961274682],[0.568270543191632,0.030960687579401996,0.8222590988035938],[0.5444923710174344,0.0012223232643689046,0.8387649037898821],[0.5343766136963791,-0.009589575773420777,0.845192093414791],[0.5187973692777565,-0.024625957967589332,0.8545424809947471],[0.5122115905500652,-0.03037705512050079,0.8583219215587929],[0.3950724331721508,0.25142028249634757,0.8835754716473818],[0.39490242789104457,0.25192001624538274,0.8835091272084767],[0.3966213430315605,0.2515206823805381,0.8828526811346669],[0.4001498242789005,0.24969718078577935,0.8817774299885426],[0.3951246523154808,0.2533842692572635,0.8829908953242571],[0.39522211558529324,0.25379472019220184,0.8828293829244964],[0.3952174586384018,0.25410411306453956,0.8827424653380436],[0.39495086358184267,0.25440049250688807,0.8827764183349086],[0.3946177575491872,0.25463152911501613,0.8828587711561796],[0.3946177575491872,0.25463152911501613,0.8828587711561796],[0.39495086358184267,0.25440049250688807,0.8827764183349086],[0.3952174586384018,0.25410411306453956,0.8827424653380436],[0.39522211558529324,0.25379472019220184,0.8828293829244964],[0.3951246523154808,0.2533842692572635,0.8829908953242571],[0.4001498242789005,0.24969718078577935,0.8817774299885426],[0.3966213430315605,0.2515206823805381,0.8828526811346669],[0.39490242789104457,0.25192001624538274,0.8835091272084767],[0.3950724331721508,0.25142028249634757,0.8835754716473818],[0.5122115905500652,-0.03037705512050079,0.8583219215587929],[0.4908408576980141,-0.04715509752533731,0.8699722117353254],[0.4547796594493351,-0.0697951213222411,0.8878649122421498],[0.46110284270498886,-0.08072995656172711,0.8836667033236683],[0.46335586715963134,-0.08489515158403865,0.8820964536864827],[0.4647192332957179,-0.08749216496241322,0.8811249373813171],[0.47138309358398794,-0.10311765437526764,0.8758794029084895],[0.47502383569831896,-0.11292387155993577,0.8726972870075692],[0.7152060980823247,-0.5538127958969146,0.42634683576484866],[0.7137308171973967,-0.5616773034071759,0.41845779646217546],[0.7132825142453648,-0.5638498943452075,0.41629478920436835],[0.7131752886559288,-0.5643421051301125,0.4158112504825304],[0.7107165483780337,-0.5750156559657266,0.4052640907555458],[0.7077067143323126,-0.5869809922829141,0.3931978143219112],[0.7044904923366525,-0.5983690698450552,0.3816380516405882],[0.6338101240501469,-0.7315912189625917,0.2511155411127848],[0.6913781396891883,-0.7212459338471785,-0.04243313409151848],[0.4100712388209402,-0.8557636132126947,-0.3154524011527141],[0.36066519403942443,-0.8677484248894483,-0.3419550977985064],[0.333686229720345,-0.8735720795254369,-0.3542955291400458],[0.2976221631652689,-0.8802794283531152,-0.3694985466969239],[0.23768541530553805,-0.8884133569548608,-0.39271790197956224],[0.2074992464768722,-0.9014943523298378,-0.3798052072167215],[0.1819529606706355,-0.9829541420819224,0.026349092340761552],[0.18260445812761492,-0.9814599971117888,0.05823989990760616],[0.18252700861977028,-0.9814558378064466,0.058551938994061796],[0.18292998792211038,-0.9813451048824882,0.05914731305811656],[0.19061924677039252,-0.9798607851505818,0.059473897507845166],[0.19378718251195254,-0.9791696493685522,0.060607966881804726],[0.19603341971053023,-0.9786197994423045,0.062242963426390546],[0.19668596228982746,-0.9782907372002696,0.06528296673924687],[0.19645607806119372,-0.9780964715371971,0.06879172740453002],[0.19645607806119372,-0.9780964715371971,0.06879172740453002],[0.19668596228982746,-0.9782907372002696,0.06528296673924687],[0.19603341971053023,-0.9786197994423045,0.062242963426390546],[0.19378718251195254,-0.9791696493685522,0.060607966881804726],[0.19061924677039252,-0.9798607851505818,0.059473897507845166],[0.18292998792211038,-0.9813451048824882,0.05914731305811656],[0.18030251840682082,-0.9813507566292736,0.06664603753645183],[0.17998152338195086,-0.9809385964699386,0.07325381353007662],[0.18003853672359804,-0.9809061948843171,0.07354700627487115],[0.18682160557212277,-0.9794570881515928,0.07590454637936578],[0.1918413676804621,-0.9784672852677804,0.07614894160255957],[0.19355744204746578,-0.9781578772790551,0.0757804971280547],[0.19481479432241874,-0.9777576403122303,0.07769937402690597],[0.19269710085300523,-0.9757228717024862,0.1040802813192804],[0.1993641520152302,-0.9762809879231789,0.08443558201960881],[0.1993641520152302,-0.9762809879231789,0.08443558201960881],[0.19269710085300523,-0.9757228717024862,0.1040802813192804],[0.19481479432241874,-0.9777576403122303,0.07769937402690597],[0.19355744204746578,-0.9781578772790551,0.0757804971280547],[0.1918413676804621,-0.9784672852677804,0.07614894160255957],[0.18682160557212277,-0.9794570881515928,0.07590454637936578],[0.18003853672359804,-0.9809061948843171,0.07354700627487115],[0.17998152338195086,-0.9809385964699386,0.07325381353007662],[0.18030251840682082,-0.9813507566292736,0.06664603753645183],[0.18292998792211038,-0.9813451048824882,0.05914731305811656],[0.18252700861977028,-0.9814558378064466,0.058551938994061796],[0.18260445812761492,-0.9814599971117888,0.05823989990760616],[0.1819529606706355,-0.9829541420819224,0.026349092340761552],],
[[-0.5079424604665207,-0.860198479245615,-0.0453104089448385],[-0.5111027752686513,-0.8581767744257724,-0.048026835715665205],[-0.51154461531459,-0.8578758573350481,-0.04869414692038808],[-0.5142834698762564,-0.8557209132520869,-0.057045869570480474],[-0.5144886365579117,-0.8554298533309299,-0.05950805729483107],[-0.5132698260071934,-0.856033439126039,-0.061325661909120005],[-0.5099501196376183,-0.8577960159765566,-0.06431850788323547],[-0.5796534032123826,-0.7791354288204835,-0.23864181465330958],[-0.5746626180962598,-0.7820388327442727,-0.24120144991837786],[-0.5380115478205428,-0.8016370045537455,-0.26061789528319423],[-0.513801032035915,-0.813772308915977,-0.27163050034999464],[-0.5455352361549127,-0.7564227626062141,-0.36085441707783866],[-0.5816851074392965,-0.6754260132194071,-0.45325725195508076],[-0.5793592618195376,-0.6737834338248699,-0.4586488090544743],[-0.5825430240405771,-0.6694978988448284,-0.46088630765517374],[-0.5825430240405771,-0.6694978988448284,-0.46088630765517374],[-0.5793592618195376,-0.6737834338248699,-0.4586488090544743],[-0.5759017847804226,-0.6759434812805643,-0.4598233839215176],[-0.5712899611645758,-0.6779826847570127,-0.4625659514515209],[-0.5646465199195444,-0.6794912985963325,-0.46847185899968125],[-0.56279636132577,-0.679439953658352,-0.47076703904501427],[-0.5625303538029769,-0.6773033748934453,-0.4741515996052812],[-0.5633443548451403,-0.6736513834140597,-0.4783690536483691],[-0.5684437770150806,-0.6635926517101959,-0.4863295847149956],[-0.5689283607097174,-0.6629206827016231,-0.48667924634872983],[-0.5671455731772351,-0.661581891961479,-0.4905663044422592],[-0.5654610711325567,-0.6613218438295847,-0.4928561614786409],[-0.5623837114404159,-0.6584638148497929,-0.5001499431570103],[-0.46838246944108136,-0.673660594845466,-0.5716635944965601],[-0.565825378949253,-0.6376508661155352,-0.5227265188213069],[-0.5675885483043995,-0.6373901844493769,-0.5211304947911739],[-0.5737667668272157,-0.6356046062590185,-0.5165253931676171],[-0.5770489387642054,-0.634219341551437,-0.5145681189824786],[-0.5851662480211475,-0.6048217497128556,-0.5401584149591052],[-0.5885753429099151,-0.6042520559373812,-0.5370833441970846],[-0.6011770156371545,-0.5987777025882685,-0.529198883929964],[-0.6020332293102371,-0.5974455664557405,-0.5297308617861216],[-0.6020332293102371,-0.5974455664557405,-0.5297308617861216],[-0.6011770156371545,-0.5987777025882685,-0.529198883929964],[-0.5885753429099151,-0.6042520559373812,-0.5370833441970846],[-0.5851662480211475,-0.6048217497128556,-0.5401584149591052],[-0.5770489387642054,-0.634219341551437,-0.5145681189824786],[-0.5737667668272157,-0.6356046062590185,-0.5165253931676171],[-0.5675885483043995,-0.6373901844493769,-0.5211304947911739],[-0.565825378949253,-0.6376508661155352,-0.5227265188213069],[-0.5683790859025798,-0.6309457104651165,-0.5280650766280776],[-0.5703581807962911,-0.6166834027139296,-0.5425800645212785],[-0.5703581807962911,-0.6166834027139296,-0.5425800645212785],[-0.5683790859025798,-0.6309457104651165,-0.5280650766280776],[-0.565825378949253,-0.6376508661155352,-0.5227265188213069],[-0.46838246944108136,-0.673660594845466,-0.5716635944965601],[-0.5623837114404159,-0.6584638148497929,-0.5001499431570103],[-0.5654610711325567,-0.6613218438295847,-0.4928561614786409],[-0.5671455731772351,-0.661581891961479,-0.4905663044422592],[-0.5689283607097174,-0.6629206827016231,-0.48667924634872983],[-0.5684437770150806,-0.6635926517101959,-0.4863295847149956],[-0.5633443548451403,-0.6736513834140597,-0.4783690536483691],[-0.5625303538029769,-0.6773033748934453,-0.4741515996052812],[-0.56279636132577,-0.679439953658352,-0.47076703904501427],[-0.5646465199195444,-0.6794912985963325,-0.46847185899968125],[-0.5712899611645758,-0.6779826847570127,-0.4625659514515209],[-0.5759017847804226,-0.6759434812805643,-0.4598233839215176],[-0.5793592618195376,-0.6737834338248699,-0.4586488090544743],[-0.5816851074392965,-0.6754260132194071,-0.45325725195508076],[-0.5455352361549127,-0.7564227626062141,-0.36085441707783866],[-0.513801032035915,-0.813772308915977,-0.27163050034999464],[-0.5380115478205428,-0.8016370045537455,-0.26061789528319423],[-0.5746626180962598,-0.7820388327442727,-0.24120144991837786],[-0.5796534032123826,-0.7791354288204835,-0.23864181465330958],[-0.5099501196376183,-0.8577960159765566,-0.06431850788323547],[-0.5072518800889961,-0.8592968605100313,-0.06560819814461137],[-0.5072518800889961,-0.8592968605100313,-0.06560819814461137],[-0.5099501196376183,-0.8577960159765566,-0.06431850788323547],[-0.5132698260071934,-0.856033439126039,-0.061325661909120005],[-0.5144886365579117,-0.8554298533309299,-0.05950805729483107],[-0.5142834698762564,-0.8557209132520869,-0.057045869570480474],[-0.51154461531459,-0.8578758573350481,-0.04869414692038808],[-0.5111027752686513,-0.8581767744257724,-0.048026835715665205],[-0.5079424604665207,-0.860198479245615,-0.0453104089448385],[-0.5038645295195715,-0.8625622901638741,-0.04590023397841913],[-0.5012222194131266,-0.8640329972604267,-0.04715152608074465],[-0.49974802847322985,-0.8648150761959112,-0.04844369950138116],[-0.4960304162782458,-0.8666140284014462,-0.054165966294782486],[-0.4960304162782458,-0.8666140284014462,-0.054165966294782486],[-0.49974802847322985,-0.8648150761959112,-0.04844369950138116],[-0.5012222194131266,-0.8640329972604267,-0.04715152608074465],[-0.5038645295195715,-0.8625622901638741,-0.04590023397841913],[-0.5079424604665207,-0.860198479245615,-0.0453104089448385],[-0.5087408342676902,-0.859890557293584,-0.04208316796469054],[-0.49489982083187534,-0.8689174270074839,-0.007528106220811975],[-0.491946342727991,-0.8706240214882619,-0.00161526597209209],[-0.3222158548018009,-0.8634061239298015,0.3882097475268505],[-0.3060312156110723,-0.8841464648536715,0.3530296358074839],[-0.3024783056773,-0.8881775861693022,0.34590092515207543],[-0.2751470945732987,-0.9144590683815519,0.29674684261608675],[-0.17922253463811483,-0.9702770138178807,0.16260934639357635],[-0.17498161090826844,-0.9755268800807848,0.13314932250596492],[-0.16621331905214262,-0.9831727986903612,0.07579169139841974],[-0.16528329332563232,-0.9837684909345159,0.06986407654766899],[-0.15703645162964058,-0.9875052556952075,0.01315001269636213],[-0.13615513665742154,-0.9836552736316668,-0.11783073206260551],[-0.12877350272616783,-0.9793356602333282,-0.1559456623025629],[0.2074992464768722,-0.9014943523298378,-0.3798052072167215],[0.23768541530553805,-0.8884133569548608,-0.39271790197956224],[0.16428926684549747,-0.8054888501297741,-0.5693827790827392],[-0.08173922507504755,-0.8045835218517586,-0.5881870922153524],[-0.16823258554146475,-0.7977420563236257,-0.5790556179976041],[-0.31605926110368004,-0.7813398883686287,-0.5381584546531764],[-0.3231146881910002,-0.7766425327632233,-0.5407617539900158],[-0.3239824930330935,-0.7756558857504728,-0.5416579096705882],[-0.32963452818225936,-0.7716664297715139,-0.5439411723649394],[-0.3306680207625739,-0.7717907000381588,-0.5431369766270486],[-0.34042274874691014,-0.770981606194958,-0.5382376009204866],[-0.3499315686664812,-0.76833011301426,-0.5359260533750067],[-0.35098210941900876,-0.7678696460242456,-0.5358990255471481],[-0.35304990840649353,-0.769141596857909,-0.5327072049043757],[-0.35304990840649353,-0.769141596857909,-0.5327072049043757],[-0.35098210941900876,-0.7678696460242456,-0.5358990255471481],[-0.35164323954614707,-0.7670537014078247,-0.5366336285009048],[-0.35164323954614707,-0.7670537014078247,-0.5366336285009048],[-0.35098210941900876,-0.7678696460242456,-0.5358990255471481],[-0.3499315686664812,-0.76833011301426,-0.5359260533750067],[-0.34042274874691014,-0.770981606194958,-0.5382376009204866],[-0.3306680207625739,-0.7717907000381588,-0.5431369766270486],[-0.32963452818225936,-0.7716664297715139,-0.5439411723649394],[-0.32826412355739293,-0.7686098968522763,-0.5490733026161716],[-0.32849103322233975,-0.7643707345246927,-0.5548252168878967],[-0.3298435607082742,-0.7613282331969026,-0.5581957961115167],[-0.3332399134065537,-0.757055730155671,-0.5619766734938886],[-0.33433972263915734,-0.7565863071162408,-0.5619556119034501],[-0.34258755915525546,-0.75436747203586,-0.5599673931991669],[-0.34258755915525546,-0.75436747203586,-0.5599673931991669],[-0.33433972263915734,-0.7565863071162408,-0.5619556119034501],[-0.3332399134065537,-0.757055730155671,-0.5619766734938886],[-0.3298435607082742,-0.7613282331969026,-0.5581957961115167],[-0.32849103322233975,-0.7643707345246927,-0.5548252168878967],[-0.32826412355739293,-0.7686098968522763,-0.5490733026161716],[-0.32963452818225936,-0.7716664297715139,-0.5439411723649394],[-0.3239824930330935,-0.7756558857504728,-0.5416579096705882],[-0.3231146881910002,-0.7766425327632233,-0.5407617539900158],[-0.31605926110368004,-0.7813398883686287,-0.5381584546531764],[-0.16823258554146475,-0.7977420563236257,-0.5790556179976041],[-0.08173922507504755,-0.8045835218517586,-0.5881870922153524],[0.16428926684549747,-0.8054888501297741,-0.5693827790827392],[0.1334990750365351,-0.7616101477312001,-0.6341356162819191],[0.06500824819693204,-0.6467474169865605,-0.7599287507967956],[-0.3119073892003955,-0.6020384649695137,-0.7350261677378193],[-0.32041014249476063,-0.6002513350577325,-0.7328271797278653],[-0.33558291248146627,-0.5040549805048851,-0.7958094529965553],[-0.36542051290208194,-0.38562159532979345,-0.8472094392567191],[-0.368196399685978,-0.38501971055787343,-0.8462808243959062],[-0.37658852546479493,-0.3807626566080592,-0.8445122153178276],[-0.37813894191880776,-0.3816653875673754,-0.8434112120060828],[-0.3811545631436297,-0.3888497705437141,-0.8387592353845587],[-0.3884496940949989,-0.394576464309903,-0.8327161875274179],[-0.4070600806872949,-0.3891324884761208,-0.8263643246917395],[-0.3823696177421722,-0.38136960954261045,-0.8416357266329787],[-0.4147724032095778,-0.36714396577014347,-0.8325678122137098],[-0.4486256018989928,-0.35894594326519647,-0.8184698400883352],[-0.47953883308662726,-0.35364979202492386,-0.8031029399539288],
[-0.5175333890752031,-0.34873404691191906,-0.781372993977121],[-0.5193188923263615,-0.3204012910731883,-0.7922442178719609],[-0.5927996759763324,-0.30712582200802563,-0.7444879271138317],[-0.5927996759763324,-0.30712582200802563,-0.7444879271138317],[-0.5193188923263615,-0.3204012910731883,-0.7922442178719609],[-0.5175333890752031,-0.34873404691191906,-0.781372993977121],[-0.47953883308662726,-0.35364979202492386,-0.8031029399539288],[-0.4486256018989928,-0.35894594326519647,-0.8184698400883352],[-0.4147724032095778,-0.36714396577014347,-0.8325678122137098],[-0.3823696177421722,-0.38136960954261045,-0.8416357266329787],[-0.4070600806872949,-0.3891324884761208,-0.8263643246917395],[-0.3884496940949989,-0.394576464309903,-0.8327161875274179],[-0.3811545631436297,-0.3888497705437141,-0.8387592353845587],[-0.37813894191880776,-0.3816653875673754,-0.8434112120060828],[-0.37658852546479493,-0.3807626566080592,-0.8445122153178276],[-0.37959386419594116,-0.3676977549221522,-0.8489445560753672],[-0.37897368299841355,-0.35841449180831286,-0.8531811060123208],[-0.37781170219307114,-0.35518199313341353,-0.8550462381881755],[-0.3828540481694714,-0.350395429159391,-0.8547782291474523],[-0.3854015351976543,-0.3490259671666922,-0.8541934973474373],[-0.39221791510540693,-0.34195733560235064,-0.853949815678948],[-0.4218328013947405,-0.14591147712964062,-0.8948558143686122],[-0.5160056183205459,-0.2532952861295885,-0.8182784977537666],[-0.5181139385285731,-0.2675968707542565,-0.8123729817423396],[-0.5628942543511842,-0.26586272259548427,-0.782602754373214],[-0.5628942543511842,-0.26586272259548427,-0.782602754373214],[-0.5181139385285731,-0.2675968707542565,-0.8123729817423396],[-0.5160056183205459,-0.2532952861295885,-0.8182784977537666],[-0.578528525061437,-0.21237279197860387,-0.7875293917800472],[-0.5929086733682646,-0.12256573155081153,-0.7958875212579345],[-0.5992690988585015,-0.11570250126770393,-0.7921423346556581],[-0.6003952235907725,-0.11322850346899996,-0.7916469424507095],[-0.6046601497448889,-0.10816569418784173,-0.7891047369718108],[-0.6059165413098865,-0.10878350175658494,-0.7880553880994912],[-0.6163706410232288,-0.11021358362410312,-0.7797051999758288],[-0.6163706410232288,-0.11021358362410312,-0.7797051999758288],[-0.6059165413098865,-0.10878350175658494,-0.7880553880994912],[-0.6046601497448889,-0.10816569418784173,-0.7891047369718108],[-0.6022453775772332,-0.10054297195961531,-0.7919543016970007],[-0.6019589595645788,-0.09679887996714698,-0.7926382452525461],[-0.6039738278641441,-0.08275087529595287,-0.7926966051982858],[-0.6044771675661261,-0.08131501575064515,-0.7924614956606446],[-0.6042556622443234,-0.0810210842514194,-0.7926605064921542],[-0.600090299567981,-0.07780159058990323,-0.7961397772163453],[-0.600090299567981,-0.07780159058990323,-0.7961397772163453],[-0.6042556622443234,-0.0810210842514194,-0.7926605064921542],[-0.6044771675661261,-0.08131501575064515,-0.7924614956606446],[-0.6039738278641441,-0.08275087529595287,-0.7926966051982858],[-0.6019589595645788,-0.09679887996714698,-0.7926382452525461],[-0.6022453775772332,-0.10054297195961531,-0.7919543016970007],[-0.6046601497448889,-0.10816569418784173,-0.7891047369718108],[-0.6003952235907725,-0.11322850346899996,-0.7916469424507095],[-0.5992690988585015,-0.11570250126770393,-0.7921423346556581],[-0.5929086733682646,-0.12256573155081153,-0.7958875212579345],[-0.578528525061437,-0.21237279197860387,-0.7875293917800472],[-0.5160056183205459,-0.2532952861295885,-0.8182784977537666],[-0.4218328013947405,-0.14591147712964062,-0.8948558143686122],[-0.39221791510540693,-0.34195733560235064,-0.853949815678948],[-0.3854015351976543,-0.3490259671666922,-0.8541934973474373],[-0.3828540481694714,-0.350395429159391,-0.8547782291474523],[-0.37781170219307114,-0.35518199313341353,-0.8550462381881755],[-0.37897368299841355,-0.35841449180831286,-0.8531811060123208],[-0.37959386419594116,-0.3676977549221522,-0.8489445560753672],[-0.37658852546479493,-0.3807626566080592,-0.8445122153178276],[-0.368196399685978,-0.38501971055787343,-0.8462808243959062],[-0.36542051290208194,-0.38562159532979345,-0.8472094392567191],[-0.3561212539174613,-0.3850404844149437,-0.8514232072652005],[-0.34938438871320227,-0.38250421497451,-0.8553485105208496],[-0.34891434272593314,-0.38117210748813524,-0.8561346891191733],[-0.34891434272593314,-0.38117210748813524,-0.8561346891191733],[-0.34938438871320227,-0.38250421497451,-0.8553485105208496],[-0.3561212539174613,-0.3850404844149437,-0.8514232072652005],[-0.36542051290208194,-0.38562159532979345,-0.8472094392567191],[-0.33558291248146627,-0.5040549805048851,-0.7958094529965553],[-0.33885384726561024,-0.46883461267736454,-0.8157034854338678],[-0.339253106328029,-0.44765884865270994,-0.8273505212844876],[-0.339253106328029,-0.44765884865270994,-0.8273505212844876],[-0.33885384726561024,-0.46883461267736454,-0.8157034854338678],[-0.33558291248146627,-0.5040549805048851,-0.7958094529965553],[-0.32041014249476063,-0.6002513350577325,-0.7328271797278653],[-0.3119073892003955,-0.6020384649695137,-0.7350261677378193],[0.06500824819693204,-0.6467474169865605,-0.7599287507967956],[0.07816916010316362,-0.5524267501452355,-0.8298881057906179],[0.0901022443345871,-0.4482969245381035,-0.8893320263071315],[0.09092059850146983,-0.43038571731465874,-0.8980543297037665],[0.09419475454836483,-0.3824328913195057,-0.9191694249987739],[0.09604715743164895,-0.364343905074847,-0.9262982577896339],[0.09674005173298812,-0.356574601180625,-0.929244809608091],[0.10131042436980767,-0.31045927234497156,-0.9451725970049282],[0.1162728243450355,-0.1662004507247292,-0.9792129699394946],[0.09106674283242966,-0.07504690436949071,-0.9930129961357246],[0.07605830943967999,-0.028347154759926933,-0.996700342320697],[0.06417715941113983,0.006215526521638005,-0.9979191647823866],[0.00712828888478444,0.16570838624556572,-0.9861490344899525],[0.01860059397589395,0.19150211015616253,-0.9813159326687206],[0.022703225323197043,0.2074720340978795,-0.9779774632511797],[0.07412631204976722,0.42863651593100494,-0.9004310229398084],[0.0874394947461984,0.48096964735361786,-0.8723660545224499],[0.08300316630676362,0.4845998283508951,-0.8707889989804275],[0.04982707476220109,0.5105769869579537,-0.8583870939206737],[-0.0008124528977386984,0.5517949000030146,-0.8339794531347594],[-0.0010599674492995225,0.5519844677107412,-0.8338537185112844],[-0.022351507393624393,0.5676364098131776,-0.8229758905166293],[-0.10202261227248643,0.6251060177353519,-0.7738435585931746],[-0.16820065888716754,0.6687455567562158,-0.724215381408557],[-0.28320249394408203,0.6836928121115907,-0.6725774944872877],[-0.3370862689806989,0.6877237447545917,-0.6429688158576534],[-0.35020169961537573,0.6880829383548793,-0.6355317769643133],[-0.36033820836060687,0.688001227813304,-0.6299291119823358],[-0.4315846336837454,0.6837127099072776,-0.5884484975588894],[-0.4755650078906705,0.48828622465552696,-0.7317202239118439],[-0.48134983778686025,0.4821448303944445,-0.7320100383099098],[-0.4535894250969944,0.4805687477873734,-0.7505400136503408],[-0.487873525453852,0.4691581710430663,-0.7361182199244594],[-0.4879313037202528,0.4648451066955575,-0.7388112544019957],[-0.4909679233412219,0.45397515923737414,-0.7435435784440674],[-0.4911773271443033,0.4535649316945253,-0.7436556232802377],[-0.4951864664210083,0.4512977819547527,-0.7423750234727703],[-0.4951864664210083,0.4512977819547527,-0.7423750234727703],[-0.4911773271443033,0.4535649316945253,-0.7436556232802377],[-0.4909679233412219,0.45397515923737414,-0.7435435784440674],[-0.4879313037202528,0.4648451066955575,-0.7388112544019957],[-0.487873525453852,0.4691581710430663,-0.7361182199244594],[-0.4535894250969944,0.4805687477873734,-0.7505400136503408],[-0.48134983778686025,0.4821448303944445,-0.7320100383099098],[-0.4755650078906705,0.48828622465552696,-0.7317202239118439],[-0.4315846336837454,0.6837127099072776,-0.5884484975588894],[-0.4417530005294765,0.6829977699626388,-0.5816943636904751],[-0.46314182475411847,0.6819120280107862,-0.5661233401103],[-0.484573867206251,0.6814931146298089,-0.548411617248341],[-0.6140317172235972,0.6721941997648663,-0.4136665420914671],[-0.6617779533708785,0.6172375641010392,-0.4255205399212438],[-0.6636826285580208,0.6155864421922554,-0.4249455267906665],[-0.729855674752451,0.3683026329055687,-0.5759026520397962],[-0.7302534549889816,0.3622896893713001,-0.5792029630897121],[-0.7272928525206954,0.3331390173406507,-0.6000529158312754],[-0.726687069222615,0.33316255390128197,-0.6007733483624436],[-0.7233820249893534,0.3318217563232259,-0.6054855637856876],[-0.7204031035602443,0.33562097179004996,-0.6069414565470632],[-0.7204031035602443,0.33562097179004996,-0.6069414565470632],[-0.7233820249893534,0.3318217563232259,-0.6054855637856876],[-0.726687069222615,0.33316255390128197,-0.6007733483624436],[-0.7272928525206954,0.3331390173406507,-0.6000529158312754],[-0.7368615125896782,0.3290516931770698,-0.5905591371584689],[-0.7399005857465738,0.32665191032035795,-0.588086433014687],[-0.7429375781865823,0.3147476545701925,-0.5907433189303276],[-0.7431311795713567,0.31154782846136453,-0.5921942253432504],[-0.7422306477242754,0.3060886783140472,-0.5961571827855155],[-0.7413320588783532,0.3056771468776026,-0.5974849457149114],[-0.7413320588783532,0.3056771468776026,-0.5974849457149114],[-0.7422306477242754,0.3060886783140472,-0.5961571827855155],[-0.7431311795713567,0.31154782846136453,-0.5921942253432504],[-0.7429375781865823,0.3147476545701925,-0.5907433189303276],[-0.7399005857465738,0.32665191032035795,-0.588086433014687],[-0.7368615125896782,0.3290516931770698,-0.5905591371584689],[-0.7272928525206954,0.3331390173406507,-0.6000529158312754],[-0.7302534549889816,0.3622896893713001,-0.5792029630897121],[-0.729855674752451,0.3683026329055687,-0.5759026520397962],[-0.6636826285580208,0.6155864421922554,-0.4249455267906665],[-0.7005511654555742,0.5835511685603076,-0.410726305769105],[-0.8300761426775279,0.45087243702152824,-0.32815795418039845],[-0.8709513190961264,0.39802047105623317,-0.2881379953857035],[-0.8880317103231901,0.37257680284304795,-0.26941827600168966],[-0.8943782944100924,0.362481655023806,-0.26209638734499285],[-0.9181670016981927,0.3264333640689238,-0.2245230852611742],[-0.8799831672899215,0.46439147820697785,0.09985078995749627],[-0.8794507434315012,0.46494349538320356,0.10195065462579912],[-0.8750594354470613,0.46906307373127604,0.11937678709379722],[-0.9681375967175349,0.24520629533610702,0.05082781275579173],[-0.9681375967175349,0.24520629533610702,0.05082781275579173],[-0.8750594354470613,0.46906307373127604,0.11937678709379722],[-0.8686249934066321,0.4745234330574765,0.1425416862138056],[-0.8617412984539398,0.47916355190471793,0.16674598965184312],[-0.8575221943306897,0.48183236848572036,0.18025885528794444],[-0.8359441012865574,0.49241711635660823,0.24232796587115693],[-0.8211059287876238,0.4969723339493581,0.2807197053980027],[-0.9740885838736155,0.21427707680259758,0.0723654967787008],[-0.9748838471416175,0.2122329087813276,0.06751797547747106],[-0.9753106618018927,0.2107469420208325,0.06599120702352686],[-0.9757629617384526,0.2094362534771994,0.06342789787496933],[-0.9756944709580823,0.21000817289413617,0.06258487564495589],[-0.9756944709580823,0.21000817289413617,0.06258487564495589],[-0.9757629617384526,0.2094362534771994,0.06342789787496933],[-0.9765338128752769,0.20555134528087207,0.06426785171839434],[-0.9776534132642145,0.20026340001434828,0.06394039527187961],[-0.9780638518409683,0.1984583133948609,0.06328822612836872],[-0.9789289203576648,0.19495548681359823,0.060749708218639],[-0.9792622428372428,0.1953656432637532,0.053644432940548555],[-0.9791756277738274,0.19692934117585664,0.049334820946002],[-0.9789874012102237,0.19835601532860037,0.04731341727895616],[-0.9775210867953124,0.20537299255812705,0.04769128639731866],[-0.9775210867953124,0.20537299255812705,0.04769128639731866],[-0.9789874012102237,0.19835601532860037,0.04731341727895616],[-0.9791756277738274,0.19692934117585664,0.049334820946002],[-0.9792622428372428,0.1953656432637532,0.053644432940548555],[-0.9789289203576648,0.19495548681359823,0.060749708218639],[-0.9780638518409683,0.1984583133948609,0.06328822612836872],[-0.9776534132642145,0.20026340001434828,0.06394039527187961],[-0.9765338128752769,0.20555134528087207,0.06426785171839434],[-0.9757629617384526,0.2094362534771994,0.06342789787496933],[-0.9753106618018927,0.2107469420208325,0.06599120702352686],[-0.9748838471416175,0.2122329087813276,0.06751797547747106],[-0.9740885838736155,0.21427707680259758,0.0723654967787008],[-0.8211059287876238,0.4969723339493581,0.2807197053980027],[-0.7857217694573183,0.5024260545419961,0.36084534182697153],[-0.7445757502948327,0.47465681954558014,0.46936963656777114],[-0.7318060557051786,0.4656348446966803,0.49763851161011174],[-0.7248692103891611,0.4606442998571012,0.5122220776567086],[-0.6984196725965225,0.4348145075131345,0.5684595895807166],[-0.7296933952223116,0.32631784673176234,0.6008861887855981],[-0.8512733963320451,0.11668501936725248,0.5115840214007557],[-0.8578945971180074,0.09089777634443881,0.5057217164522089],[-0.8620390740716922,0.07073682664916177,0.5018813964765242],[-0.8703315180270671,0.007184373880910314,0.49241388434998484],[-0.8712836397993499,-0.007518467949534084,0.49072221435114244],[-0.8722138900263097,-0.03173869454590986,0.48809382839131876],[-0.9534235920943106,-0.11920975755837808,0.2770784866077739],[-0.9603747183868712,-0.13406012853873403,0.2443527823036114],[-0.9675350455140472,-0.1534457616005774,0.2008241368684284],[-0.9749738406272744,-0.19645656545116674,0.10407126396673265],[-0.9801897115498083,0.18644986530275598,0.06681749097719739],[-0.9801897115498083,0.18644986530275598,0.06681749097719739],[-0.9749738406272744,-0.19645656545116674,0.10407126396673265],[-0.9745388682498765,-0.21405826254908172,0.06673121087406186],[-0.9745090568664257,-0.21443458501626209,0.0659538234995727],[-0.9634537555231281,-0.26606155615204,-0.0311144549419648],[-0.9526305550118667,-0.2935438453718067,-0.07954267095160869],[-0.9157226897688991,-0.39523106308431055,-0.07241796887277586],[-0.9131377408108693,-0.40135617476428814,-0.07136306667597765],[-0.897447492205476,-0.43666032006353256,-0.06257606264471534],[-0.8770225186544572,-0.4778980394488278,-0.0494465940582234],[-0.8399700498230621,-0.5422151015082274,-0.021286124510235833],[-0.8383060779071861,-0.5448348980139732,-0.01994626907404469],[-0.807219066324446,-0.5887926140747946,0.04148055656883095],[-0.7929700787840996,-0.6055569354934257,0.06707646404626479],[-0.747186194333201,-0.6490016866104886,0.14321173755879538],[-0.7274557163013318,-0.6634145124603633,0.17518380483793317],[-0.7099181107726867,-0.6741008087300023,0.20397150699667901],[-0.487856102026803,-0.6883015742251071,0.5368774223549106],[-0.47492159121285554,-0.691758643339752,0.5439847990197842],[-0.3803578954595106,-0.7049710731075672,0.5986181232164437],[-0.3526249957698028,-0.8084202072669086,0.47128800201243765],[-0.34919637505599305,-0.8159605035990009,0.46072806319370135],[-0.34082173001000454,-0.8326040142035892,0.436590315839755],[-0.33623362530977174,-0.840840011936767,0.42418748630437664],[-0.3222158548018009,-0.8634061239298015,0.3882097475268505],[-0.491946342727991,-0.8706240214882619,-0.00161526597209209],[-0.49489982083187534,-0.8689174270074839,-0.007528106220811975],[-0.5087408342676902,-0.859890557293584,-0.04208316796469054],[-0.5079424604665207,-0.860198479245615,-0.0453104089448385],],
[[0.09752217154968315,0.024951748463557955,0.9949205175816034],[0.0967138400913087,0.024863599725541176,0.9950016253974064],[0.09591949593167026,0.024776718573341235,0.9950806824157284],[0.05386224351837132,0.017519678145592202,0.99839467126024],[0.0782573103484136,0.004762401804512078,0.9969218188534568],[0.08019440516778321,0.00291653827809962,0.9967749751996475],[0.08047064354508703,0.0026370810230198693,0.996753490754418],[0.09181482437522462,-0.01442516427542553,0.9956716088452928],[0.09728046286415103,-0.01665711827566633,0.9951176070976169],[0.1008343030356119,-0.018206922581216,0.9947366240877251],[0.10113705517531975,-0.01834358667855551,0.9947033773433318],[0.12141366647679637,-0.028901506072550768,0.9921811450231252],[0.14987955140774184,-0.03131771588014562,0.9882081363467236],[0.15369920639335985,0.011106637437788704,0.9880552598710646],[0.15340979731894366,0.012568484798956569,0.9880827228913676],[0.15260568434088234,0.01605965845212985,0.9881566639340403],[0.14903537224961413,0.02677915916632544,0.9884691874068526],[0.10071481104184846,0.0252836084920977,0.9945940206830238],[0.09752217154968315,0.024951748463557955,0.9949205175816034],],
[[-0.21110058032474519,0.9763014203467274,-0.04766635727133621],[-0.22011649864748262,0.9747187157148887,-0.038368636388213265],[-0.2242433898061202,0.9739685009806294,-0.03317018579698224],[-0.22786329290030155,0.9732864604077011,-0.0281386875258951],[-0.22979509256053288,0.9728316463828091,-0.028156761731585697],[-0.26015636244237933,0.9651987485640146,-0.026646629265438822],[-0.26338294811722945,0.964325611552003,-0.026561956741407426],[-0.2784595705165317,0.9600608900809027,-0.027264536027844264],[-0.2854293561848893,0.9579891303212886,-0.02805189501870859],[-0.29802354957755367,0.9540926414608383,-0.029819379729896487],[-0.3863930711862419,0.9214445640535278,-0.04050073969038054],[-0.43588567951118384,0.8991252687442652,-0.03971681637073198],[-0.43921861149240293,0.8975111315780618,-0.03950670844493087],[-0.4420885080233666,0.8957847986032285,-0.04612315757889084],[-0.4523028201267492,0.8892010201265796,-0.06887455779342291],[-0.4814463988639344,0.8668822349834685,-0.12932345375459037],[-0.4963361803034598,0.8556553215430613,-0.146643673020052],[-0.5232071906801654,0.8340850033225535,-0.17480401269131368],[-0.5295137729577646,0.8287790071392728,-0.18094342091735288],[-0.5368888187651851,0.8225079551388115,-0.187699387367927],[-0.5379421376941264,0.8199819870329251,-0.19557044110654695],[-0.5566714835926947,0.7921702822090428,-0.2501661514664877],[-0.5734353095054957,0.7630537339996881,-0.2981961516208243],[-0.5827210258733672,0.7468446959404562,-0.3204047536331168],[-0.5945634054627605,0.722048850534651,-0.35375106265015577],[-0.5980559171788803,0.7144020897947396,-0.3632613026792655],[-0.6140317172235972,0.6721941997648663,-0.4136665420914671],[-0.484573867206251,0.6814931146298089,-0.548411617248341],[-0.46314182475411847,0.6819120280107862,-0.5661233401103],[-0.4417530005294765,0.6829977699626388,-0.5816943636904751],[-0.4315846336837454,0.6837127099072776,-0.5884484975588894],[-0.36033820836060687,0.688001227813304,-0.6299291119823358],[-0.35020169961537573,0.6880829383548793,-0.6355317769643133],[-0.3370862689806989,0.6877237447545917,-0.6429688158576534],[-0.28320249394408203,0.6836928121115907,-0.6725774944872877],[-0.16820065888716754,0.6687455567562158,-0.724215381408557],[-0.1542432813710499,0.8520346534359838,-0.5002458990297813],[-0.15285969902925445,0.8580711614592085,-0.4902527861060361],[-0.15179258316357214,0.8640881110037779,-0.47990702028460985],[-0.15179060650207712,0.8652163587945365,-0.47787055177323445],[-0.14971046386530415,0.876395355723315,-0.45773131581293386],[-0.14917014113173474,0.8785289302447692,-0.4538008238398426],[-0.14883068655342885,0.883337873180427,-0.4444813028071202],[-0.14584117497502053,0.9037844758817795,-0.40237292756471904],[-0.09600830173589071,0.9355255275345711,-0.33996234104522943],[-0.07126972099025539,0.9486464407534038,-0.30820538171140044],[-0.05220149465785139,0.9563011472692468,-0.28768580028741203],[-0.2259236385656657,0.9366477465963337,-0.26767425788308596],[-0.2213812011917385,0.9519270479268187,-0.2117197656909607],[-0.22740503105834206,0.9452115189254937,-0.23422667725926388],[-0.23331111511309335,0.9335497698945697,-0.2721226758182436],[-0.2378414680335705,0.9315666807483254,-0.274981736490233],[-0.23738665873973225,0.9311172785736321,-0.2768902089168537],[-0.23761124292307498,0.9288767532487672,-0.28412827122724077],[-0.23953273447274764,0.9266932578654895,-0.28959225635823493],[-0.24179455055033877,0.925136586764046,-0.2926733523140271],[-0.2427234825672686,0.9248505594301711,-0.2928083908157626],[-0.24955808070192803,0.9232765237797878,-0.29202949336236766],[-0.24955808070192803,0.9232765237797878,-0.29202949336236766],[-0.2427234825672686,0.9248505594301711,-0.2928083908157626],[-0.24179455055033877,0.925136586764046,-0.2926733523140271],[-0.23953273447274764,0.9266932578654895,-0.28959225635823493],[-0.23761124292307498,0.9288767532487672,-0.28412827122724077],[-0.23738665873973225,0.9311172785736321,-0.2768902089168537],[-0.2378414680335705,0.9315666807483254,-0.274981736490233],[-0.23331111511309335,0.9335497698945697,-0.2721226758182436],[-0.22740503105834206,0.9452115189254937,-0.23422667725926388],[-0.2213812011917385,0.9519270479268187,-0.2117197656909607],[-0.2259236385656657,0.9366477465963337,-0.26767425788308596],[-0.05220149465785139,0.9563011472692468,-0.28768580028741203],[-0.025875220295932103,0.9654944973799694,-0.259134807587937],[-0.012452830708636703,0.9699660108168893,-0.24292151997571634],[0.010608116295172625,0.9769838563236771,-0.21304931905919094],[0.012723911915603976,0.977603019464904,-0.21007245987674514],[-0.0217181320947516,0.9792634517111636,-0.2014234715246778],[-0.050001933689383736,0.9818766902564148,-0.1828058307561087],[-0.0958565468332559,0.9842091624650126,-0.1488080876468826],[-0.10720301166914507,0.9844157216921532,-0.13940301709210703],[-0.13033559401273498,0.9846604812906308,-0.11600159273842303],[-0.1339295484480571,0.9846768896883821,-0.11168840121567408],[-0.15714022831470992,0.9837418938609388,-0.08694156030400214],[-0.17027942666930315,0.9823595960667174,-0.07729515423886278],[-0.1964758083317901,0.9786992590810321,-0.05954004547032705],[-0.21110058032474519,0.9763014203467274,-0.04766635727133621],],
];


const g_edges = [{from: "Yeah Yeah\nYeahs", to: "The White\nStripes"},{from: "Yeah Yeah\nYeahs", to: "Placebo"},{from: "Yeah Yeah\nYeahs", to: "Interpol"},{from: "Yeah Yeah\nYeahs", to: "The Strokes"},{from: "Yeah Yeah\nYeahs", to: "Franz Ferdinand"},{from: "Yeah Yeah\nYeahs", to: "Bloc Party"},{from: "Kaiser Chiefs", to: "Arctic Monkeys"},{from: "Kaiser Chiefs", to: "Keane"},{from: "Kaiser Chiefs", to: "The Killers"},{from: "Kaiser Chiefs", to: "Muse"},{from: "Kaiser Chiefs", to: "Coldplay"},{from: "Kaiser Chiefs", to: "Franz Ferdinand"},{from: "Kaiser Chiefs", to: "Snow Patrol"},{from: "The Who", to: "The Doors"},{from: "The Who", to: "Pink Floyd"},{from: "The Who", to: "The Beatles"},{from: "The Who", to: "The Rolling\nStones"},{from: "The Who", to: "Jimi Hendrix"},{from: "The Who", to: "Led Zeppelin"},{from: "The White\nStripes", to: "Red Hot\nChili Peppers"},{from: "The White\nStripes", to: "Gorillaz"},{from: "The White\nStripes", to: "Placebo"},{from: "The White\nStripes", to: "Weezer"},{from: "The White\nStripes", to: "Muse"},{from: "The White\nStripes", to: "Radiohead"},{from: "The White\nStripes", to: "Beck"},{from: "The White\nStripes", to: "The Strokes"},{from: "The White\nStripes", to: "Franz Ferdinand"},{from: "Keane", to: "Oasis"},{from: "Keane", to: "The Killers"},{from: "Keane", to: "Muse"},{from: "Keane", to: "Coldplay"},{from: "Keane", to: "Franz Ferdinand"},{from: "Keane", to: "Snow Patrol"},{from: "Weezer", to: "R.E.M."},{from: "Weezer", to: "Red Hot\nChili Peppers"},{from: "Weezer", to: "Foo Fighters"},{from: "Weezer", to: "Muse"},{from: "Weezer", to: "The Strokes"},{from: "Weezer", to: "The Smashing\nPumpkins"},{from: "Arctic Monkeys", to: "Oasis"},{from: "Arctic Monkeys", to: "The Killers"},{from: "Arctic Monkeys", to: "Muse"},{from: "Arctic Monkeys", to: "Interpol"},{from: "Arctic Monkeys", to: "The Strokes"},{from: "Arctic Monkeys", to: "Franz Ferdinand"},{from: "Arctic Monkeys", to: "Bloc Party"},{from: "The Rolling\nStones", to: "The Doors"},{from: "The Rolling\nStones", to: "Bob Dylan"},{from: "The Rolling\nStones", to: "The Beatles"},{from: "The Rolling\nStones", to: "Jimi Hendrix"},{from: "The Rolling\nStones", to: "Led Zeppelin"},{from: "The Rolling\nStones", to: "Aerosmith"},{from: "Aerosmith", to: "Led Zeppelin"},{from: "Aerosmith", to: "AC/DC"},{from: "Aerosmith", to: "Guns N'\nRoses"},{from: "Snow Patrol", to: "Death Cab\nfor Cutie"},{from: "Snow Patrol", to: "The Killers"},{from: "Snow Patrol", to: "Coldplay"},{from: "Snow Patrol", to: "Bloc Party"},{from: "The Offspring", to: "Rage Against\nthe Machine"},{from: "The Offspring", to: "Green Day"},{from: "The Offspring", to: "blink-182"},{from: "The Offspring", to: "Red Hot\nChili Peppers"},{from: "Coldplay", to: "Oasis"},{from: "Coldplay", to: "Placebo"},{from: "Coldplay", to: "The Killers"},{from: "Coldplay", to: "Muse"},{from: "Coldplay", to: "Radiohead"},{from: "Coldplay", to: "U2"},{from: "Coldplay", to: "Franz Ferdinand"},{from: "R.E.M.", to: "Pearl Jam"},{from: "R.E.M.", to: "Radiohead"},{from: "R.E.M.", to: "U2"},{from: "R.E.M.", to: "The Cranberries"},{from: "R.E.M.", to: "The Smashing\nPumpkins"},{from: "Pearl Jam", to: "U2"},{from: "Pearl Jam", to: "Nirvana"},{from: "Pearl Jam", to: "The Smashing\nPumpkins"},{from: "Pearl Jam", to: "Foo Fighters"},{from: "The Beatles", to: "Led Zeppelin"},{from: "The Beatles", to: "Pink Floyd"},{from: "The Beatles", to: "The Doors"},{from: "Linkin Park", to: "System of\na Down"},{from: "System of\na Down", to: "Rage Against\nthe Machine"},{from: "System of\na Down", to: "Metallica"},{from: "System of\na Down", to: "Red Hot\nChili Peppers"},{from: "Jimi Hendrix", to: "Led Zeppelin"},{from: "Jimi Hendrix", to: "The Doors"},{from: "Jimi Hendrix", to: "Pink Floyd"},{from: "Foo Fighters", to: "Red Hot\nChili Peppers"},{from: "Foo Fighters", to: "Queens of the\nStone Age"},{from: "Foo Fighters", to: "Nirvana"},{from: "Foo Fighters", to: "Rage Against\nthe Machine"},{from: "Foo Fighters", to: "The Smashing\nPumpkins"},{from: "Foo Fighters", to: "Incubus"},{from: "Modest Mouse", to: "Beck"},{from: "Modest Mouse", to: "The Shins"},{from: "Modest Mouse", to: "Death Cab\nfor Cutie"},{from: "Moby", to: "Massive Attack"},{from: "Moby", to: "The Chemical\nBrothers"},{from: "Moby", to: "Air"},{from: "Metallica", to: "AC/DC"},{from: "Metallica", to: "Guns N'\nRoses"},{from: "The Strokes", to: "The Killers"},{from: "The Strokes", to: "Muse"},{from: "The Strokes", to: "Interpol"},{from: "The Strokes", to: "Franz Ferdinand"},{from: "Guns N'\nRoses", to: "AC/DC"},{from: "Daft Punk", to: "Gorillaz"},{from: "Daft Punk", to: "The Chemical\nBrothers"},{from: "The Shins", to: "Death Cab\nfor Cutie"},{from: "Massive Attack", to: "The Chemical\nBrothers"},{from: "Massive Attack", to: "Portishead"},{from: "Massive Attack", to: "Air"},{from: "Gorillaz", to: "The Chemical\nBrothers"},{from: "Gorillaz", to: "Red Hot\nChili Peppers"},{from: "Gorillaz", to: "Blur"},{from: "Gorillaz", to: "Radiohead"},{from: "Gorillaz", to: "Beck"},{from: "Led Zeppelin", to: "The Doors"},{from: "Led Zeppelin", to: "Pink Floyd"},{from: "Led Zeppelin", to: "AC/DC"},{from: "Rage Against\nthe Machine", to: "Red Hot\nChili Peppers"},{from: "Rage Against\nthe Machine", to: "Queens of the\nStone Age"},{from: "Rage Against\nthe Machine", to: "Muse"},{from: "Rage Against\nthe Machine", to: "Incubus"},{from: "Beck", to: "Radiohead"},{from: "Beck", to: "Blur"},{from: "Blur", to: "Franz Ferdinand"},{from: "Blur", to: "Oasis"},{from: "Blur", to: "Radiohead"},{from: "The Smashing\nPumpkins", to: "Placebo"},{from: "The Smashing\nPumpkins", to: "Nirvana"},{from: "The Smashing\nPumpkins", to: "Radiohead"},{from: "The Doors", to: "Pink Floyd"},{from: "Green Day", to: "blink-182"},{from: "Green Day", to: "Red Hot\nChili Peppers"},{from: "Red Hot\nChili Peppers", to: "Nirvana"},{from: "Red Hot\nChili Peppers", to: "Incubus"},{from: "Placebo", to: "The Killers"},{from: "Placebo", to: "Muse"},{from: "Placebo", to: "Radiohead"},{from: "Placebo", to: "Interpol"},{from: "Placebo", to: "Franz Ferdinand"},{from: "Placebo", to: "The Cure"},{from: "Air", to: "Portishead"},{from: "Portishead", to: "Bjork"},{from: "Bjork", to: "Radiohead"},{from: "The Killers", to: "Muse"},{from: "The Killers", to: "U2"},{from: "The Killers", to: "Interpol"},{from: "The Killers", to: "Franz Ferdinand"},{from: "The Killers", to: "Bloc Party"},{from: "Muse", to: "Radiohead"},{from: "Muse", to: "Franz Ferdinand"},{from: "Radiohead", to: "Interpol"},{from: "U2", to: "The Cranberries"},{from: "Interpol", to: "Franz Ferdinand"},{from: "Interpol", to: "Bloc Party"},{from: "Franz Ferdinand", to: "Bloc Party"},];

const g_labels = [{label: "Yeah Yeah\nYeahs", pos: [-0.5822501774049804,0.8085112670915255,0.08540645114933923]},{label: "Kaiser Chiefs", pos: [-0.31621333125934603,0.930047971720988,0.18713604524928823]},{label: "The Who", pos: [0.5947776570817,-0.04550711626008341,-0.8026011718195376]},{label: "The White\nStripes", pos: [-0.7686169640690501,0.6243086772238283,-0.13952289449516989]},{label: "Keane", pos: [-0.23088541885106917,0.9669310269125,0.10833426307454501]},{label: "Weezer", pos: [0.1012387253397925,0.7847777560091139,0.6114528552266921]},{label: "Arctic Monkeys", pos: [-0.4030351412026537,0.8701377299486593,0.2835895024071785]},{label: "The Rolling\nStones", pos: [0.7939988529669242,-0.17071436495447306,-0.5834573052806862]},{label: "Aerosmith", pos: [0.9729961939285183,-0.13571820562118442,-0.18670558444669746]},{label: "Snow Patrol", pos: [-0.2531011459388672,0.9658801817301484,0.05491160592595712]},{label: "The Offspring", pos: [-0.5852238809770844,-0.26172044248773885,0.7674733996160007]},{label: "Coldplay", pos: [-0.23309790961345817,0.941072554533442,0.2450465499404917]},{label: "R.E.M.", pos: [0.3941248913737838,0.25374802055635054,0.88333318292892]},{label: "Pearl Jam", pos: [0.1032535395806671,0.005694395240600135,0.9946387688135364]},{label: "The Beatles", pos: [0.6150790297477273,0.16588786089918678,-0.7708171020228382]},{label: "Linkin Park", pos: [0.18840054331382616,-0.9797616817598154,0.06761865300516631]},{label: "System of\na Down", pos: [0.04150593462586655,-0.924420931496856,0.37910842618084656]},{label: "Jimi Hendrix", pos: [0.863796844261174,0.05624047675344784,-0.5006915423881076]},{label: "Foo Fighters", pos: [-0.04878156684506256,0.06829936008120491,0.9964715531055758]},{label: "Modest Mouse", pos: [-0.29904608838748037,0.8456626533704977,-0.44207025879888906]},{label: "Moby", pos: [-0.36436782571901805,-0.36992770747923914,-0.8546283278829163]},{label: "Bob Dylan", pos: [0.5129850213594414,-0.4188461734555858,-0.7492758176015473]},{label: "Metallica", pos: [0.9212342893725778,-0.32330717259457276,0.21633274424623047]},{label: "The Strokes", pos: [-0.5031435455213781,0.8367062339706779,0.2162619953546676]},{label: "Guns N'\nRoses", pos: [0.9709147306180018,-0.12976516436061641,0.20121030785582383]},{label: "Daft Punk", pos: [-0.6153727119255823,-0.09406001585294535,-0.7826040754015392]},{label: "The Shins", pos: [-0.2483918314422643,0.9269496395823247,-0.28118652839521996]},{label: "Massive Attack", pos: [-0.5948349922056808,-0.5926527787164967,-0.5430782779004174]},{label: "Gorillaz", pos: [-0.7751699793786516,0.21798030377913985,-0.5929553863778074]},{label: "Death Cab\nfor Cutie", pos: [-0.23152383500285262,0.9657807403943417,-0.11689429117338951]},{label: "Led Zeppelin", pos: [0.8920890208285315,0.024652514721839547,-0.4511866935483377]},{label: "Rage Against\nthe Machine", pos: [-0.505659495939187,0.3580832473130531,0.7849107351541742]},{label: "Beck", pos: [-0.502012866335738,0.46197925375558685,-0.7311349062469986]},{label: "Blur", pos: [-0.7329251086385944,0.3187085014063286,-0.6010371671190033]},{label: "The Smashing\nPumpkins", pos: [-0.0725147423563755,0.5577666856587513,0.8268240057655802]},{label: "Oasis", pos: [0.0023290078577948292,0.8763594073499705,-0.4816521201776306]},{label: "The Doors", pos: [0.8451747304623404,0.09182148744293045,-0.5265439102597977]},{label: "The Chemical\nBrothers", pos: [-0.652829125548632,-0.27603523255260465,-0.7054209262738368]},{label: "Green Day", pos: [-0.5854624004205381,-0.4162871370377705,0.6956570974486769]},{label: "Pink Floyd", pos: [0.829291679037759,0.19078450424676668,-0.5252395491754692]},{label: "Red Hot\nChili Peppers", pos: [-0.8449752694918665,-0.42494393861611035,0.3247144021760887]},{label: "AC/DC", pos: [0.9871821364874682,-0.10080694607884616,-0.12373111582093768]},{label: "Placebo", pos: [-0.301958822106281,0.8509945396997005,0.42968495802562384]},{label: "Air", pos: [-0.34194163380972287,-0.7627702151585856,-0.5488693086104036]},{label: "Portishead", pos: [-0.5743429694585236,-0.6684428582712263,-0.47256142316079813]},{label: "Queens of the\nStone Age", pos: [-0.7059548536192739,0.00476832287195067,0.7082407837369847]},{label: "Nirvana", pos: [0.27564183420521793,-0.25474038164086443,0.9268920741906522]},{label: "Bjork", pos: [-0.5053415259329015,-0.8611023579754618,-0.05597027118842979]},{label: "The Killers", pos: [-0.3082107122862173,0.9258071052932973,0.21883180897773533]},{label: "blink-182", pos: [-0.5164304861380742,-0.4297259834856337,0.7406990833695536]},{label: "Muse", pos: [-0.37698938877983246,0.8492983037111316,0.3695556684192553]},{label: "Radiohead", pos: [-0.9775420919751894,0.2032474580352968,0.055694965831395354]},{label: "U2", pos: [0.6415715855911978,0.5359993086468842,0.5487172693583269]},{label: "Interpol", pos: [0.09017157844794366,0.992282300361617,0.08511711243495275]},{label: "The Cranberries", pos: [0.5065729657103322,-0.636932319314392,0.5811205133397273]},{label: "Franz Ferdinand", pos: [-0.38013359239522426,0.8868022773550518,0.26283107276460904]},{label: "Bloc Party", pos: [-0.14267613058669826,0.9896150399492811,-0.017481260451990388]},{label: "The Cure", pos: [0.3955408967082866,0.8859740351219934,0.24206901520198248]},{label: "Incubus", pos: [-0.10653052634247921,0.022482588450576553,0.9940552198815497]},];


const tempV = new THREE.Vector3();
const myV = new THREE.Vector3();

const cameraToPoint = new THREE.Vector3();
const cameraPosition = new THREE.Vector3();
const normalMatrix = new THREE.Matrix3();
const settings = {
  minArea: 20,
  maxVisibleDot: -0.2,
};


  const width = 1200
  const height = 700
  const globeRadius = 200
  const globeSegments = 64
  const globeWidth = 4098 / 2
  const globeHeight = 1968 / 2


const clusterColors = [];

//label and position in a dictionary table for efficient access when drawing edges. 
// key: label name
// value: position in V3 and color of the node, which is inverse color of the cluster.
// if node numbers is more than the numbers of clusters, randomize the color of node.
const labelTable = new Object();  



var labels = [];
var scene = new THREE.Scene();


const canvas = document.querySelector('#c');
const renderer = new THREE.WebGLRenderer({canvas});




var camera = new THREE.PerspectiveCamera(45, width / height, 1, 4000);
camera.position.set(0, 5, -500);



renderer.setSize(width, height);

renderer.setClearColor(0x999999);


var controls = new THREE.OrbitControls(camera, renderer.domElement);

scene.add(new THREE.AxesHelper(1));


let sphereRadius = globeRadius;
const loader = new THREE.TextureLoader();
const geometry = new THREE.SphereGeometry(sphereRadius-2, 128, 64);



const material = new THREE.MeshBasicMaterial({transparent: false, opacity: 0.5,  vertexColors: THREE.FaceColors, wireframe: false });

let sphere = new THREE.Mesh(geometry, material);
scene.add(sphere);


const labelContainerElem = document.querySelector('#labels');

///// Main actions: 
//  draw clusters, labels and nodes, and then edges.

// draw cluster.
//g_clusters.forEach(drawPoly);

// now we have color for clusters, so prepare label hash table and node color
prepareLabels();

//time for nodes and labels
g_labels.forEach(drawLabelAndNode);

// finally the edges.
g_edges.forEach(drawArcForItem);


function prepareLabels()
{
  for (var i=0; i< g_labels.length; i++)
  {
    var labelName = g_labels[i].label;

    var nodeColor ='black';
    /*
    if (i < clusterColors.length)
    {
      nodeColor = invertColor(clusterColors[i]);
    }
    else
    {
      nodeColor = getRandomColor();
    }
    */

    var posi = g_labels[i].pos;
    var tempV = new THREE.Vector3(posi[0], posi[1], posi[2]).normalize().multiplyScalar(sphereRadius);

    var posAndColor = {pos: tempV, color: nodeColor};

    labelTable[labelName] = posAndColor;

  }
}

function drawLabelAndNode (data, index, array)
{
  var v3Pos = labelTable[data.label].pos;
  drawLabelAt(v3Pos,  data.label);
  spot(v3Pos, labelTable[data.label].color);

}


function spot(point, color) {
  var s = new THREE.Mesh(new THREE.SphereGeometry(3, 32, 24), new THREE.MeshBasicMaterial({
    color: color
  }));
  s.position.copy(point);
  scene.add(s);
  return s;
}


function spot2(point, color) {
  var s = new THREE.Mesh(new THREE.SphereGeometry(5, 32, 24), new THREE.MeshBasicMaterial({
    color: color
  }));
  s.position.copy(point);
  //scene.add(s);
  return s;
}



function drawLabel (node, index, array)
{
  var tempV = new THREE.Vector3(node.pos[0], node.pos[1], node.pos[2]).normalize().multiplyScalar(sphereRadius);
  var meshPoint = spot(tempV, 0xff0000);
  
  const elem = document.createElement('div');
    elem.textContent = node.label;
    labelContainerElem.appendChild(elem);

    labels.push({elem, meshPoint});

   
}

function drawLabelAt (v3Pos, txt)
{
  
  var meshPoint = spot2(v3Pos, 0xff0000);
  
  const elem = document.createElement('div');
    elem.textContent = txt;
    labelContainerElem.appendChild(elem);

    labels.push({elem, meshPoint});

   
}

function drawArcForItem (edge, index, array)
{

  var fromKey = edge.from.trim();
  var toKey = edge.to.trim();
  if (fromKey in labelTable  && toKey in labelTable)
  {
    var v3Start = labelTable[fromKey].pos;
    var v3End = labelTable[toKey].pos;

    var lineStart = v3Start.clone().normalize().multiplyScalar(sphereRadius +2);
    var lineEnd = v3End.clone().normalize().multiplyScalar(sphereRadius +2);
    setShortArc(lineStart, lineEnd, 20, "black");
  }
  
}

function setArc3D(pointStart, pointEnd, smoothness, color, clockWise) {
  // calculate normal
  var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();

  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  if (clockWise) angle = angle - Math.PI * 2;
  var angleDelta = angle / (smoothness - 1);

  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    geometry.vertices.push(pointStart.clone().applyAxisAngle(normal, angleDelta * i))
  }

  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  return arc;
}


function GetSmoothness(pointStart, pointEnd)
{
  // we use 0.5 degree as the divider.
  var angleInterval = 1.0; 
  var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();

  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  if (Math.abs(angle) > Math.abs(angle - Math.PI*2))
  {
    angle = angle - Math.PI * 2;
  }

  if (Math.abs(angle)*(180.0/Math.PI) < angleInterval)
  {
    return 2;
  }

   var smoothness = (Math.abs(angle) * 180/Math.PI)/angleInterval;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2)
    {
      smoothness =2;
    }

    return smoothness;
}

function setShortArc(pointStart, pointEnd, smoothness, color) {
  // calculate normal
 
  var cb = new THREE.Vector3(), ab = new THREE.Vector3(), normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();
  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  console.log(angle + " ");
  //////////
  if (Math.abs(angle) < (Math.PI / 180)) {
    smoothness = 2;
  }
  else {
    smoothness = Math.abs(angle) * 180 / Math.PI;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2) {
      smoothness = 2;
    }
  }
  //////
  if (Math.abs(angle) > Math.abs(angle - Math.PI * 2))
  //if (Math.abs(angle) > Math.abs(Math.abs(angle) - Math.PI * 2))
  {
    angle = angle - Math.PI * 2;
  }
  var angleDelta = angle / (smoothness - 1);
  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
    
    geometry.vertices.push(v3);
  }
  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  scene.add(arc);
  }



function setArcGetGeoPoints(pointStart, pointEnd, smoothness, color) {
  // calculate normal
  var geoPoints = [];
  var cb = new THREE.Vector3(), ab = new THREE.Vector3(), normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();
  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  //////////
  if (Math.abs(angle) < (Math.PI / 180)) {
    smoothness = 2;
  }
  else {
    smoothness = Math.abs(angle) * 180 / Math.PI;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2) {
      smoothness = 2;
    }
  }
  //////
  if (Math.abs(angle) > Math.abs(angle - Math.PI * 2)) {
    angle = angle - Math.PI * 2;
  }
  var angleDelta = angle / (smoothness - 1);
  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
    var latLon = vector3toLonLat(v3.clone());
    geoPoints.push(latLon);
    geometry.vertices.push(v3);
  }
  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  return [arc, geoPoints];
  }


function getArcPoints (pointStart, pointEnd, smoothness)
{
  var points = [];
  if (smoothness < 3)
  {
    points.push(pointStart);
    points.push(pointEnd);

  }
  else
  {
    var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
    cb.subVectors(new THREE.Vector3(), pointEnd);
    ab.subVectors(pointStart, pointEnd);
    cb.cross(ab);
    normal.copy(cb).normalize();

    // get angle between vectors
    var angle = pointStart.angleTo(pointEnd);
    if (Math.abs(angle) > Math.abs(angle - Math.PI*2))
    {
      angle = angle - Math.PI * 2;
    }

    var  angleDelta = angle / (smoothness - 1);
  

  
    for (var i = 0; i < smoothness; i++)
     {
      var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
      points.push(v3);
     }
     

  }
  return points;

}

//////////////
function pointInTriangle (position,coord1,coord2,coord3){
  
  
  var d1,d2,d3;
  var m1 = new THREE.Matrix3();
 m1.set(position.x, position.y, position.z, coord2.x, coord2.y, coord2.z, coord3.x, coord3.y, coord3.z );
 d1 = m1.determinant();

 
  var m2 = new THREE.Matrix3();
  m2.set(coord1.x, coord1.y, coord1.z, position.x, position.y, position.z, coord3.x, coord3.y, coord3.z);
  d2 = m2.determinant();

  
  var m3 = new THREE.Matrix3();
  m3.set(coord1.x, coord1.y, coord1.z, coord2.x, coord2.y, coord2.z, position.x, position.y, position.z);
  d3 = m3.determinant();

  if((d1>=0 && d2 >=0 && d3>=0) || (d1<=0 && d2 <=0 && d3<=0)){
      return true;
  }
  return false;
}


function randColorPoly (poly, index, array)
{
   if (poly.length < 3)
   {
     return
   }

   var points = [];
   for (var i=0; i< poly.length; i++)
   {
    var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
    points.push(tempV);
   }
   drawPolygon(points, getRandomColor());
}

function drawPoly ( poly, index, array)
{
  var clr = getRandomColor();
  clusterColors.push(clr);

  drawPolyAzimuthal(poly,clr)
  polyCounter++;
}

function v3toGeoArray (points)  // not Vector3
{
  var geoArray = [];
  for (var i=0; i< points.length; i++)
  {
    var temp = new THREE.Vector3(points[i][0], points[i][1], points[i][2]).normalize();
    var geoPoint = vector3toLonLat(temp);
    geoArray.push(geoPoint);
  }
  return geoArray;

}

function removeStrayEdges (points)
{
  var flag = [];
  for (var i=0; i< points.length -1; i++)
  {
    flag.push(-1);
  }

  for (var i=1; i< points.length -1; i++)
  {
    for (var j=0; j < i; j++)
    {
      if (almostSame (points[j], points[i]))
      {
        if (flag[j] < i)
        {
          flag[j] = i;
        }
      }
    }
  }
  var newPoints = [];
  var i=0; 
  while (i< points.length )
  {
    
      newPoints.push(points[i]);
      if (flag[i] > 0)
      {
         i = flag[i];
      }
      else
      {
        i++;
      }
    
  }
  return newPoints;
}



function almostSame (p1, p2)
{
  return false;
  var angle = p1.angleTo(p2);
  if (Math.abs(angle*180/Math.PI) < 0.0001)
  {
    return true;
  }
  return false;
}

function v3toGeoAndThreeArray (points)  // not Vector3
{
  var geoArray = [];
  var ThreeArray =[];
  for (var i=0; i< points.length; i++)
  {
    var temp = new THREE.Vector3(points[i][0], points[i][1], points[i][2]).normalize();
    var threeV = temp.clone().multiplyScalar(sphereRadius);
    ThreeArray.push(threeV);
    var geoPoint = vector3toLonLat(temp);
    geoArray.push(geoPoint);
  }

  /*
  var cleanV3Array = removeStrayEdges(ThreeArray);
  for (var i=0; i< cleanV3Array.length; i++)
  {
    var tmp = cleanV3Array[i].clone().normalize();
    var geoPoint = vector3toLonLat(tmp);
    geoArray.push(geoPoint);
  }
  
  */
  return [geoArray, ThreeArray];

  //return [geoArray, cleanV3Array];

}


function testDrawPolyEarcut()
{
  var geoRectangle = [ [90, 10], [110, 20], [100, 40], [115, 25], [160, 50], [-160, 50], [150, 10], [145, 40], [120, 20], [130, 10]];
  var v3points = [];
  for (var i=0; i < geoRectangle.length; i++)
  {
    var vct3 = lonLatToVector3(geoRectangle[i][0], geoRectangle[i][1]);
    var v3 = [vct3.x, vct3.y, vct3.z];
    v3points.push(v3);
  }

  // test getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
 var ret = getCross180LatFromLonLat (160, 70, -150, 50);
  //var splitPolys = cutAlong180(geoRectangle);

  drawPolyEarcut2(v3points, getRandomColor());
}


function testDrawPolyEarcut3()
{
  var geoRectangle = [ [90, 10], [110, 20], [100, 40], [115, 25], [160, 50], [-160, 50], [150, 10], [145, 40], [120, 20], [130, 10]];

   var tmp2 = azimuthalProjection (geoRectangle);
  var v3points = [];
  for (var i=0; i < geoRectangle.length; i++)
  {
    var vct3 = lonLatToVector3(geoRectangle[i][0], geoRectangle[i][1]);
    drawLabelAt(vct3.clone().normalize().multiplyScalar(sphereRadius), i.toString());
   
    //var v3 = [vct3.x, vct3.y, vct3.z];
    v3points.push(vct3);
  }

  // test getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
 //var ret = getCross180LatFromLonLat (160, 70, -150, 50);
  //var splitPolys = cutAlong180(geoRectangle);

  drawPolyEarcut3(v3points, getRandomColor());
  
}

function triFaceInside ( a, b, c)
{
  var ac = c.clone().sub(a.clone()).normalize();
  var ab = b.clone().sub(a.clone()).normalize();
  var normal = ac.cross(ab).normalize();
  var final = normal.add(a.clone().normalize());
  if (final.length() < 1)
  {
    return true;
  }
  return false;

}
/**
 * 
 * @param {*} points : THREE.JS Vector3 normalized array, in clockwise order.
 */
function earcut3d (points) 
{
   var ret =[];
  
    var remain =[];
    for (var x=0; x< points.length; x++)
    {
      remain.push(x);
    }

    while (remain.length > 3)
    { 
      var newRemain = [];
      for (var i=0; i< remain.length-2; )
      {
        var a = remain[i];
        var b = remain[i+1];
        var c = remain[i+2];
        newRemain.push(a);
        // for a, b, c triangle.
        // remove same points and point in a straight line

        /****
         *     c
         *   b
         *     a
         */
        var  ba = points[a].clone().sub(points[b].clone()).normalize();
        if (isZero(ba))
        {
          i +=2;
          continue; // drop point b
        }
        var bc = points[c].clone().sub(points[b].clone()).normalize();
        if (isZero(bc))
        {
          i +=2;
          continue;  // drop b
        }

        var cross = ba.cross(bc).normalize();;
        if (isZero(cross))
        {
          i +=2;
          continue; // drop b, straigt line.
        }

        var addV = cross.add(points[b].clone().normalize());

        if (addV.length() > 1)
        {
          // cut it
          // clockwise
          ret.push(a); ret.push(b); ret.push(c);
          i +=2;
        }
        else
        {
          // can't cut
          //newRemain.push(b);
          i++;
        }

      }

      // push the last one/two points for next round
      while (i < remain.length)
      {
        newRemain.push(i);
        i++;
      }

      remain = newRemain;
    }

    // 3 points remaining, figure out clock wise or not
    var fa = remain[0];
    var fb = remain[1];
    var fc = remain[2];
    var  fba = points[fa].clone().sub(points[fb].clone());
    if (isZero(fba))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }
    var fbc = points[fc].clone().sub(points[fb].clone());
    if (isZero(fbc))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }

    var fcross = fba.cross(fbc).normalize();
    if (isZero(fcross))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }

    if (fcross.add(points[fb]).length() > 1)
    {
     
      // clockwise
      ret.push(fa); ret.push(fb); ret.push(fc);
    }
    else
    {
      //counter clockwise
      ret.push(fa); ret.push(fc);  ret.push(fb);
    }

    return ret;


  


}

function isZero (v3)
{
  if ( v3.length() < 0.0001)
  {
    return true;
  }
  return false;
}

function checkClockWise (points)
{
  var sum = 0.0;
  for (var i=0; i< points.length-1; i++)
  {
     sum += (points[i+1][1] - points[i][1])*(points[i+1][0] + points[i][0]);
  }

  if (sum > 0)
  {
    return true;
  }
  return false;
}

function findCenterPointGeo (geoData)
{
  var minLat, maxLat, minLon, maxLon;

  
  minLon = maxLon = geoData[0][0];
  minLat = maxLat = geoData[0][1];

  for (var i=1; i<geoData.length; i++)
  {
    
    var lon = geoData[i][0];
    var lat = geoData[i][1];
    if (lon < minLon)
    {
      minLon = lon;
    }
    if (lon > maxLon)
    {
      maxLon = lon;
    }
    if (lat < minLat)
    {
      minLat = lat;
    }
    if (lat > maxLat)
    {
      maxLat = lat;
    }
  }

  var midLat = (minLat + maxLat)/2.0;

  //we have to take care of +180 and -180 scenarios
  var midLon;
  // all positives or all negative
  if  (((minLon >=0) && (maxLon >=0)) || ((minLon <=0) && (maxLon <=0)))
  {
   midLon = (minLon + maxLon)/2.0;
  }
  else
  {
    // one positive and one negative, which mean minLon is negative.
    if (Math.abs(minLon) + Math.abs(maxLon) <= 180.0)
    {
      midLon = (minLon + maxLon)/2.0;
    }
    else
    {
      var reverseMid = ((180 - Math.abs(minLon) ) + (180 -Math.abs(maxLon)))/2;
      if (Math.abs(minLon) < Math.abs(maxLon))
      {
        midLon = minLon - reverseMid;
      }
      else
      {
        midLon = maxLon + reverseMid;
      }
    }
  }
  //return lonLatToVector3(midLon*Math.PI/180, midLat*Math.PI/180);
  return [midLon, midLat];
}

function azimuthalProjection (geoPoints, theColor="")
{
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   
  var c = d3.geoCentroid(geoPolyformat);
 //var c= findCenterPointGeo(geoPoints);
    
  // for debuging only comment out later///////////////
  //plot out the center with Polygon cluster number:
  /*
  var ctr = lonLatToVector3(c[0], c[1]).normalize();
  var centerV3 = ctr.clone().multiplyScalar(sphereRadius);
  var ctrForLine = ctr.clone().multiplyScalar(sphereRadius + 2);
   
  ////// to be commented out /////////////
  if (polyCounter < gNodes.length )
  {  var lbl = gNodes[polyCounter].label;
    if (polyCounter != 20  && polyCounter != 41)
    { 
      if ((lbl != "Modest Mouse")  && (lbl != "Aerosmith"))
      {
        gLabelTable[lbl] = ctrForLine;
      // drawLabelAt (centerV3, polyCounter.toString());
        drawLabelAt (centerV3, lbl);
        var nodeColor = invertColor(theColor);
        spot(centerV3, nodeColor);
      }
    }
  }
  else
  {
  drawLabelAt (centerV3, polyCounter.toString());
  }
  ////////////// to be comment out above /////////////////
  ***/



  var projection = d3.geoAzimuthalEquidistant().rotate([-c[0], -c[1]]);
  var ret =[];

  for (var i=0; i< geoPoints.length; i++)
  {
    var p = projection(geoPoints[i]);
    ret.push(p);
  }

  return ret;
} 


function drawPolyEarcut (points, theColor, )
{
  var geoArray = v3toGeoArray (points);

 

  var wrapper =[];
  wrapper.push(geoArray);
  //wrapper.push(points);
  var data = earcut.flatten(wrapper);
  var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

  var c = -1; // the counter

  const polyGeometry = new THREE.Geometry();

  for ( var i=0; i <= triangles.length -3; i += 3)
  {
    // clock wise triangle
    /*************
        tb--------tc 
        \       /
          \   /
             ta
            
    ************/
    var ia = triangles[i]; 
    var ib = triangles[i+1];
    var ic = triangles[i+2];

    

    var ta = new THREE.Vector3(points[ia][0],points[ia][1], points[ia][2]).normalize().multiplyScalar(sphereRadius);
    var tb = new THREE.Vector3(points[ib][0],points[ib][1], points[ib][2]).normalize().multiplyScalar(sphereRadius);
    var tc = new THREE.Vector3(points[ic][0],points[ic][1], points[ic][2]).normalize().multiplyScalar(sphereRadius);

    // push ta into the vertice array
    c++;
    polyGeometry.vertices.push(ta);
    var taCounter = c;

    var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
    var sectionPoints = getArcPoints(tb, tc, smooth);

    for (var j =0; j< smooth - 1; j++)
    {
      var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
      var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
      var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
      
      for (var k =0; k < cordSmooth; k++)
      {
        polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
        c++;
        polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
        c++;

        if (k == 0)
        {
         // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
          polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
        }
        else
        {
          //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

         // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

        }
      }
    }
  }  // end of for ( var i=0; i < triangles.length -3; i += 3)

  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
     /* wireframe: true,   */
      vertexColors: THREE.FaceColors
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);  

}


function invertColor(hex) {
  if (hex.indexOf('#') === 0) {
      hex = hex.slice(1);
  }
  // convert 3-digit hex to 6-digits.
  if (hex.length === 3) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }
  if (hex.length !== 6) {
      throw new Error('Invalid HEX color.');
  }
  // invert color components
  var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),
      g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),
      b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);
  // pad each with zeros and return
  return '#' + padZero(r) + padZero(g) + padZero(b);
}

function padZero(str, len) {
  len = len || 2;
  var zeros = new Array(len).join('0');
  return (zeros + str).slice(-len);
}


function drawPolyEarcut3 (points, theColor)
{
  
  var triangles = earcut3d(points);
  
  var c = -1; // the counter

  const polyGeometry = new THREE.Geometry();

  for ( var i=0; i <= triangles.length -3; i += 3)
  {
    // clock wise triangle
    /*************
        tb--------tc 
        \       /
          \   /
            ta
            
    ************/
    var ia = triangles[i]; 
    var ib = triangles[i+1];
    var ic = triangles[i+2];

    

    var ta = points[ia].clone().normalize().multiplyScalar(sphereRadius);
    var tb =points[ib].clone().normalize().multiplyScalar(sphereRadius);
    var tc =points[ic].clone().normalize().multiplyScalar(sphereRadius);

    // push ta into the vertice array
    c++;
    polyGeometry.vertices.push(ta);
    var taCounter = c;

    var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
    var sectionPoints = getArcPoints(tb, tc, smooth);

    for (var j =0; j< smooth - 1; j++)
    {
      var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
      var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
      var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
      
      for (var k =0; k < cordSmooth; k++)
      {
        polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
        c++;
        polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
        c++;

        if (k == 0)
        {
        // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
          polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
        }
        else
        {
          //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

        // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

        }
      }
    }
  }  // end of for ( var i=0; i < triangles.length -3; i += 3)

  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      wireframe: true,   
      vertexColors: THREE.FaceColors
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);  
  

  
}


function drawPolyAzimuthal (gPoints, theColor, )
{
  var conv = v3toGeoAndThreeArray (gPoints);
  var geoArray = conv[0];
  var points = conv[1];
  var aziArray = azimuthalProjection (geoArray, theColor);

  // debugging only: did not work
  //var clockwise = checkClockWise(aziArray);
  //console.log(clockwise);
  ////////////

 
    

    var wrapper =[];
    wrapper.push(aziArray);
  
    var data = earcut.flatten(wrapper);
    var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

    var c = -1; // the counter

    const polyGeometry = new THREE.Geometry();

    for ( var i=0; i <= triangles.length -3; i += 3)
    {
      // clock wise triangle
      /*************
          tb--------tc 
          \       /
            \   /
              ta
              
      ************/
      var ia = triangles[i]; 
      var ib = triangles[i+1];
      var ic = triangles[i+2];

      

      var ta = points[ia];
      var tb =points[ib];
      var tc =points[ic];


      // test out wrong clockwise direction.
       if (triFaceInside (ta, tb, tc) )
       {
         // switch tb, tc
         tb = points[ic];
         tc = points[ib];
       }

      // push ta into the vertice array
      c++;
      polyGeometry.vertices.push(ta);
      var taCounter = c;

      var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
      var sectionPoints = getArcPoints(tb, tc, smooth);

      for (var j =0; j< smooth - 1; j++)
      {
        var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
        var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
        var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
        
        for (var k =0; k < cordSmooth; k++)
        {
          polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (k == 0)
          {
            polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
           // polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
          }
          else
          {
            polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
           // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

             polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
            //polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

          }
        }
      }
    }  // end of for ( var i=0; i < triangles.length -3; i += 3)

    const polyMaterial = new THREE.MeshBasicMaterial(
      {color: theColor,
       /*wireframe: true,   */
        vertexColors: THREE.FaceColors
      });

    const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
    scene.add(myPoly);  
  

}

function drawPolyEarcut2 (gPoints, theColor, )
{
  var geoArray = v3toGeoArray (gPoints);

  var splitPolysBig = cutAlong180(geoArray);
  var splitPolys = [];
  for (var xx=0; xx < splitPolysBig.length; xx++)
  {
    splitPolys = splitPolys.concat(slicePoly(splitPolysBig[xx], 90));
  }

  for (var q=0; q< splitPolys.length; q++)
  {
    //test color
    theColor = getRandomColor();


    var points = [];
    for (var t=0; t< splitPolys[q].length; t++)
    {
      var tmp = lonLatToVector3(splitPolys[q][t][0], splitPolys[q][t][1] ).normalize().multiplyScalar(sphereRadius);
      points.push(tmp);
    }

    var wrapper =[];
    wrapper.push(splitPolys[q]);
    //wrapper.push(points);
    var data = earcut.flatten(wrapper);
    var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

    var c = -1; // the counter

    const polyGeometry = new THREE.Geometry();

    for ( var i=0; i <= triangles.length -3; i += 3)
    {
      // clock wise triangle
      /*************
          tb--------tc 
          \       /
            \   /
              ta
              
      ************/
      var ia = triangles[i]; 
      var ib = triangles[i+1];
      var ic = triangles[i+2];

      

      var ta = points[ia];
      var tb =points[ib];
      var tc =points[ic];

      // push ta into the vertice array
      c++;
      polyGeometry.vertices.push(ta);
      var taCounter = c;

      var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
      var sectionPoints = getArcPoints(tb, tc, smooth);

      for (var j =0; j< smooth - 1; j++)
      {
        var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
        var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
        var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
        
        for (var k =0; k < cordSmooth; k++)
        {
          polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (k == 0)
          {
          // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
            polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
          }
          else
          {
            //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
            polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

          // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
            polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

          }
        }
      }
    }  // end of for ( var i=0; i < triangles.length -3; i += 3)

    const polyMaterial = new THREE.MeshBasicMaterial(
      {color: theColor,
       /*wireframe: true,   */
        vertexColors: THREE.FaceColors
      });

    const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
    scene.add(myPoly);  
  }

}

function randColorPolyLine (poly, index, array)
{
  var clr = getRandomColor();

  if ((polyCounter ==34) /*|| (polyCounter % 2 == 0) */ )
  {
    var points = [];
    var geoPoints =[];
    for (var i=0; i< poly.length; i++)
    {
      var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
      points.push(tempV.clone());

      var geoPoint = vector3toLonLat(tempV);
      geoPoints.push(geoPoint);
      //if( (i == 2 ) || (i== 10) || (i ==20) || (i==30 ) || (i== 60) || (i== 150) || (i== poly.length - 1))
      {
      // drawLabelAt(tempV, i.toString());
      }

    }



    //var hulls = d3.polygonHull(geoPoints);
   //var hulls = geoPoints;


   points.push(points[0]);
   geoPoints.push(vector3toLonLat(points[0].clone()));
   

   

  for (var i=0; i< points.length-1; i++)
  {
    var start = points[i];
    var end =  points[i+1 ];
    var ret = setArcGetGeoPoints(start, end, 6, clr);
    scene.add(ret[0]);
  }
  

  var ctr = findCenterPoint(points);
  drawLabelAt(ctr.normalize().multiplyScalar(sphereRadius), 'c' + polyCounter.toString());


  

  
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};

  
      
      geometry.computeFaceNormals();

      for ( var j = 0; j < geometry.faces.length; j ++ )
      {
        var normalGeo = vector3toLonLat (geometry.faces[j].normal);
        //var idx = geometry.faces[j].a;
       // var normalGeo = vector3toLonLat (geometry.vertices[idx]);
        if (d3.geoContains(geoPolyformat, normalGeo) )
       // if (d3.polygonContains(hulls, normalGeo) )
        {
          geometry.faces[ j ].color.setHex(  0xffff00 );
           //geometry.faces.splice(j, 1) ;
        }
    
      }
      //geometry.elementsNeedUpdate = true;///////////////
      geometry.colorsNeedUpdate = true;
      
      
      
  }
  polyCounter++;
  
  
}

// split along the +- 180 lontitude line
function splitPolygon (geoPts)
{
  var retPolys = []
  
}


function  PointInPoly(polyPoints, L)
{
  var x = L[0], y = L[1];

  var inside = false;

  var intersections = 0;

  var ss;

  for (var i = 0, j = polyPoints.length -1; i < polyPoints.length; j = i++)
   {

    var xi = polyPoints[i][0], yi = polyPoints[i][1]; var xj = polyPoints[j][0], yj = polyPoints[j][1];
    if (yj == yi && yj == y && x > Math.min(xj, xi) && x < Math.max(xj, xi)) 
    { // Check if point is on an horizontal polygon boundary
     return true;

    }

    if (y > Math.min(yj, yi) && y <= Math.max(yj, yi) && x <= Math.max(xj, xi) && yj != yi)
    {
      ss = (y - yj) * (xi - xj) / (yi - yj) + xj;
      if (ss == x) 
      { // Check if point is on the polygon boundary (other than horizontal)
        return true;
      }

      if (xj == xi || x <= ss) 
      {
        intersections++;
      } 
    }
  }

  // If the number of edges we passed through is odd, then it’s in the polygon.

  if (intersections % 2 != 0) 
  {
    return true;
  } 
  else
  {
    return false;
  }
}



function randColorPoly2 (poly, index, array)
{
   if (poly.length < 3)
   {
     return
   }

   var points = [];
   for (var i=0; i< poly.length; i++)
   {
    var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
    points.push(tempV);
   }
   var polyCenter = findCenterPoint(points);

   //if ((index > 10) && (index < 13))
   //{
     spot(polyCenter.normalize().multiplyScalar(sphereRadius), 'pink');
   
    //drawPolygon2(points, polyCenter, getRandomColor(), true);

    drawPolygon3(points, getRandomColor(), false);
  //}
}

function drawPolygon( abcde, theColor)
{
  //abcde are points (vertex) in vector3 format.
  // walk from a to b to c to d to e... and back to a. After every degree create an additional point (lat, lon).
  var geoJsonArray =[];
  var polyArray =[];

  var smoothness = 8;
  for (var i=0; i< abcde.length-1; i++)
  {
  var smoothness = 8;
  var arcAndGeoPoints = setArcGetGeoPoints(abcde[i], abcde[i+1], smoothness, theColor);
     // scene.add(arcAndGeoPoints[0]);
      polyArray = polyArray.concat(arcAndGeoPoints[1]);
  }
  var closing = setArcGetGeoPoints(abcde[abcde.length-1], abcde[0], smoothness, theColor);
 // scene.add(closing[0]);
  polyArray = polyArray.concat(closing[1]);
  geoJsonArray.push(polyArray);

  //draw a polygon with color
const polyMesh = new THREE.Mesh(
  //new THREE.ConicPolygonGeometry(polygonGeoJson, 0, sphereRadius, false, true, false ),
  new THREE.ConicPolygonBufferGeometry(geoJsonArray, 0, sphereRadius, false, true, false ),
 
  new THREE.MeshBasicMaterial({ color: theColor })
);
scene.add(polyMesh);
}

/***
 *  sides: THREE.Vector3 arrays of 3d point forming the outsides of the polygon.
 *  center: a THREE.Vector3 3d point inside the polygon, does not have to be exactly the center point.
 * sidesCounterClockWise: weather the side point array goes couterclockwise or not.
 */
function drawPolygon2 (sides, center, theColor, sidesCounterClockWise = true)
{
  /***
   * idea:  connect the central point to every out edge point, to form trianles, then sub divide each triangle to more smaller triangles to form a mesh.
   */

  const polyGeometry = new THREE.Geometry();
  polyGeometry.vertices.push(center.normalize().multiplyScalar(sphereRadius));
   var c = 0;

   if (false == sides[0].equals(sides[sides.length-1]))
   {
     sides.push(sides[0]);
   }

  for (var i=0; i < sides.length-1; i++)
  {
      var smooth = GetSmoothness(sides[i], sides[i+1]);
      var sectionPoints = getArcPoints(sides[i], sides[i+1], smooth);
      for (var j =0; j< smooth - 1; j++)
      {
         var cordSmooth =  GetSmoothness (center, sectionPoints[j]);
         var cordPointsA = getArcPoints(center, sectionPoints[j], cordSmooth);
         var cordPointsB = getArcPoints(center, sectionPoints[j+1], cordSmooth);
         for (var k =0; k < cordSmooth; k++)
         {
          polyGeometry.vertices.push(cordPointsA[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsB[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (true == sidesCounterClockWise)
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c-1, c));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -1, c- 2));
              polyGeometry.faces.push( new THREE.Face3 (c-2, c -1, c));
            }

          }
          else
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c, c-1));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -2, c));
              polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));
            }
          }

        }
      }
  }
 


  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      /* wireframe: true, */
      vertexColors: THREE.FaceColors
      
      
      
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);
}



function drawPolygon3(sides, theColor, sidesCounterClockWise = true)
{
  /***
   * idea:  connect the central point to every out edge point, to form trianles, then sub divide each triangle to more smaller triangles to form a mesh.
   */


  var geoPoints =[];
  for (var i=0; i< sides.length; i++)
  {
    
    
    var geoPoint = vector3toLonLat(sides[i].clone());
    geoPoints.push(geoPoint);
  }
  geoPoints.push(geoPoints[0]);

  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   
  var geoCenter = d3.geoCentroid(geoPolyformat);
  var center = lonLatToVector3(geoCenter[0], geoCenter[1]);



  const polyGeometry = new THREE.Geometry();
  polyGeometry.vertices.push(center.normalize().multiplyScalar(sphereRadius));
   var c = 0;

   if (false == sides[0].equals(sides[sides.length-1]))
   {
     sides.push(sides[0]);
   }

  for (var i=0; i < sides.length-1; i++)
  {
      var smooth = GetSmoothness(sides[i], sides[i+1]);
      var sectionPoints = getArcPoints(sides[i], sides[i+1], smooth);
      for (var j =0; j< smooth - 1; j++)
      {
         var cordSmooth =  GetSmoothness (center, sectionPoints[j]);
         var cordPointsA = getArcPoints(center, sectionPoints[j], cordSmooth);
         var cordPointsB = getArcPoints(center, sectionPoints[j+1], cordSmooth);
         for (var k =0; k < cordSmooth; k++)
         {
          polyGeometry.vertices.push(cordPointsA[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsB[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (true == sidesCounterClockWise)
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c-1, c));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -1, c- 2));
              polyGeometry.faces.push( new THREE.Face3 (c-2, c -1, c));
            }

          }
          else
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c, c-1));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -2, c));
              polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));
            }
          }

        }
      }
  }
 


  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      /* wireframe: true, */
      vertexColors: THREE.FaceColors
      
      
      
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  
  scene.add(myPoly);
  
  polyGeometry.computeFaceNormals();

  for ( var j = 0; j < polyGeometry.faces.length; j ++ )
  {
    var normalGeo = vector3toLonLat (polyGeometry.faces[j].normal);
    //var idx = geometry.faces[j].a;
    // var normalGeo = vector3toLonLat (geometry.vertices[idx]);
    if (false == d3.geoContains(geoPolyformat, normalGeo) )
    // if (d3.polygonContains(hulls, normalGeo) )
    {
      //polyGeometry.faces[ j ].color.setHex(  0xffffff );
        polyGeometry.faces.splice(j, 1) ;
    }

  }
  geometry.elementsNeedUpdate = true;///////////////
  polyGeometry.colorsNeedUpdate = true;
  

  
  }


////////////////
function vector3toLonLat( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [ lng*(180.0/Math.PI),lat*(180.0/Math.PI) ];

}

function vector3toLonLatRadians( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [ lng,lat ];

}


function vector3toLatLon( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [lat*(180.0/Math.PI), lng*(180.0/Math.PI) ];

}

/**
 * converts a XYZ vector3 to longitude latitude (Direct Polar)
 * @param lng longitude, in degree ( -180 to + 180)
 * @param lat latitude, in degree ( -90 to + 50)
 * @param vector3 optional output vector3
 * @returns a unit vector of the 3d position
 */
function lonLatToVector3( lng, lat, out )
{
    lng = lng*Math.PI/180;
    lat = lat*Math.PI/180;

    out = out || new THREE.Vector3();

    //flips the Y axis
    lat = Math.PI / 2 - lat;

    //distribute to sphere
    out.set(
                Math.sin( lat ) * Math.sin( lng ),
                Math.cos( lat ),
                Math.sin( lat ) * Math.cos( lng )
    );

    return out;

}

function getCrossLatFromLonLat (lon0, lat0, lon1, lat1, lont)
{
  if (Math.abs(lat1 - lat0) < 0.01)
  {
    return (lat1 + lat0)/2.0;
  }
 
  var est =  lat0 + (lat1 -lat0) *( lont  - lon0)/ ( lon1 -lon0);

  var v0 = lonLatToVector3(lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);
  v0.cross(v1);

  var l0 = lonLatToVector3(lont, lat0);
  var l1 = lonLatToVector3(lont, lat1);
  l0.cross(l1);

  var x1 = v0.clone().cross(l0);
  var x2 = l0.clone().cross(v0);

  var lonlat1 = vector3toLonLat(x1);
  var lonlat2 = vector3toLonLat(x2);
 
  if (Math.abs(lonlat1[1] - est) < Math.abs(lonlat2[1] -est) )
  {
    return lonlat1[1];
  }
  else
  return lonlat2[1];


}


function getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
{
  if (Math.abs(lat1 - lat0) < 0.01)
  {
    return (lat1 + lat0)/2.0;
  }

  
  //return getCrossLatFromLonLat(lon0, lat0, lon1, lat1, 180);

 var est =  lat0 + (lat1 -lat0) *( 180  - Math.abs(lon0) )/ ( 180  - Math.abs(lon0) + 180 - Math.abs(lon1));

 var v0 = lonLatToVector3(lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);
  v0.cross(v1);

  var l0 = lonLatToVector3(180, lat0);
  var l1 = lonLatToVector3(180, lat1);
  l0.cross(l1);

  var x1 = v0.clone().cross(l0);
  var x2 = l0.clone().cross(v0);

  var lonlat1 = vector3toLonLat(x1);
  var lonlat2 = vector3toLonLat(x2);
 
  if (Math.abs(lonlat1[1] - est) < Math.abs(lonlat2[1] -est) )
  {
    return lonlat1[1];
  }
  else
  return lonlat2[1];

  //https://gis.stackexchange.com/questions/18562/how-can-i-make-a-polyline-wrap-around-the-world
  // original post is in Cartesian coordinates
 
  //(x0, y0, z0) = (cos(lon0)*sin(lat0), sin(lon0)*sin(lat0), cos(lat0))
  
   var x0 = Math.cos(lon0*Math.PI/180)*Math.sin(lat0*Math.PI/180);
   var y0 = Math.sin(lon0*Math.PI/180) * Math.sin(lat0*Math.PI/180);
   var z0 = Math.cos(lat0*Math.PI/180);

   var x1 = Math.cos(lon1*Math.PI/180)*Math.sin(lat1*Math.PI/180);
   var y1 = Math.sin(lon1*Math.PI/180) * Math.sin(lat1*Math.PI/180);
   var z1 = Math.cos(lat1*Math.PI/180);

   var t = y1 / (y1 - y0);

   //(x, y, z) = (t * x0 + (1-t) * x1, 0, t * z0 + (1-t) * z1)
   var x = t * x0 + (1-t) * x1;
   var z =  t * z0 + (1-t) * z1;
   
   //lat2 = ATan(z/x).
   var lat2 = Math.atan(z/x)*180/Math.PI;
   return lat2;






  // based on   
  //https://gis.stackexchange.com/questions/18562/how-can-i-make-a-polyline-wrap-around-the-world
  // original post is in Cartesian coordinates, not Three.js's, so  bit conversion. 
  /**
    Cartesin:   z                             WebGL THREE.JS:           y
                |                                                       |
                |                                                       |
                --------y                                                --------- x
               /                                                       /
              /                                                       /
            x                                                        z

  var v0 = lonLatToVector3 (lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);

  var t = v1.z/(v1.x - v0.x);
  var z = t*v0.z + (1-t)*v1.z;
  var y = t*v0.y + (1-t)*v1.y

  var lat2 = Math.atan(y/z)*180/Math.PI;

  return lat2;
  */


}

function slicePoly (poly, wlont)
{
  var ret =[];
  var minMax = polyMinMaxLon (poly);
  if (minMax[1] - minMax[0] <=wlont)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    var polyArray = cutAlongLont (poly, minMax[0] + (minMax[1] - minMax[0])/2);
    for (var i=0; i < polyArray.length; i++)
    {
       var newPolyArray = slicePoly(polyArray[i], wlont);
       ret = ret.concat(newPolyArray);

    }
    return ret;
  }
}

function polyMinMaxLon (poly)
{
  var min = poly[0][0];
  var max = min;
  for (var i=1; i<poly.length; i++)
  {
    if (poly[i][0] < min)
    {
      min = poly[i][0];
    }
    if (poly[i][0] > max)
    {
      max = poly[i][0];
    }
  }

  return [min, max];
}

// the poly arrray in  geo point.
function cutAlong180 (poly)
{
  var ret = [];
  var crossIndice =[];   // contain [beforeIdx, afterIdx, crossLat]


  var counter =0;  // how many times crossed the line

  for (var i=0; i < poly.length-1; i++)
  {
    if (Math.abs(poly[i][0] - poly[i+1][0]) > 180)
    {
      counter++;
      var crossLat = getCross180LatFromLonLat(poly[i][0], poly[i][1], poly[i+1][0], poly[i+1][1]);
      var cross = [i, i+1, crossLat];
      if ((crossIndice.length == 0) || (crossLat <= crossIndice[crossIndice.length-1][2]) )
      {
        crossIndice.push(cross);
      }
      else
      {
        for (var j=0; j< crossIndice.length; j++)
        {
          if (crossLat > crossIndice[j][2])
          {
            crossIndice.splice(j, 0, cross);
            break; 
          }
        }
        
      }
    }
  }

  // check end point to start point
  var end = poly.length -1;
  if (Math.abs(poly[end][0] - poly[0][0]) > 180)
  {
    counter++;
    var crossLat2 = getCross180LatFromLonLat(poly[end][0], poly[End][1], poly[0][0], poly[0][1]);
    var cross2 = [end, 0, crossLat2];
    if ((crossIndice.length == 0) || (crossLat2 <= crossIndice[crossIndice.length-1][2]) )
    {
      crossIndice.push(cross2);
    }
    else
    {
      for (var j=0; j< crossIndice.length; j++)
      {
        if (crossLat2 > crossIndice[j][2])
        {
          crossIndice.splice(j, 0, cross2);
          break; 
        }
      }
      
    }
  }


  if (counter == 0)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    // split into two poly, and recursively keep spliting
    var rightPoly =[];  // negative lon
     var rstart = [-180, crossIndice[0][2]];
     rightPoly.push(rstart);

     // then copy from after index of top cross all the way to the before index of the 2nd cross
     if (crossIndice[1][0] >= crossIndice[0][1])
     {
       for (var k = crossIndice[0][1];k <= crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }
     else
     {
       // rounded back to o, 1, 2, ...
       for (var k = crossIndice[0][1]; k <= poly.length -1; k++)
       {
         rightPoly.push(poly[k]);
       }

       for (var k = 0; k < crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }

     var rend = [ -180, crossIndice[1][2] ];
     rightPoly.push (rend);


     var leftPoly = [];
     var lstart = [180, crossIndice[1][2]];
     leftPoly.push(lstart);

     // then copy from after index of 2nd top cross all the to the before index of the 1st top cross
     if (crossIndice[0][0] >= crossIndice[1][1])
     {
       for (var k = crossIndice[1][1]; k  <= crossIndice[0][0]; k++ )
       {
         leftPoly.push(poly[k]);
       }
     }
     else
     {
       for (var k= crossIndice[1][1]; k <= poly.length -1; k++)
       {
         leftPoly.push(poly[k]);

       }
       for (var k=0; k <= crossIndice[0][0]; k++)
       {
        leftPoly.push(poly[k]);
       }
     }

     var lend = [180, crossIndice[0][2]];
     leftPoly.push(lend);

     return cutAlong180(leftPoly).concat(cutAlong180(rightPoly));





  }



}

function crossedLont (leftLon, crossLon, rightLon)
{
   if ( ( ( leftLon < crossLon) && (rightLon > crossLon) ) ||   ((rightLon < crossLon) && (leftLon > crossLon)))
    {
      return true;
    }
    return false;

}

// cut along a latitude, the poly is not cross 180
function cutAlongLont (poly, lont)
{
  var ret = [];
  var crossIndice =[];   // contain [beforeIdx, afterIdx, crossLat]


  var counter =0;  // how many times crossed the line

  for (var i=0; i < poly.length-1; i++)
  {
    if ( crossedLont(poly[i][0], lont, poly[i+1][0]) )
    {
      counter++;
      var crossLat = getCrossLatFromLonLat(poly[i][0], poly[i][1], poly[i+1][0], poly[i+1][1], lont);
      var cross = [i, i+1, crossLat];
      if ((crossIndice.length == 0) || (crossLat <= crossIndice[crossIndice.length-1][2]) )
      {
        crossIndice.push(cross);
      }
      else
      {
        for (var j=0; j< crossIndice.length; j++)
        {
          if (crossLat > crossIndice[j][2])
          {
            crossIndice.splice(j, 0, cross);
            break; 
          }
        }
        
      }
    }
  }

  // check end point to start point
  var end = poly.length -1;
  if (crossedLont(poly[end][0], lont, poly[0][0]))
  {
    counter++;
    var crossLat2 = getCrossLatFromLonLat(poly[end][0], poly[End][1], poly[0][0], poly[0][1], lont);
    var cross2 = [end, 0, crossLat2];
    if ((crossIndice.length == 0) || (crossLat2 <= crossIndice[crossIndice.length-1][2]) )
    {
      crossIndice.push(cross2);
    }
    else
    {
      for (var j=0; j< crossIndice.length; j++)
      {
        if (crossLat2 > crossIndice[j][2])
        {
          crossIndice.splice(j, 0, cross2);
          break; 
        }
      }
      
    }
  }


  if (counter == 0)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    // split into two poly, and recursively keep spliting
    var rightPoly =[];  // 
     var rstart = [lont, crossIndice[0][2]];
     rightPoly.push(rstart);

     // then copy from after index of top cross all the way to the before index of the 2nd cross
     if (crossIndice[1][0] >= crossIndice[0][1])
     {
       for (var k = crossIndice[0][1];k <= crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }
     else
     {
       // rounded back to o, 1, 2, ...
       for (var k = crossIndice[0][1]; k <= poly.length -1; k++)
       {
         rightPoly.push(poly[k]);
       }

       for (var k = 0; k < crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }

     var rend = [ lont, crossIndice[1][2] ];
     rightPoly.push (rend);


     var leftPoly = [];
     var lstart = [lont, crossIndice[1][2]];
     leftPoly.push(lstart);

     // then copy from after index of 2nd top cross all the to the before index of the 1st top cross
     if (crossIndice[0][0] >= crossIndice[1][1])
     {
       for (var k = crossIndice[1][1]; k  <= crossIndice[0][0]; k++ )
       {
         leftPoly.push(poly[k]);
       }
     }
     else
     {
       for (var k= crossIndice[1][1]; k <= poly.length -1; k++)
       {
         leftPoly.push(poly[k]);

       }
       for (var k=0; k <= crossIndice[0][0]; k++)
       {
        leftPoly.push(poly[k]);
       }
     }

     var lend = [lont, crossIndice[0][2]];
     leftPoly.push(lend);

     return cutAlongLont(leftPoly, lont).concat(cutAlongLont(rightPoly, lont));





  }



}

/**
 * Find the bounding regtangle and uses the mid point of the rectangle in terms of lon. and lat.
 * 
 * @param polySides  Vecter3 array composing the sides of the polygon.
 */
function findCenterPoint (polySides)
{
  var minLat, maxLat, minLon, maxLon;

  var init = vector3toLonLat(polySides[0]);
  minLon = maxLon = init[0];
  minLat = maxLat = init[1];

  for (var i=1; i<polySides.length; i++)
  {
    var temp = vector3toLonLat(polySides[i]);
    var lon = temp[0];
    var lat = temp[1];
    if (lon < minLon)
    {
      minLon = lon;
    }
    if (lon > maxLon)
    {
      maxLon = lon;
    }
    if (lat < minLat)
    {
      minLat = lat;
    }
    if (lat > maxLat)
    {
      maxLat = lat;
    }
  }

  var midLat = (minLat + maxLat)/2.0;

  //we have to take care of +180 and -180 scenarios
  var midLon;
  // all positives or all negative
  if  (((minLon >=0) && (maxLon >=0)) || ((minLon <=0) && (maxLon <=0)))
  {
   midLon = (minLon + maxLon)/2.0;
  }
  else
  {
    // one positive and one negative, which mean minLon is negative.
    if (Math.abs(minLon) + Math.abs(maxLon) <= 180.0)
    {
      midLon = (minLon + maxLon)/2.0;
    }
    else
    {
      var reverseMid = ((180 - Math.abs(minLon) ) + (180 -Math.abs(maxLon)))/2;
      if (Math.abs(minLon) < Math.abs(maxLon))
      {
        midLon = minLon - reverseMid;
      }
      else
      {
        midLon = maxLon + reverseMid;
      }
    }
  }
  //return lonLatToVector3(midLon*Math.PI/180, midLat*Math.PI/180);
  return lonLatToVector3(midLon, midLat);
}


function getRandomColor() {
  var letters = '0123456789ABCDEF';
  var color = '#';
  for (var i = 0; i < 6; i++) {
  color += letters[Math.floor(Math.random() * 16)];
  }
  return color;
  }

function convertFlatCoordsToSphereCoords(x, y) {
  // Calculate the relative 3d coordinates using Mercator projection relative to the radius of the globe.
  // Convert latitude and longitude on the 90/180 degree axis.
  let latitude = ((x - globeWidth) / globeWidth) * -180
  let longitude = ((y - globeHeight) / globeHeight) * -90
  latitude = (latitude * Math.PI) / 180 //(latitude / 180) * Math.PI
  longitude = (longitude * Math.PI) / 180 //(longitude / 180) * Math.PI // Calculate the projected starting point
  const radius = Math.cos(longitude) * globeRadius
  const targetX = Math.cos(latitude) * radius
  const targetY = Math.sin(longitude) * globeRadius
  const targetZ = Math.sin(latitude) * radius

  
 

  return new THREE.Vector3(targetX, targetY, targetZ);
}

render();


function resizeRendererToDisplaySize(renderer) {
  const canvas = renderer.domElement;
  const width = canvas.clientWidth;
  const height = canvas.clientHeight;
  const needResize = canvas.width !== width || canvas.height !== height;
  if (needResize) {
    renderer.setSize(width, height, false);
  }
  return needResize;
}



function render() {

  if (resizeRendererToDisplaySize(renderer)) {
    const canvas = renderer.domElement;
    camera.aspect = canvas.clientWidth / canvas.clientHeight;
    camera.updateProjectionMatrix();
  }
  sphere.updateWorldMatrix(true, false);

  ///
  normalMatrix.getNormalMatrix(camera.matrixWorldInverse);
  camera.getWorldPosition(cameraPosition);
  labels.forEach((info, ndx) => {
    const {elem, meshPoint} = info;
    
    meshPoint.updateWorldMatrix(true, false);
    meshPoint.getWorldPosition(tempV);
    myV.copy(tempV);
    // 
    cameraToPoint.copy(myV);
    // get the normalized screen coordinate of that position
    // x and y will be in the -1 to +1 range with x = -1 being
    // on the left and y = -1 being on the bottom
    tempV.project(camera);

    //////////////////////////// make label invisible if on the other side of the sphere
    // Orient the position based on the camera's orientation.
    // Since the sphere is at the origin and the sphere is a unit sphere
    // this gives us a camera relative direction vector for the position.
    
    myV.applyMatrix3(normalMatrix);
    

    // compute the direction to this position from the camera
    
    cameraToPoint.applyMatrix4(camera.matrixWorldInverse).normalize();

    // get the dot product of camera relative direction to this position
    // on the globe with the direction from the camera to that point.
    // -1 = facing directly towards the camera
    // 0 = exactly on tangent of the sphere from the camera
    // > 0 = facing away
    const dot = myV.dot(cameraToPoint);

    // if the orientation is not facing us hide it.
    if (dot > settings.maxVisibleDot) {
      elem.style.display = 'none';
      
    }
    else {

       // restore the element to its default display style
       elem.style.display = '';
    ////////////////////////////////////////////////

    // convert the normalized position to CSS coordinates
    const x = (tempV.x *  .5 + .5) * canvas.clientWidth;
    const y = (tempV.y * -.5 + .5) * canvas.clientHeight;
    
   /* 
   const x = ((tempV.x *  .5 + .5) * canvas.clientWidth)%canvas.clientWidth;
   const y = ((tempV.y * -.5 + .5) * canvas.clientHeight)%canvas.clientHeight;
   */

    // move the elem to that position
    elem.style.transform = `translate(-50%, -50%) translate(${x}px,${y}px)`;
    }
  });
  ////



  requestAnimationFrame(render);
  renderer.render(scene, camera);
}
