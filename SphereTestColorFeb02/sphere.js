
// Mason Yin's sphere test with three.js
let  polyCounter =0;




  
// input data: clusters, egdes, and labels.
// Later on in the real web site we will read them from json files generated by the web server.
// from the update baby test data:


const g_clusters = 
[[[-0.275644996312108,0.8184199657028242,0.5041910310061914],[-0.2645877335353461,0.8092580129111283,0.5244948043610735],[-0.3090916401909366,0.7873044321962002,0.5334923514056182],[-0.3642416199452956,0.7708092868344635,0.5226672800447457],[-0.3660270796463496,0.7702096665655069,0.5223037875553035],[-0.4128048595494639,0.7562439954744755,0.5076289661171325],[-0.4355290394275441,0.7652398784677032,0.4740489259750047],[-0.4400186691013187,0.7667116055076746,0.46747928812103356],[-0.4506069191265379,0.7695721582344085,0.45245121030418767],[-0.4532473725397107,0.7701140255233412,0.4488777194048323],[-0.5332840489190193,0.7739743160198889,0.34142624578389136],[-0.5092904217764249,0.8071031304730081,0.2986767534768346],[-0.6356665125312899,0.762530630693633,0.12031260158552766],[-0.6452674705027889,0.7559350761061153,0.11041762641613985],[-0.6452674705027889,0.7559350761061153,0.11041762641613985],[-0.6356665125312899,0.762530630693633,0.12031260158552766],[-0.5092904217764249,0.8071031304730081,0.2986767534768346],[-0.5332840489190193,0.7739743160198889,0.34142624578389136],[-0.579132334640022,0.7391983879192094,0.3437898809913397],[-0.729658502213514,0.614730752517205,0.2995072153674469],[-0.7409818702714354,0.6018960879135042,0.29776999056900477],[-0.7437722469862452,0.6030746404867989,0.28827733628356944],[-0.7474755968343706,0.6048125731615898,0.2747398469147829],[-0.752135074135724,0.6064164953500627,0.2579764803663241],[-0.7539331661231927,0.60712434355544,0.25096775187628084],[-0.7565800667278849,0.6080238250562323,0.2406109531879573],[-0.7607822479706298,0.6096838518079752,0.22247690221087257],[-0.763132614050857,0.6104364428712651,0.2121225178678176],[-0.7928255200268097,0.6090042699904955,-0.023270022079114636],[-0.8162309500754792,0.5762621115803098,-0.04109762640206008],[-0.8334735793171657,0.549898237788606,-0.054163831633462646],[-0.8485912312077443,0.5248445717571337,-0.06656649167858925],[-0.8625392376905483,0.4997746395866658,-0.07906562508591254],[-0.8688928912426878,0.4847255212026208,-0.10033101535801617],[-0.7863621273031803,0.5576454350872331,-0.2658310995154393],[-0.772163383231577,0.5689813310617106,-0.28288505527795],[-0.770582164428266,0.5679216955765287,-0.28925434406163997],[-0.7706657009416972,0.565109367523872,-0.29449241098678935],[-0.7703497855785603,0.5645627876277125,-0.29636137853150285],[-0.7674176087366507,0.5673457032083357,-0.2986453864568483],[-0.7656035984772177,0.5686793584283836,-0.3007572398068204],[-0.7656035984772177,0.5686793584283836,-0.3007572398068204],[-0.7674176087366507,0.5673457032083357,-0.2986453864568483],[-0.7703497855785603,0.5645627876277125,-0.29636137853150285],[-0.7706657009416972,0.565109367523872,-0.29449241098678935],[-0.770582164428266,0.5679216955765287,-0.28925434406163997],[-0.772163383231577,0.5689813310617106,-0.28288505527795],[-0.7863621273031803,0.5576454350872331,-0.2658310995154393],[-0.8688928912426878,0.4847255212026208,-0.10033101535801617],[-0.8711628901044141,0.47904499522055943,-0.10766202421958644],[-0.878238146767073,0.46053630838240966,-0.12885676631298512],[-0.8998050191124862,0.3896736310006229,-0.1962279003678348],[-0.9062236462127126,0.36028558487118145,-0.22125324942013214],[-0.9074235483634671,0.3536838846377154,-0.22691455136907765],[-0.9076077801659068,0.35260536842861945,-0.2278542769790211],[-0.9103779406873047,0.33342430690517066,-0.24503109328154424],[-0.9117977046729736,0.3212612985305963,-0.25576575966992143],[-0.8990023446735687,0.32104037538020663,-0.29787222369190797],[-0.891618510952237,0.3210358053438165,-0.31929992579792904],[-0.8824035675815783,0.32192141307752864,-0.3431188536374389],[-0.8585254598851632,0.3250535609462154,-0.3965781351072626],[-0.8466712171577337,0.36866376479619034,-0.38371197344224356],[-0.7860115780476634,0.5376128788604954,-0.3052182688804071],[-0.7860115780476634,0.5376128788604954,-0.3052182688804071],[-0.8466712171577337,0.36866376479619034,-0.38371197344224356],[-0.8585254598851632,0.3250535609462154,-0.3965781351072626],[-0.8397216732140153,0.3257020351008104,-0.4344947593076872],[-0.8108345636565177,0.3226124202042432,-0.4883324039114192],[-0.8149816170291438,0.18739676664805555,-0.5483497203012109],[-0.8461627377428491,0.09901411624336738,-0.5236457065994826],[-0.857415380893341,0.05860731736605375,-0.5112768789596119],[-0.8615873596962635,0.03722377440324357,-0.5062426416559532],[-0.8663409503182499,0.008161160048567635,-0.4993863767348218],[-0.8376819651725965,-0.027293105270538933,-0.5454759496341413],[-0.8166510289493885,-0.05463182190926027,-0.5745402170003246],[-0.8107863669519506,-0.06603361379268075,-0.5816055613681287],[-0.8082606142180789,-0.0696235409744125,-0.5846942295302718],[-0.8077632094642955,-0.07011248827688465,-0.585322848027962],[-0.8057535413816388,-0.07299455218760609,-0.5877355067561247],[-0.8030141993308022,-0.07885991008895295,-0.5907193159647592],[-0.8004566293510376,-0.08193857600443519,-0.5937636350353068],[-0.7978544397583078,-0.08890837765322916,-0.596257992265955],[-0.7927429301020741,-0.08907142882501623,-0.6030132066051691],[-0.7923081995661373,-0.08414027258831348,-0.6042914292202316],[-0.7863777241066233,-0.07716793011663815,-0.612907159030143],[-0.7862826408647579,-0.07695245998062183,-0.6130562189372792],[-0.7854072252410343,-0.07590956336109288,-0.6143071127127762],[-0.7828670364604368,-0.07829398124076364,-0.6172432711055863],[-0.7732985666375857,-0.08221136514510469,-0.6286896040791782],[-0.7689264084738153,-0.07927347653312898,-0.6344035736578971],[-0.7689264084738153,-0.07927347653312898,-0.6344035736578971],[-0.7732985666375857,-0.08221136514510469,-0.6286896040791782],[-0.7735951115248308,-0.08655836157185677,-0.627740594088737],[-0.7759987609233115,-0.09337088848096813,-0.6237850593191214],[-0.7816232397219082,-0.09534778067607247,-0.6164202396472525],[-0.782288673070239,-0.09416153477661263,-0.6157580997067903],[-0.7863506200760443,-0.09522441002120963,-0.6103974230303837],[-0.7876486663643828,-0.09187450870881969,-0.6092361225534172],[-0.7918462712577123,-0.09309443017508219,-0.6035833908961],[-0.7922778425803131,-0.09236110242181833,-0.6031295440580831],[-0.7970719975822834,-0.09394315993072982,-0.5965324076464059],[-0.7992417972454245,-0.10567732845318503,-0.5916458837741553],[-0.7900163108416371,-0.10978549737294648,-0.603176071450737],[-0.7882152433019102,-0.11146017700254042,-0.6052217438006281],[-0.7880851863393195,-0.1111721833887889,-0.6054440392910724],[-0.7833733302531422,-0.10568968215776843,-0.6124997277823816],[-0.7814947813510006,-0.09627670693562736,-0.6164387256027829],[-0.7762773743499211,-0.10239808152480223,-0.6220193493553337],[-0.7760676779384881,-0.10349320906923716,-0.622099762848142],[-0.7690700128514535,-0.11252271130856809,-0.6291819727014069],[-0.7668691270350565,-0.1141318612784112,-0.6315739546890895],[-0.7603357467766497,-0.12599025307849693,-0.6371938545708132],[-0.7578491648686817,-0.1285930206645961,-0.6396315176288583],[-0.7407227077898727,-0.15112710879520594,-0.6545918324816167],[-0.5376637683783434,-0.32863082800764476,-0.7764788799807816],[-0.5371441097430881,-0.23578908313817493,-0.8098640093504368],[-0.48350591024852985,-0.17847729265261372,-0.8569526770844081],[-0.4745470346874678,-0.16824112283450113,-0.8640023359092946],[-0.468529736286061,-0.16195390700910017,-0.8684761471797611],[-0.43047551282833163,-0.11899811433770413,-0.8947235783409621],[-0.42884928901176717,-0.11744299226356968,-0.8957094567337563],[-0.42464166972174944,-0.11273712965674205,-0.8983149736772084],[-0.2861638557477148,0.022876192138345484,-0.9579075777426811],[-0.2929482394897183,0.08707198479288775,-0.9521553436514977],[-0.2933355746636825,0.0932947514487472,-0.9514464409460175],[-0.29480921446417746,0.09480504367627918,-0.9508414856118519],[-0.30483940942806265,0.10599208455134598,-0.9464875131093967],[-0.3074658875564174,0.10951871072126491,-0.9452356214146272],[-0.3333576839117169,0.1384002665363446,-0.9325867363412825],[-0.3875191758721398,0.13154255731579112,-0.9124283226348245],[-0.4258197327117448,0.11854220082694814,-0.8970090868304522],[-0.42576585708089987,0.11799247533520023,-0.8971071344652426],[-0.42576585708089987,0.11799247533520023,-0.8971071344652426],[-0.4258197327117448,0.11854220082694814,-0.8970090868304522],[-0.4295044826966495,0.12803429803269673,-0.8939424578074129],[-0.4272499391605267,0.13173490849920577,-0.8944849933732998],[-0.43566089759698906,0.16113890780238513,-0.8855697796883316],[-0.4355299285633204,0.16544558159649703,-0.8848397825910779],[-0.44814835828202115,0.16565165287647965,-0.8784774208073988],[-0.45034822388433887,0.16503506034145593,-0.8774678946276686],[-0.45607682587163506,0.1651033087660764,-0.8744911813948429],[-0.46094325647236134,0.16378064311779017,-0.8721853101563785],[-0.4622623378274607,0.16379234182038016,-0.8714847100134842],[-0.467003588358578,0.14144841834347271,-0.8728688294402212],[-0.49702487192628075,0.13601851599530865,-0.8570094748560825],[-0.5094193681238957,0.13595923027980863,-0.8497099476185819],[-0.5213958142828934,0.12675898253213166,-0.843847477448204],[-0.5485220723005164,0.10906646198591681,-0.8289921851676417],[-0.5561586555872192,0.15724933605225289,-0.8160638431682553],[-0.5561586555872192,0.15724933605225289,-0.8160638431682553],[-0.5485220723005164,0.10906646198591681,-0.8289921851676417],[-0.5213958142828934,0.12675898253213166,-0.843847477448204],[-0.5094193681238957,0.13595923027980863,-0.8497099476185819],[-0.49702487192628075,0.13601851599530865,-0.8570094748560825],[-0.467003588358578,0.14144841834347271,-0.8728688294402212],[-0.4622623378274607,0.16379234182038016,-0.8714847100134842],[-0.46403783009219707,0.16431828519327465,-0.8704414933781977],[-0.46941956943287483,0.16436977678785572,-0.8675412637518545],[-0.4791625181980786,0.1616059126327716,-0.8627205863755687],[-0.48073788579016996,0.1983300113832694,-0.8541406744504736],[-0.48206867542348253,0.19888096538275024,-0.8532620662984347],[-0.48206867542348253,0.19888096538275024,-0.8532620662984347],[-0.48073788579016996,0.1983300113832694,-0.8541406744504736],[-0.4791625181980786,0.1616059126327716,-0.8627205863755687],[-0.46941956943287483,0.16436977678785572,-0.8675412637518545],[-0.46403783009219707,0.16431828519327465,-0.8704414933781977],[-0.4622623378274607,0.16379234182038016,-0.8714847100134842],[-0.46094325647236134,0.16378064311779017,-0.8721853101563785],[-0.45607682587163506,0.1651033087660764,-0.8744911813948429],[-0.4533587612792798,0.19612923859124773,-0.8694821190461219],[-0.4584970879892608,0.20197674881649097,-0.8654396647039516],[-0.4552675259116364,0.20928934953845416,-0.865407099589591],[-0.454168880242938,0.2154762779142022,-0.864465500685318],[-0.4544661714419175,0.21963750151585365,-0.8632611811860876],[-0.45773048171880953,0.22867002680343207,-0.859181485454141],[-0.4613848392627862,0.23020407756747652,-0.8568139312416438],[-0.46984580324198466,0.23097166837339078,-0.8519958976337308],[-0.47371465692617704,0.2301295150590712,-0.8500793081307126],[-0.47371465692617704,0.2301295150590712,-0.8500793081307126],[-0.46984580324198466,0.23097166837339078,-0.8519958976337308],[-0.4613848392627862,0.23020407756747652,-0.8568139312416438],[-0.45773048171880953,0.22867002680343207,-0.859181485454141],[-0.4544661714419175,0.21963750151585365,-0.8632611811860876],[-0.454168880242938,0.2154762779142022,-0.864465500685318],[-0.4552675259116364,0.20928934953845416,-0.865407099589591],[-0.4584970879892608,0.20197674881649097,-0.8654396647039516],[-0.4533587612792798,0.19612923859124773,-0.8694821190461219],[-0.45607682587163506,0.1651033087660764,-0.8744911813948429],[-0.45034822388433887,0.16503506034145593,-0.8774678946276686],[-0.44814835828202115,0.16565165287647965,-0.8784774208073988],[-0.4355299285633204,0.16544558159649703,-0.8848397825910779],[-0.43566089759698906,0.16113890780238513,-0.8855697796883316],[-0.4272499391605267,0.13173490849920577,-0.8944849933732998],[-0.4295044826966495,0.12803429803269673,-0.8939424578074129],[-0.4258197327117448,0.11854220082694814,-0.8970090868304522],[-0.3875191758721398,0.13154255731579112,-0.9124283226348245],[-0.3333576839117169,0.1384002665363446,-0.9325867363412825],[-0.3337375619489518,0.13894894376958541,-0.9323692566626627],[-0.37598067541365165,0.20959924259167925,-0.9026110398286123],[-0.3758889095336128,0.212366164233135,-0.9020022948854047],[-0.3760610736564114,0.21764584292896216,-0.9006710586757679],[-0.3756204928448391,0.22984128417989297,-0.8978208225707054],[-0.37591943703268726,0.24025318243045732,-0.8949653541858841],[-0.37553244802665364,0.24389910052533065,-0.8941412691750915],[-0.3744398348433958,0.2501925216240037,-0.8928597382600881],[-0.3741195693632586,0.25315384458241524,-0.8921589986054013],[-0.3737775073108465,0.2610065566165323,-0.8900370511566758],[-0.37391935547835253,0.26779917142804976,-0.8879571607803517],[-0.37828045026227425,0.29630679739477517,-0.876986991218811],[-0.41186297542114697,0.30039701746688297,-0.8603083873671353],[-0.43274122277943133,0.3009464102830587,-0.8498036786488415],[-0.4382827173857531,0.3005595189395308,-0.8470963553314332],[-0.4467272723487901,0.300744856361918,-0.8426074266891191],[-0.44594865103822007,0.3102851340440254,-0.8395552014182708],[-0.42881011749320624,0.3693590247349017,-0.8244366524981438],[-0.4290835717862908,0.36983931044520796,-0.8240789846079879],[-0.42475114018269683,0.37852101286679146,-0.8223796639823954],[-0.424499741113875,0.3796330704773167,-0.8219967771191187],[-0.4250249626134106,0.39116369248357713,-0.8162994222943456],[-0.4267096635659645,0.3959777343993095,-0.813093166174339],[-0.42798899075652513,0.39641490350602365,-0.8122072691557993],[-0.44132465249474206,0.39698536199734363,-0.8047578352897431],[-0.4432528082756756,0.39651296633512356,-0.8039306036492506],[-0.4494353650202162,0.39325684544035033,-0.802095322379734],[-0.4524456948143388,0.3961760176398298,-0.7989602344866831],[-0.4592078759611744,0.3989100260568322,-0.7937247115761007],[-0.4620644411321724,0.40356074983206824,-0.7897057511733038],[-0.45649403527806814,0.42490073041000737,-0.7817113054399228],[-0.45741498568547206,0.42504718084832305,-0.781093096194847],[-0.464234184671082,0.4243340048047199,-0.7774492100125663],[-0.464234184671082,0.4243340048047199,-0.7774492100125663],[-0.45741498568547206,0.42504718084832305,-0.781093096194847],[-0.45649403527806814,0.42490073041000737,-0.7817113054399228],[-0.4620644411321724,0.40356074983206824,-0.7897057511733038],[-0.4592078759611744,0.3989100260568322,-0.7937247115761007],[-0.4524456948143388,0.3961760176398298,-0.7989602344866831],[-0.4494353650202162,0.39325684544035033,-0.802095322379734],[-0.4432528082756756,0.39651296633512356,-0.8039306036492506],[-0.4455262958968138,0.4263493076747015,-0.7872309619862315],[-0.44738033387288223,0.42669318604798584,-0.785992214874936],[-0.4495741685818005,0.4264709375524978,-0.7848602463923603],[-0.4468367856867177,0.45584137437417,-0.7697697892005311],[-0.45506372044904353,0.4559796789630248,-0.7648526280950152],[-0.4582660217416825,0.45701653855698937,-0.7623176088760115],[-0.4590564485042439,0.45963205573563826,-0.7602667626740641],[-0.4590564485042439,0.45963205573563826,-0.7602667626740641],[-0.4582660217416825,0.45701653855698937,-0.7623176088760115],[-0.45506372044904353,0.4559796789630248,-0.7648526280950152],[-0.4468367856867177,0.45584137437417,-0.7697697892005311],[-0.4495741685818005,0.4264709375524978,-0.7848602463923603],[-0.44738033387288223,0.42669318604798584,-0.785992214874936],[-0.4455262958968138,0.4263493076747015,-0.7872309619862315],[-0.4432528082756756,0.39651296633512356,-0.8039306036492506],[-0.44132465249474206,0.39698536199734363,-0.8047578352897431],[-0.42798899075652513,0.39641490350602365,-0.8122072691557993],[-0.42783762707504097,0.4280836862451399,-0.7960523364889842],[-0.43048024150508074,0.42783656078373783,-0.7947594849578522],[-0.43339340778850594,0.4566218273878898,-0.7769598836738033],[-0.43328993506458285,0.4571440497976276,-0.7767104672311],[-0.4343831080859502,0.4592153956778049,-0.7748758195879305],[-0.43400265138993094,0.45993402364610914,-0.7746627604830444],[-0.4293375767912483,0.4766869580530156,-0.7670976399241374],[-0.42934622287469604,0.47823270353768077,-0.7661300817552282],[-0.4308001055047672,0.48294967544013795,-0.7623456434514116],[-0.4326591214305724,0.4834837484604353,-0.760953053491194],[-0.4452032701408,0.48354147031103545,-0.7536456028833314],[-0.4489599908237524,0.4825364590912693,-0.7520595004966004],[-0.4537890193062219,0.4799999957562414,-0.7507832776714634],[-0.4552695626498883,0.48131110196779636,-0.7490455583254767],[-0.4584039891322839,0.5097759114967141,-0.7280070760681543],[-0.45165083719279,0.5550872405811302,-0.6984909996607533],[-0.5294386163370786,0.4843216074037508,-0.6965108270033761],[-0.522819571981915,0.5286068176342577,-0.6687559551160872],[-0.5157712579821234,0.5467538781705762,-0.6595757774092169],[-0.5157712579821234,0.5467538781705762,-0.6595757774092169],[-0.522819571981915,0.5286068176342577,-0.6687559551160872],[-0.5294386163370786,0.4843216074037508,-0.6965108270033761],[-0.45165083719279,0.5550872405811302,-0.6984909996607533],[-0.4584039891322839,0.5097759114967141,-0.7280070760681543],[-0.4552695626498883,0.48131110196779636,-0.7490455583254767],[-0.4537890193062219,0.4799999957562414,-0.7507832776714634],[-0.4489599908237524,0.4825364590912693,-0.7520595004966004],[-0.4452032701408,0.48354147031103545,-0.7536456028833314],[-0.4326591214305724,0.4834837484604353,-0.760953053491194],[-0.4308001055047672,0.48294967544013795,-0.7623456434514116],[-0.42934622287469604,0.47823270353768077,-0.7661300817552282],[-0.4293375767912483,0.4766869580530156,-0.7670976399241374],[-0.43400265138993094,0.45993402364610914,-0.7746627604830444],[-0.4343831080859502,0.4592153956778049,-0.7748758195879305],[-0.43328993506458285,0.4571440497976276,-0.7767104672311],[-0.43339340778850594,0.4566218273878898,-0.7769598836738033],[-0.43048024150508074,0.42783656078373783,-0.7947594849578522],[-0.42783762707504097,0.4280836862451399,-0.7960523364889842],[-0.42798899075652513,0.39641490350602365,-0.8122072691557993],[-0.4267096635659645,0.3959777343993095,-0.813093166174339],[-0.4225789965349781,0.39991243804661236,-0.8133246790692543],[-0.4208390621817991,0.40086414302701406,-0.8137582089153764],[-0.4208390621817991,0.40086414302701406,-0.8137582089153764],[-0.4225789965349781,0.39991243804661236,-0.8133246790692543],[-0.4267096635659645,0.3959777343993095,-0.813093166174339],[-0.4250249626134106,0.39116369248357713,-0.8162994222943456],[-0.424499741113875,0.3796330704773167,-0.8219967771191187],[-0.42475114018269683,0.37852101286679146,-0.8223796639823954],[-0.4290835717862908,0.36983931044520796,-0.8240789846079879],[-0.42881011749320624,0.3693590247349017,-0.8244366524981438],[-0.44594865103822007,0.3102851340440254,-0.8395552014182708],[-0.4467272723487901,0.300744856361918,-0.8426074266891191],[-0.4382827173857531,0.3005595189395308,-0.8470963553314332],[-0.43274122277943133,0.3009464102830587,-0.8498036786488415],[-0.41186297542114697,0.30039701746688297,-0.8603083873671353],[-0.37828045026227425,0.29630679739477517,-0.876986991218811],[-0.3268375550356703,0.3689445086445822,-0.8700903183918972],[-0.3172978840456073,0.3788578160547621,-0.8693611493472644],[-0.31110408862199557,0.37974017212266803,-0.8712127453836542],[-0.29890099870797865,0.38088990114877813,-0.8749749003110016],[-0.29158220657347617,0.38088099397310027,-0.8774448616521758],[-0.27418737040081825,0.38323146628396176,-0.8820175333645751],[-0.268997211173857,0.3834419480950334,-0.8835229328216518],[-0.26704064049341353,0.3836083320649609,-0.88404408481433],[-0.2652598461876685,0.3836774348704744,-0.8845500777071401],[-0.2369327313244265,0.38598936771568393,-0.8915576755530702],[-0.23596154684588008,0.3861089200859781,-0.8917634497108184],[-0.18122373600800284,0.3949391841343176,-0.900655871208655],[-0.10189616464328125,0.4757796185709462,-0.8736423330994637],[-0.1098441120226659,0.4837464146931451,-0.8682877848533168],[-0.1262460708562913,0.5025557251235372,-0.8552775413507034],[-0.14326414949974825,0.5254495885036649,-0.8386764056592048],[-0.14862409967987902,0.5343318711020073,-0.8321059599107395],[-0.17971499640920957,0.5920874187198497,-0.7855794095184161],[-0.19498124744746415,0.6164619352189641,-0.7628610591516128],[-0.1997385407125813,0.6225215553634903,-0.7566844973050719],[-0.21799995259191324,0.6415078095103802,-0.7354887837398456],[-0.23875982085862926,0.6610740191128327,-0.711319119100254],[-0.23918418291142393,0.6615658466340525,-0.7107190423876117],[-0.2821456821040892,0.7068447051113909,-0.6486635313673872],[-0.2907048907685972,0.6027038293727374,-0.7431276879128219],[-0.2964972300049623,0.5694890131252025,-0.7666626745375489],[-0.2999096779091948,0.5143215265581513,-0.8034472928669907],[-0.2999096779091948,0.5143215265581513,-0.8034472928669907],[-0.2964972300049623,0.5694890131252025,-0.7666626745375489],[-0.2907048907685972,0.6027038293727374,-0.7431276879128219],[-0.2821456821040892,0.7068447051113909,-0.6486635313673872],[-0.29402672032273447,0.7220486376642283,-0.6262539840859206],[-0.2712799038341997,0.8474433217620022,-0.4563409144232971],[-0.22229774154472748,0.8732433325084369,-0.43362402647186554],[-0.10418183622244948,0.934274653645118,-0.3409941591253633],[-0.028814473136237893,0.9624516596908118,-0.26991948595142756],[-0.016810845291529226,0.9660702022033559,-0.25773195357842466],[-0.017957072679103975,0.9676580460543349,-0.25162561365469954],[-0.01806252331754089,0.9678305052410228,-0.25095389691397507],[-0.04916188901875477,0.9806554460241308,-0.18946768814581721],[-0.09418281730255634,0.991661249494077,-0.0879634195378931],[-0.19989136257920764,0.9786440586090389,0.04795049233799164],[-0.2866087476015172,0.9469377741504069,0.14547947513433931],[-0.2964930528927943,0.9417925520100893,0.15848867014595724],[-0.19325267756890546,0.9258520257312545,0.32473285799527796],[-0.17808957847498202,0.919570378125258,0.35024908524245063],[-0.1624766946265016,0.9127481811499668,0.37482273344965883],[-0.157654847729381,0.9105262003097405,0.38221327493551555],[-0.14811888092929057,0.8910403639477158,0.4290779264051892],[-0.1970054889581374,0.8531620932594659,0.4830147823260607],[-0.24766626050524124,0.8173686678382389,0.5201633245853581],[-0.2531832119237397,0.8145076627138377,0.5219918855503599],[-0.3153685452129408,0.8552455146585662,0.4112150171706738],[-0.3184252014587754,0.8581989683844544,0.40261634559440895],[-0.3184252014587754,0.8581989683844544,0.40261634559440895],[-0.3153685452129408,0.8552455146585662,0.4112150171706738],[-0.2531832119237397,0.8145076627138377,0.5219918855503599],[-0.2578889986211764,0.8119332463838572,0.52369615981668],[-0.2645877335353461,0.8092580129111283,0.5244948043610735],[-0.275644996312108,0.8184199657028242,0.5041910310061914],[-0.29222422218610467,0.8294265110954517,0.47608472634579724],[-0.3326581896547825,0.8516212190671342,0.4050676833446615],[-0.3320463381668927,0.8528692715720831,0.4029382519916195],[-0.33409911383030927,0.8528929958316122,0.40118738738796333],[-0.3345366965070841,0.8530042589426752,0.4005857372845228],[-0.33579923736714884,0.8539975440243486,0.3974003862404037],[-0.33605883203763615,0.8550472744413745,0.3949159655925254],[-0.3354462429583572,0.8556086353607545,0.3942203459757375],[-0.33435926758432,0.8563376096673265,0.39356038729746],[-0.3299544228809345,0.8585013284145241,0.3925627948899476],[-0.3376440031784679,0.8612364013076821,0.3798267870756511],[-0.3391489511058995,0.8622619915500793,0.37614125922565234],[-0.4308282807672101,0.8783748069670578,0.20698959146960505],[-0.414170611026168,0.8902269030660095,0.18962796739856827],[-0.3997570402970627,0.899723258965773,0.17519236858077256],[-0.3421205400025971,0.9254018712507073,0.16304880494508622],[-0.3329616402524784,0.9289752073396187,0.16168367347599352],[-0.3684737637857479,0.9273298753944894,0.06547050941000518],[-0.37965235254887225,0.9245084697329109,0.03388481365181839],[-0.37965235254887225,0.9245084697329109,0.03388481365181839],[-0.3684737637857479,0.9273298753944894,0.06547050941000518],[-0.3329616402524784,0.9289752073396187,0.16168367347599352],[-0.3421205400025971,0.9254018712507073,0.16304880494508622],[-0.4494959664652325,0.8864027050315453,-0.11065089536124888],[-0.45870474189073224,0.8796565907660474,-0.1256751450717736],[-0.4571812207922317,0.8794358952158567,-0.13258143746697532],[-0.5798274643995484,0.8133639908687306,-0.047319445115958925],[-0.5853147112561516,0.8089718522061854,-0.05450900040563551],[-0.5880857011451278,0.8067342508528689,-0.05774994900001045],[-0.5863957138050395,0.8074757787426051,-0.0642100737820921],[-0.5781582448129092,0.8103004617741562,-0.09563579666341188],[-0.6253713431113638,0.7508004258177067,-0.21262503099832625],[-0.623619385744247,0.7502601742417975,-0.21956441576593355],[-0.6237451537530105,0.7489122239166738,-0.22376877359858593],[-0.6236459013374748,0.7488346854263438,-0.22430426578065207],[-0.6231546142092627,0.7488765009602816,-0.22552674586219396],[-0.6217615609445586,0.7498826823033039,-0.22602770651711782],[-0.6147514633296837,0.7541962016626864,-0.2308001900596903],[-0.610716981178413,0.7560729024840949,-0.23532644354088672],[-0.6098285939004484,0.7563183137754628,-0.23683685167060153],[-0.6098285939004484,0.7563183137754628,-0.23683685167060153],[-0.610716981178413,0.7560729024840949,-0.23532644354088672],[-0.6147514633296837,0.7541962016626864,-0.2308001900596903],[-0.6217615609445586,0.7498826823033039,-0.22602770651711782],[-0.6231546142092627,0.7488765009602816,-0.22552674586219396],[-0.6236459013374748,0.7488346854263438,-0.22430426578065207],[-0.6237451537530105,0.7489122239166738,-0.22376877359858593],[-0.623619385744247,0.7502601742417975,-0.21956441576593355],[-0.6253713431113638,0.7508004258177067,-0.21262503099832625],[-0.5781582448129092,0.8103004617741562,-0.09563579666341188],[-0.5863957138050395,0.8074757787426051,-0.0642100737820921],[-0.5880857011451278,0.8067342508528689,-0.05774994900001045],[-0.5853147112561516,0.8089718522061854,-0.05450900040563551],[-0.5798274643995484,0.8133639908687306,-0.047319445115958925],[-0.4571812207922317,0.8794358952158567,-0.13258143746697532],[-0.45870474189073224,0.8796565907660474,-0.1256751450717736],[-0.5706829926830458,0.8204316974112434,-0.03482458535616243],[-0.5606716893310012,0.827783345993256,-0.020542367899802877],[-0.6367158817238516,0.7684618572478183,0.06371232153870911],[-0.645042911261075,0.760875892671912,0.07062236602208888],[-0.645042911261075,0.760875892671912,0.07062236602208888],[-0.6367158817238516,0.7684618572478183,0.06371232153870911],[-0.5606716893310012,0.827783345993256,-0.020542367899802877],[-0.5706829926830458,0.8204316974112434,-0.03482458535616243],[-0.45870474189073224,0.8796565907660474,-0.1256751450717736],[-0.4494959664652325,0.8864027050315453,-0.11065089536124888],[-0.3421205400025971,0.9254018712507073,0.16304880494508622],[-0.3997570402970627,0.899723258965773,0.17519236858077256],[-0.522753973097692,0.852077515812247,0.02630951648752891],[-0.6304555967551355,0.7706905410349496,0.09253015983657847],[-0.6329436593866646,0.7686855166612335,0.09222201753090427],[-0.6340825058137718,0.7678441298687787,0.09140442028143916],[-0.6340825058137718,0.7678441298687787,0.09140442028143916],[-0.6329436593866646,0.7686855166612335,0.09222201753090427],[-0.6304555967551355,0.7706905410349496,0.09253015983657847],[-0.522753973097692,0.852077515812247,0.02630951648752891],[-0.3997570402970627,0.899723258965773,0.17519236858077256],[-0.414170611026168,0.8902269030660095,0.18962796739856827],[-0.4308282807672101,0.8783748069670578,0.20698959146960505],[-0.3391489511058995,0.8622619915500793,0.37614125922565234],[-0.3376440031784679,0.8612364013076821,0.3798267870756511],[-0.3299544228809345,0.8585013284145241,0.3925627948899476],[-0.33435926758432,0.8563376096673265,0.39356038729746],[-0.3354462429583572,0.8556086353607545,0.3942203459757375],[-0.33605883203763615,0.8550472744413745,0.3949159655925254],[-0.33579923736714884,0.8539975440243486,0.3974003862404037],[-0.3345366965070841,0.8530042589426752,0.4005857372845228],[-0.33409911383030927,0.8528929958316122,0.40118738738796333],[-0.3320463381668927,0.8528692715720831,0.4029382519916195],[-0.3326581896547825,0.8516212190671342,0.4050676833446615],[-0.29222422218610467,0.8294265110954517,0.47608472634579724],[-0.275644996312108,0.8184199657028242,0.5041910310061914],],
[[0.4395678316516821,0.2135205320416462,-0.872461519938668],[0.44442938707643065,0.20853807196379057,-0.8712028423074004],[0.46245885260610414,0.12295375734510673,-0.878074133089551],[0.6677604808582135,0.12261201478667143,-0.7342085766551361],[0.6831217116556183,0.1586992481045791,-0.7128529131004092],[0.6985071314950121,0.19503498638469732,-0.6885122666565432],[0.7099264519962147,0.22213438056454504,-0.6683268285257388],[0.712280443750101,0.22764387471297015,-0.6639539409905063],[0.7108967047200361,0.22781042859165637,-0.6653783013016578],[0.44276548194859827,0.26360840526550616,-0.8570118649518232],[0.4398595205587399,0.28013467965745076,-0.8532573840448456],[0.4338725239047142,0.27607958756216644,-0.8576331933478656],[0.42541181222246693,0.27606980646206786,-0.8618644046377557],[0.42276516067066683,0.2780407691735004,-0.86253286870734],[0.42312797632820337,0.28742143364498307,-0.8592738999468459],[0.40957617643364524,0.30113109085318274,-0.8611430902118229],[0.40936550075228123,0.30147053005308677,-0.861124501046942],[0.4083695566732716,0.3024834906902245,-0.8612421512224844],[0.4091336788949845,0.304704173498276,-0.8600959245610854],[0.41018889943352677,0.3201267687270293,-0.8539695069063667],[0.40970561740385886,0.322496275744742,-0.8533097088387629],[0.4069952733521701,0.3282510954324146,-0.8524119108837067],[0.4103870300393156,0.33214057857966145,-0.8492732903113565],[0.4076139802259665,0.38755352507120494,-0.8268331804718704],[0.41920420373371603,0.34210058655392656,-0.8409726655792331],[0.41920420373371603,0.34210058655392656,-0.8409726655792331],[0.4076139802259665,0.38755352507120494,-0.8268331804718704],[0.4103870300393156,0.33214057857966145,-0.8492732903113565],[0.4069952733521701,0.3282510954324146,-0.8524119108837067],[0.40970561740385886,0.322496275744742,-0.8533097088387629],[0.41018889943352677,0.3201267687270293,-0.8539695069063667],[0.4091336788949845,0.304704173498276,-0.8600959245610854],[0.4083695566732716,0.3024834906902245,-0.8612421512224844],[0.40936550075228123,0.30147053005308677,-0.861124501046942],[0.40957617643364524,0.30113109085318274,-0.8611430902118229],[0.42312797632820337,0.28742143364498307,-0.8592738999468459],[0.42276516067066683,0.2780407691735004,-0.86253286870734],[0.42541181222246693,0.27606980646206786,-0.8618644046377557],[0.4338725239047142,0.27607958756216644,-0.8576331933478656],[0.4398595205587399,0.28013467965745076,-0.8532573840448456],[0.44276548194859827,0.26360840526550616,-0.8570118649518232],[0.7108967047200361,0.22781042859165637,-0.6653783013016578],[0.712280443750101,0.22764387471297015,-0.6639539409905063],[0.7160081920581738,0.23521177361874002,-0.6572729193087997],[0.7463605489078431,0.26333142564019424,-0.6112303095432082],[0.7616863033742253,0.27849948482535164,-0.5850401799911877],[0.7716053009754633,0.2888757037711126,-0.566723995678063],[0.7964149710752043,0.31770874067436256,-0.5145720065708903],[0.8184402249592919,0.34799553239665343,-0.45722500762814083],[0.8076120238957821,0.37468303158129934,-0.4553849412354407],[0.7841285057636654,0.43146466880352474,-0.446072556904262],[0.7733397725733104,0.455911680786461,-0.4405566200600379],[0.4744502171794304,0.4961328758755057,-0.727151401630975],[0.4547941658292206,0.5748197011588791,-0.6802533189094488],[0.46745188011639327,0.4884965673370212,-0.7367902303068332],[0.4650203732899789,0.4857299023942114,-0.7401503322605204],[0.4655623559807764,0.48470936084503174,-0.7404785805158917],[0.4680710608571501,0.47588864450991014,-0.7446069298727903],[0.46807649539047114,0.46751303060681376,-0.7498906324763678],[0.4668761221948579,0.46364879114835184,-0.7530315298783739],[0.4715727178868634,0.4590621630342545,-0.7529150697224146],[0.4715727178868634,0.4590621630342545,-0.7529150697224146],[0.4668761221948579,0.46364879114835184,-0.7530315298783739],[0.46372484109776696,0.4626925702832724,-0.7555626096846705],[0.45690443072018005,0.4626692756052902,-0.7597206609005341],[0.4496545267548936,0.4646474180615695,-0.7628326051353271],[0.4496545267548936,0.4646474180615695,-0.7628326051353271],[0.45690443072018005,0.4626692756052902,-0.7597206609005341],[0.46372484109776696,0.4626925702832724,-0.7555626096846705],[0.4668761221948579,0.46364879114835184,-0.7530315298783739],[0.46807649539047114,0.46751303060681376,-0.7498906324763678],[0.4680710608571501,0.47588864450991014,-0.7446069298727903],[0.4655623559807764,0.48470936084503174,-0.7404785805158917],[0.4650203732899789,0.4857299023942114,-0.7401503322605204],[0.45971308060732274,0.4886005837063577,-0.7415749140311663],[0.44924933606609563,0.4915262240634542,-0.7460408870176589],[0.4475627256629818,0.49154278700912857,-0.747043034326953],[0.42868693121105017,0.5387471539649962,-0.7252441100094983],[0.4229217945603536,0.5579217072671734,-0.714045183616508],[0.3922597908929093,0.6752638406188207,-0.6246206864981106],[0.3799308518962932,0.6644187873294538,-0.6435838894977212],[0.3612468035546635,0.64662000853419,-0.6718506615943625],[0.35766436771056553,0.6429146077929961,-0.6773012676472557],[0.353693010373204,0.6377216399871831,-0.6842604506364506],[0.3382051201364095,0.5601622186026939,-0.7561981126421996],[0.23842573724750107,0.5686060627489374,-0.7872993796664247],[0.23253697127111678,0.5640185232932085,-0.7923444089373032],[0.22140999147892396,0.5964703858935959,-0.7714925109327035],[0.22018788683021742,0.5598280665264264,-0.7988177704724192],[0.22515862023768884,0.5576553041990792,-0.7989519118390623],[0.22795300627426623,0.5529436653774868,-0.8014304273294309],[0.22937869231476113,0.5472719373718243,-0.8049092135621634],[0.22845067584044543,0.5371442008436708,-0.8119645289100123],[0.22766212029283364,0.5353183392154636,-0.8133905794164137],[0.22462615468646777,0.5343761684305022,-0.8148528709186137],[0.22571375531143684,0.4808523721763349,-0.8472510235081457],[0.22012009540169652,0.4862265093658149,-0.8456541404086443],[0.17701846214261646,0.49316518419802574,-0.8517350322462911],[0.16955731523481726,0.44068382361996117,-0.8815033093812251],[0.16890840655010525,0.44525426412390307,-0.8793284883797329],[0.1665629237052394,0.5012900887729568,-0.849096601892131],[0.16034455402375913,0.5067446456103535,-0.8470534151635062],[0.15399271043493473,0.5044723363330612,-0.8495845496521022],[0.15099677532770156,0.5042242823210134,-0.8502692790866283],[0.15099677532770156,0.5042242823210134,-0.8502692790866283],[0.15399271043493473,0.5044723363330612,-0.8495845496521022],[0.16034455402375913,0.5067446456103535,-0.8470534151635062],[0.1665629237052394,0.5012900887729568,-0.849096601892131],[0.16890840655010525,0.44525426412390307,-0.8793284883797329],[0.16955731523481726,0.44068382361996117,-0.8815033093812251],[0.17701846214261646,0.49316518419802574,-0.8517350322462911],[0.22012009540169652,0.4862265093658149,-0.8456541404086443],[0.22571375531143684,0.4808523721763349,-0.8472510235081457],[0.22462615468646777,0.5343761684305022,-0.8148528709186137],[0.21501796161695497,0.5338093023454307,-0.8178110447478526],[0.2009792158295566,0.5364176904603373,-0.8196727494346352],[0.2007279289777542,0.5368919450180513,-0.8194237840720976],[0.2007279289777542,0.5368919450180513,-0.8194237840720976],[0.2009792158295566,0.5364176904603373,-0.8196727494346352],[0.21501796161695497,0.5338093023454307,-0.8178110447478526],[0.22462615468646777,0.5343761684305022,-0.8148528709186137],[0.22766212029283364,0.5353183392154636,-0.8133905794164137],[0.22845067584044543,0.5371442008436708,-0.8119645289100123],[0.22937869231476113,0.5472719373718243,-0.8049092135621634],[0.22795300627426623,0.5529436653774868,-0.8014304273294309],[0.22515862023768884,0.5576553041990792,-0.7989519118390623],[0.22018788683021742,0.5598280665264264,-0.7988177704724192],[0.22140999147892396,0.5964703858935959,-0.7714925109327035],[0.21971394918150983,0.6068437012495689,-0.7638497907237974],[0.20908724854101743,0.606871048022776,-0.7668050949030557],[0.2000203731722654,0.6085188349399139,-0.7679171034945099],[0.1986626386557599,0.6418794676496073,-0.7406239970539624],[0.18873333404557768,0.6490479901538136,-0.7369643377378144],[0.18767957981747127,0.6504579715459881,-0.7359896755877872],[0.18345643778658619,0.6536707552158806,-0.7342058833938591],[0.18015783337765062,0.652785520607512,-0.7358085478967],[0.16989308430528094,0.6523382581290824,-0.7386414129239935],[0.16383067600575235,0.6533627323460266,-0.7391053034452078],[0.1591513017674786,0.6551330459082184,-0.7385604615092372],[0.15540195069699364,0.6524966074459873,-0.7416861944185335],[0.15096820132704206,0.6511008301720437,-0.7438254574410273],[0.11341291500390888,0.6570154572082498,-0.7452973901066277],[0.11059947810297867,0.6570890659383275,-0.74565522519972],[0.1099321135405755,0.6588409281703893,-0.7442066660411489],[0.10844649315656439,0.6589522972649978,-0.7443260226884624],[0.07657506701159869,0.6573470404628254,-0.7496873531725967],[0.06543299265345714,0.6668380733661297,-0.7423243949795539],[0.0621084791506535,0.6684087711767231,-0.7411964998781468],[0.06115296335407382,0.6678788409013476,-0.741753442155335],[0.04479197799232785,0.6664132345645145,-0.7442359031280312],[0.04374246537922471,0.6665375676757431,-0.7441869842986046],[0.036502380970488094,0.669009365941593,-0.7423570868968067],[0.033780913542475526,0.6733999369665298,-0.7385061778845927],[-0.004920557309633563,0.6699310898554426,-0.742406979331998],[-0.010920360061502578,0.6761331901247208,-0.7366984830633869],[-0.017148189748404014,0.6807496993251918,-0.7323153599761607],[-0.025310503813314945,0.6886850807955711,-0.7246186844722635],[-0.0323740029802232,0.6941569356090849,-0.7190953154324129],[-0.010114956084985069,0.6945706339560748,-0.7193534055728487],[-0.010114956084985069,0.6945706339560748,-0.7193534055728487],[-0.0323740029802232,0.6941569356090849,-0.7190953154324129],[-0.025310503813314945,0.6886850807955711,-0.7246186844722635],[-0.017148189748404014,0.6807496993251918,-0.7323153599761607],[-0.010920360061502578,0.6761331901247208,-0.7366984830633869],[-0.004920557309633563,0.6699310898554426,-0.742406979331998],[0.033780913542475526,0.6733999369665298,-0.7385061778845927],[0.036502380970488094,0.669009365941593,-0.7423570868968067],[0.04374246537922471,0.6665375676757431,-0.7441869842986046],[0.04479197799232785,0.6664132345645145,-0.7442359031280312],[0.06115296335407382,0.6678788409013476,-0.741753442155335],[0.0621084791506535,0.6684087711767231,-0.7411964998781468],[0.06543299265345714,0.6668380733661297,-0.7423243949795539],[0.07657506701159869,0.6573470404628254,-0.7496873531725967],[0.10844649315656439,0.6589522972649978,-0.7443260226884624],[0.1099321135405755,0.6588409281703893,-0.7442066660411489],[0.11059947810297867,0.6570890659383275,-0.74565522519972],[0.11341291500390888,0.6570154572082498,-0.7452973901066277],[0.15096820132704206,0.6511008301720437,-0.7438254574410273],[0.15540195069699364,0.6524966074459873,-0.7416861944185335],[0.1591513017674786,0.6551330459082184,-0.7385604615092372],[0.16383067600575235,0.6533627323460266,-0.7391053034452078],[0.16989308430528094,0.6523382581290824,-0.7386414129239935],[0.18015783337765062,0.652785520607512,-0.7358085478967],[0.18345643778658619,0.6536707552158806,-0.7342058833938591],[0.18434719720988912,0.6554536213843924,-0.7323910574924737],[0.18523504908909966,0.6639224656381656,-0.724496332778778],[0.1832158009509052,0.6709308600274162,-0.7185288799657186],[0.18205315676975556,0.6727283211250665,-0.7171424224423043],[0.17696936957099252,0.6746962579162773,-0.7165659786700858],[0.1695147419041851,0.6759949604877296,-0.7171440341189144],[0.16245674856229736,0.6757072358220899,-0.719046268542044],[0.14644825425603597,0.7401023305307584,-0.6563546672099618],[0.14665403885403872,0.7113324968389831,-0.6873853881401729],[0.15294130290771252,0.6768421522738209,-0.7200650378752139],[0.15294130290771252,0.6768421522738209,-0.7200650378752139],[0.14665403885403872,0.7113324968389831,-0.6873853881401729],[0.14644825425603597,0.7401023305307584,-0.6563546672099618],[0.16245674856229736,0.6757072358220899,-0.719046268542044],[0.1695147419041851,0.6759949604877296,-0.7171440341189144],[0.17696936957099252,0.6746962579162773,-0.7165659786700858],[0.18205315676975556,0.6727283211250665,-0.7171424224423043],[0.1832158009509052,0.6709308600274162,-0.7185288799657186],[0.18523504908909966,0.6639224656381656,-0.724496332778778],[0.18434719720988912,0.6554536213843924,-0.7323910574924737],[0.18345643778658619,0.6536707552158806,-0.7342058833938591],[0.18767957981747127,0.6504579715459881,-0.7359896755877872],[0.18873333404557768,0.6490479901538136,-0.7369643377378144],[0.1986626386557599,0.6418794676496073,-0.7406239970539624],[0.2000203731722654,0.6085188349399139,-0.7679171034945099],[0.20908724854101743,0.606871048022776,-0.7668050949030557],[0.21971394918150983,0.6068437012495689,-0.7638497907237974],[0.22140999147892396,0.5964703858935959,-0.7714925109327035],[0.23253697127111678,0.5640185232932085,-0.7923444089373032],[0.23842573724750107,0.5686060627489374,-0.7872993796664247],[0.3382051201364095,0.5601622186026939,-0.7561981126421996],[0.353693010373204,0.6377216399871831,-0.6842604506364506],[0.35766436771056553,0.6429146077929961,-0.6773012676472557],[0.3612468035546635,0.64662000853419,-0.6718506615943625],[0.3799308518962932,0.6644187873294538,-0.6435838894977212],[0.19482396303491784,0.6817645099110687,-0.7051530163397796],[0.19482396303491784,0.6817645099110687,-0.7051530163397796],[0.3799308518962932,0.6644187873294538,-0.6435838894977212],[0.3922597908929093,0.6752638406188207,-0.6246206864981106],[0.4229217945603536,0.5579217072671734,-0.714045183616508],[0.42868693121105017,0.5387471539649962,-0.7252441100094983],[0.4475627256629818,0.49154278700912857,-0.747043034326953],[0.44924933606609563,0.4915262240634542,-0.7460408870176589],[0.45971308060732274,0.4886005837063577,-0.7415749140311663],[0.4650203732899789,0.4857299023942114,-0.7401503322605204],[0.46745188011639327,0.4884965673370212,-0.7367902303068332],[0.4547941658292206,0.5748197011588791,-0.6802533189094488],[0.4744502171794304,0.4961328758755057,-0.727151401630975],[0.7733397725733104,0.455911680786461,-0.4405566200600379],[0.687093566376927,0.6201486462875427,-0.37857375444048363],[0.47512273707437547,0.7712997060085778,-0.42350342174064604],[0.3591664318803907,0.859518994052744,-0.3636297197326805],[0.14645983721815817,0.9297169321421016,-0.3378993077387246],[0.14613473593824158,0.9297992141950403,-0.3378136471999704],[0.07580746594710767,0.94806910889039,-0.30889835362860074],[0.04950939634590878,0.9538966749489042,-0.29602356864764745],[0.012493765196164646,0.96117543648615,-0.2756550128818303],[-0.007294723755072322,0.9645464914702384,-0.26381215437843397],[-0.016810845291529226,0.9660702022033559,-0.25773195357842466],[-0.028814473136237893,0.9624516596908118,-0.26991948595142756],[-0.10418183622244948,0.934274653645118,-0.3409941591253633],[-0.22229774154472748,0.8732433325084369,-0.43362402647186554],[-0.2712799038341997,0.8474433217620022,-0.4563409144232971],[-0.29402672032273447,0.7220486376642283,-0.6262539840859206],[-0.2821456821040892,0.7068447051113909,-0.6486635313673872],[-0.23918418291142393,0.6615658466340525,-0.7107190423876117],[-0.23875982085862926,0.6610740191128327,-0.711319119100254],[-0.21799995259191324,0.6415078095103802,-0.7354887837398456],[-0.1997385407125813,0.6225215553634903,-0.7566844973050719],[-0.19498124744746415,0.6164619352189641,-0.7628610591516128],[-0.17971499640920957,0.5920874187198497,-0.7855794095184161],[-0.14862409967987902,0.5343318711020073,-0.8321059599107395],[-0.14326414949974825,0.5254495885036649,-0.8386764056592048],[-0.1262460708562913,0.5025557251235372,-0.8552775413507034],[-0.1098441120226659,0.4837464146931451,-0.8682877848533168],[-0.10189616464328125,0.4757796185709462,-0.8736423330994637],[-0.18122373600800284,0.3949391841343176,-0.900655871208655],[-0.23596154684588008,0.3861089200859781,-0.8917634497108184],[-0.2369327313244265,0.38598936771568393,-0.8915576755530702],[-0.2652598461876685,0.3836774348704744,-0.8845500777071401],[-0.26704064049341353,0.3836083320649609,-0.88404408481433],[-0.268997211173857,0.3834419480950334,-0.8835229328216518],[-0.27418737040081825,0.38323146628396176,-0.8820175333645751],[-0.29158220657347617,0.38088099397310027,-0.8774448616521758],[-0.29211041757899764,0.3520295343955099,-0.8892394001927177],[-0.29327754838559644,0.3384089730982493,-0.8941295468440368],[-0.3027385439273222,0.28146249441689547,-0.9105647908069935],[-0.3027385439273222,0.28146249441689547,-0.9105647908069935],[-0.29327754838559644,0.3384089730982493,-0.8941295468440368],[-0.29211041757899764,0.3520295343955099,-0.8892394001927177],[-0.29158220657347617,0.38088099397310027,-0.8774448616521758],[-0.29890099870797865,0.38088990114877813,-0.8749749003110016],[-0.31110408862199557,0.37974017212266803,-0.8712127453836542],[-0.3172978840456073,0.3788578160547621,-0.8693611493472644],[-0.3268375550356703,0.3689445086445822,-0.8700903183918972],[-0.37828045026227425,0.29630679739477517,-0.876986991218811],[-0.37391935547835253,0.26779917142804976,-0.8879571607803517],[-0.3737775073108465,0.2610065566165323,-0.8900370511566758],[-0.3741195693632586,0.25315384458241524,-0.8921589986054013],[-0.3744398348433958,0.2501925216240037,-0.8928597382600881],[-0.37553244802665364,0.24389910052533065,-0.8941412691750915],[-0.37591943703268726,0.24025318243045732,-0.8949653541858841],[-0.3756204928448391,0.22984128417989297,-0.8978208225707054],[-0.3760610736564114,0.21764584292896216,-0.9006710586757679],[-0.3758889095336128,0.212366164233135,-0.9020022948854047],[-0.37598067541365165,0.20959924259167925,-0.9026110398286123],[-0.3337375619489518,0.13894894376958541,-0.9323692566626627],[-0.3333576839117169,0.1384002665363446,-0.9325867363412825],[-0.3074658875564174,0.10951871072126491,-0.9452356214146272],[-0.30483940942806265,0.10599208455134598,-0.9464875131093967],[-0.29480921446417746,0.09480504367627918,-0.9508414856118519],[-0.2933355746636825,0.0932947514487472,-0.9514464409460175],[-0.2832181078960674,0.10543989889892698,-0.9532418009508163],[-0.2739103291358928,0.11407228395602985,-0.9549663060159358],[-0.27233350371618736,0.11567110657895426,-0.95522492526968],[-0.2595242379919281,0.12990106317236375,-0.9569602309821441],[-0.2545483489600901,0.13484621949871478,-0.9576124660469896],[-0.24015337285289626,0.15081160883943678,-0.958948495043732],[-0.23650839224227727,0.15543625719009194,-0.959115921226266],[-0.2315345456959072,0.16086756260018523,-0.9594338859204763],[-0.2149468730830778,0.18565472268088024,-0.9588170658150036],[-0.19409619467387312,0.22470407002521653,-0.9549003864944366],[-0.18997611940614026,0.23083786016246396,-0.9542656634140194],[-0.1715859627510801,0.2533470126803072,-0.952036526900491],[-0.16161446387155048,0.2625910638219141,-0.9512763522070686],[-0.1547105599004014,0.255394279337864,-0.954378543732411],[-0.15330857863393335,0.2541269398985255,-0.9549429187836592],[-0.14696754305949664,0.24916507213634698,-0.95724464381596],[-0.1106353269632773,0.22880489589005726,-0.967165003525494],[-0.11006575311208647,0.22856526406344357,-0.967286643170202],[-0.07557570970559124,0.2221815034906122,-0.9720718551676862],[-0.07531815072429086,0.22464930294952679,-0.9715245065646902],[-0.07628341198306042,0.26956830290398925,-0.9599550880773986],[-0.07628341198306042,0.26956830290398925,-0.9599550880773986],[-0.07531815072429086,0.22464930294952679,-0.9715245065646902],[-0.07557570970559124,0.2221815034906122,-0.9720718551676862],[-0.056317134414411836,0.21368748616623362,-0.9752774162397614],[-0.03705980509847086,0.20275557668469896,-0.978527846803206],[-0.032881481067034694,0.1999114086687356,-0.9792620879452651],[-0.007314336818854606,0.1760381883372351,-0.9843561635525245],[-0.016186896723256447,0.26986601081250133,-0.96276181923808],[-0.016186896723256447,0.26986601081250133,-0.96276181923808],[-0.007314336818854606,0.1760381883372351,-0.9843561635525245],[-0.006471518028979352,0.17515567395147089,-0.9845194814410768],[-0.005820891381684086,0.17461086448800864,-0.9846203142461936],[0.03718276017998156,0.14228228939571394,-0.9891274905034801],[0.03696080522053988,0.13670761918009527,-0.9899216765661611],[0.037538581456359986,0.12081467253434276,-0.9919650547285744],[0.05766893144298225,-0.06273370379978102,-0.9963627736692023],[0.05808248397566839,-0.06327287608210379,-0.9963046563213057],[0.15228707784626952,-0.0434342214406178,-0.9873814431762893],[0.19529158082341627,-0.035497299617968534,-0.9801026171678776],[0.20850146138934267,-0.03422523775122337,-0.9774230269946481],[0.2162962893662224,0.15963473418462285,-0.9631888012472987],[0.2083340864571732,0.15867402534566066,-0.9651007523055093],[0.19655256555544073,0.16056553615250937,-0.9672568415749931],[0.19196787911551785,0.16263538082129922,-0.967831631169906],[0.19024067001295805,0.1664040197160609,-0.9675320096489612],[0.1883302595354247,0.17784431376964227,-0.9658690974470219],[0.1883302595354247,0.17784431376964227,-0.9658690974470219],[0.19024067001295805,0.1664040197160609,-0.9675320096489612],[0.19196787911551785,0.16263538082129922,-0.967831631169906],[0.19655256555544073,0.16056553615250937,-0.9672568415749931],[0.2083340864571732,0.15867402534566066,-0.9651007523055093],[0.2162962893662224,0.15963473418462285,-0.9631888012472987],[0.20850146138934267,-0.03422523775122337,-0.9774230269946481],[0.21423155384203613,-0.03384236444057404,-0.9761964636831554],[0.2375844721440071,-0.03156322591963661,-0.9708539444044091],[0.2468117044937508,-0.02085000638636892,-0.9688391299687363],[0.2477801706240775,-0.019573973992096316,-0.9686185248009971],[0.2737831467454209,0.010754211106593466,-0.9617313218886293],[0.2796396706824689,0.01876037067664192,-0.9599217171585792],[0.2919990171516742,0.038832943658786936,-0.9556299369888167],[0.3386183796882073,0.12397820358018659,-0.9327202141984288],[0.33813997178883975,0.12507388838357267,-0.932747490976661],[0.33813997178883975,0.12507388838357267,-0.932747490976661],[0.3386183796882073,0.12397820358018659,-0.9327202141984288],[0.3876822448795822,0.12471007102476603,-0.9133180580663702],[0.392894694259436,0.1244428674389574,-0.9111244327567747],[0.4090501698253804,0.12465023397798303,-0.9039581172460711],[0.41703669355159384,0.12369727604243329,-0.9004328848566316],[0.4297700924691179,0.12469521316380515,-0.8942867389339503],[0.44527033015499057,0.12277743223729111,-0.8869385746582924],[0.4537760547265541,0.12228792685730416,-0.8826850826323883],[0.46245885260610414,0.12295375734510673,-0.878074133089551],[0.44442938707643065,0.20853807196379057,-0.8712028423074004],[0.4395678316516821,0.2135205320416462,-0.872461519938668],[0.4309459296674773,0.17630103165020333,-0.8849878823702095],[0.4268478938935242,0.2216759416946531,-0.8767329424359801],[0.41622428582927207,0.22058763535918396,-0.88209888278614],[0.41200533321443517,0.22143153181661768,-0.8838663259340797],[0.4054887288355609,0.22468767706348214,-0.8860554940652066],[0.4034482582880476,0.22938479910396192,-0.8857833351471317],[0.40275382063826487,0.23323874674672473,-0.8850926770555148],[0.40275382063826487,0.23323874674672473,-0.8850926770555148],[0.4034482582880476,0.22938479910396192,-0.8857833351471317],[0.4054887288355609,0.22468767706348214,-0.8860554940652066],[0.41200533321443517,0.22143153181661768,-0.8838663259340797],[0.41622428582927207,0.22058763535918396,-0.88209888278614],[0.4268478938935242,0.2216759416946531,-0.8767329424359801],[0.4309459296674773,0.17630103165020333,-0.8849878823702095],[0.4395678316516821,0.2135205320416462,-0.872461519938668],[0.43782501321969336,0.21757846771163455,-0.8723352957363543],[0.4323938178328567,0.22407174552563175,-0.8733999308203677],[0.4330409841593421,0.22598734740875892,-0.8725853682302159],[0.43370306482010795,0.23471048788669782,-0.8699497907590034],[0.4316377939099101,0.24556086895776624,-0.8679796509741992],[0.4294681289276009,0.25033786249354156,-0.8676912358884297],[0.4229741432855594,0.2536360142850025,-0.8699204827853321],[0.4167089022438245,0.25492696187400476,-0.8725628544124695],[0.41431280435387113,0.25473024426737173,-0.8737604951037304],[0.4047383708200129,0.2764885875437908,-0.871631178965049],[0.40030716789692766,0.2764852777296035,-0.8736761771555437],[0.39662212240483025,0.27931106339728323,-0.874457673008229],[0.38822256445758624,0.27919162657290497,-0.8782569533442653],[0.38781605959688914,0.27945386689618035,-0.8783531409379226],[0.38819415052851713,0.3026522375091778,-0.8704636262510521],[0.38328880938569815,0.305148235262886,-0.8717650159966506],[0.3817451691712863,0.3083427129670897,-0.8713181951356697],[0.3817451691712863,0.3083427129670897,-0.8713181951356697],[0.38328880938569815,0.305148235262886,-0.8717650159966506],[0.38819415052851713,0.3026522375091778,-0.8704636262510521],[0.38781605959688914,0.27945386689618035,-0.8783531409379226],[0.38822256445758624,0.27919162657290497,-0.8782569533442653],[0.39662212240483025,0.27931106339728323,-0.874457673008229],[0.40030716789692766,0.2764852777296035,-0.8736761771555437],[0.4047383708200129,0.2764885875437908,-0.871631178965049],[0.41431280435387113,0.25473024426737173,-0.8737604951037304],[0.4167089022438245,0.25492696187400476,-0.8725628544124695],[0.4229741432855594,0.2536360142850025,-0.8699204827853321],[0.4294681289276009,0.25033786249354156,-0.8676912358884297],[0.4316377939099101,0.24556086895776624,-0.8679796509741992],[0.43370306482010795,0.23471048788669782,-0.8699497907590034],[0.4330409841593421,0.22598734740875892,-0.8725853682302159],[0.4323938178328567,0.22407174552563175,-0.8733999308203677],[0.43782501321969336,0.21757846771163455,-0.8723352957363543],[0.4395678316516821,0.2135205320416462,-0.872461519938668],],
[[-0.7854072252410343,-0.07590956336109288,-0.6143071127127762],[-0.7862826408647579,-0.07695245998062183,-0.6130562189372792],[-0.7863777241066233,-0.07716793011663815,-0.612907159030143],[-0.7923081995661373,-0.08414027258831348,-0.6042914292202316],[-0.7927429301020741,-0.08907142882501623,-0.6030132066051691],[-0.7978544397583078,-0.08890837765322916,-0.596257992265955],[-0.8004566293510376,-0.08193857600443519,-0.5937636350353068],[-0.8030141993308022,-0.07885991008895295,-0.5907193159647592],[-0.8057535413816388,-0.07299455218760609,-0.5877355067561247],[-0.8077632094642955,-0.07011248827688465,-0.585322848027962],[-0.8082606142180789,-0.0696235409744125,-0.5846942295302718],[-0.8107863669519506,-0.06603361379268075,-0.5816055613681287],[-0.8166510289493885,-0.05463182190926027,-0.5745402170003246],[-0.8376819651725965,-0.027293105270538933,-0.5454759496341413],[-0.8663409503182499,0.008161160048567635,-0.4993863767348218],[-0.8615873596962635,0.03722377440324357,-0.5062426416559532],[-0.9216673232897667,0.03973631126361765,-0.38594089022418654],[-0.9232299948687823,0.04356169844830237,-0.381770552823142],[-0.9234689870490775,0.045334984151180896,-0.38098526109360575],[-0.9253526611459003,0.050709701672213,-0.37570065034082106],[-0.9263902880586846,0.04944172309869808,-0.3733049024692538],[-0.929312612698729,0.04802455357418788,-0.3661580398312486],[-0.929312612698729,0.04802455357418788,-0.3661580398312486],[-0.9263902880586846,0.04944172309869808,-0.3733049024692538],[-0.9253526611459003,0.050709701672213,-0.37570065034082106],[-0.9234689870490775,0.045334984151180896,-0.38098526109360575],[-0.9232299948687823,0.04356169844830237,-0.381770552823142],[-0.9216673232897667,0.03973631126361765,-0.38594089022418654],[-0.8615873596962635,0.03722377440324357,-0.5062426416559532],[-0.857415380893341,0.05860731736605375,-0.5112768789596119],[-0.8461627377428491,0.09901411624336738,-0.5236457065994826],[-0.8149816170291438,0.18739676664805555,-0.5483497203012109],[-0.8108345636565177,0.3226124202042432,-0.4883324039114192],[-0.8397216732140153,0.3257020351008104,-0.4344947593076872],[-0.8585254598851632,0.3250535609462154,-0.3965781351072626],[-0.8824035675815783,0.32192141307752864,-0.3431188536374389],[-0.891618510952237,0.3210358053438165,-0.31929992579792904],[-0.8990023446735687,0.32104037538020663,-0.29787222369190797],[-0.9117977046729736,0.3212612985305963,-0.25576575966992143],[-0.9103779406873047,0.33342430690517066,-0.24503109328154424],[-0.9076077801659068,0.35260536842861945,-0.2278542769790211],[-0.9074235483634671,0.3536838846377154,-0.22691455136907765],[-0.9062236462127126,0.36028558487118145,-0.22125324942013214],[-0.8998050191124862,0.3896736310006229,-0.1962279003678348],[-0.878238146767073,0.46053630838240966,-0.12885676631298512],[-0.8711628901044141,0.47904499522055943,-0.10766202421958644],[-0.8688928912426878,0.4847255212026208,-0.10033101535801617],[-0.8625392376905483,0.4997746395866658,-0.07906562508591254],[-0.9067734491899679,0.42161796807962343,0.0004481478979167225],[-0.9129563217976635,0.4077396149479267,0.016098474828306328],[-0.9162842717801298,0.399700389910281,0.02574357383749661],[-0.9187783981239991,0.39327535117019724,0.03436209106932196],[-0.9189173274799664,0.39290116622695154,0.03492304159974965],[-0.9266708445385878,0.36851943976680557,0.07399032636838529],[-0.9130170886801666,0.39828180471248376,0.0881555432911608],[-0.8891515774003084,0.4452537179231939,0.10563427039610103],[-0.8891515774003084,0.4452537179231939,0.10563427039610103],[-0.9130170886801666,0.39828180471248376,0.0881555432911608],[-0.9266708445385878,0.36851943976680557,0.07399032636838529],[-0.9189173274799664,0.39290116622695154,0.03492304159974965],[-0.9187783981239991,0.39327535117019724,0.03436209106932196],[-0.9162842717801298,0.399700389910281,0.02574357383749661],[-0.9129563217976635,0.4077396149479267,0.016098474828306328],[-0.9067734491899679,0.42161796807962343,0.0004481478979167225],[-0.8625392376905483,0.4997746395866658,-0.07906562508591254],[-0.8485912312077443,0.5248445717571337,-0.06656649167858925],[-0.8334735793171657,0.549898237788606,-0.054163831633462646],[-0.8162309500754792,0.5762621115803098,-0.04109762640206008],[-0.7928255200268097,0.6090042699904955,-0.023270022079114636],[-0.763132614050857,0.6104364428712651,0.2121225178678176],[-0.8769472418835351,0.4657616643675511,0.11844664181997425],[-0.8785050632067928,0.4625412970925046,0.11951737281254435],[-0.8791586828088122,0.4613430317336006,0.11934243802069908],[-0.8791586828088122,0.4613430317336006,0.11934243802069908],[-0.8785050632067928,0.4625412970925046,0.11951737281254435],[-0.8769472418835351,0.4657616643675511,0.11844664181997425],[-0.763132614050857,0.6104364428712651,0.2121225178678176],[-0.7607822479706298,0.6096838518079752,0.22247690221087257],[-0.7565800667278849,0.6080238250562323,0.2406109531879573],[-0.7539331661231927,0.60712434355544,0.25096775187628084],[-0.752135074135724,0.6064164953500627,0.2579764803663241],[-0.7474755968343706,0.6048125731615898,0.2747398469147829],[-0.7437722469862452,0.6030746404867989,0.28827733628356944],[-0.7409818702714354,0.6018960879135042,0.29776999056900477],[-0.7683394758574119,0.5373430176078855,0.3477311192102443],[-0.7122026871746372,0.5023340991787774,0.4903343605984311],[-0.7065591181705326,0.4759636868542899,0.5236723988584381],[-0.7051043207797927,0.471006575384877,0.5300761292134154],[-0.7039356923630835,0.46738227755057776,0.534816181177179],[-0.7828226529769929,0.39096892380264014,0.4840785004590349],[-0.7892642328419398,0.3810614792767764,0.4815123256655213],[-0.7894243668672318,0.38098836143753545,0.4813076328559646],[-0.7899434784274126,0.38405761268324407,0.47800528347503357],[-0.7903919623937715,0.3848511860880317,0.47662365693485903],[-0.7908668697097605,0.3851653106355626,0.47558098982034097],[-0.7908668697097605,0.3851653106355626,0.47558098982034097],[-0.7903919623937715,0.3848511860880317,0.47662365693485903],[-0.7899434784274126,0.38405761268324407,0.47800528347503357],[-0.7894243668672318,0.38098836143753545,0.4813076328559646],[-0.7900200981751905,0.37980870594163424,0.48126249736521504],[-0.7918649350365794,0.37707416083982787,0.48038005983434984],[-0.7934797392335409,0.3753477051065758,0.479065761349211],[-0.7940651427973782,0.3749163127341921,0.4784331797022202],[-0.7941167551520398,0.3747934047638445,0.4784438137674268],[-0.7942333830797773,0.3743688154592034,0.4785826190046235],[-0.7942333830797773,0.3743688154592034,0.4785826190046235],[-0.7941167551520398,0.3747934047638445,0.4784438137674268],[-0.7940651427973782,0.3749163127341921,0.4784331797022202],[-0.7934797392335409,0.3753477051065758,0.479065761349211],[-0.7918649350365794,0.37707416083982787,0.48038005983434984],[-0.7900200981751905,0.37980870594163424,0.48126249736521504],[-0.7894243668672318,0.38098836143753545,0.4813076328559646],[-0.7892642328419398,0.3810614792767764,0.4815123256655213],[-0.7828226529769929,0.39096892380264014,0.4840785004590349],[-0.7039356923630835,0.46738227755057776,0.534816181177179],[-0.7007202551557944,0.4587762258019522,0.5463657187757249],[-0.6979828361461623,0.4521818685527941,0.5552940826242104],[-0.6933505930543071,0.4421045317815891,0.5690417718317545],[-0.6989571270441555,0.4031643822643246,0.5906923187477606],[-0.702533288450969,0.39512449558641605,0.5918814168444959],[-0.7371683150914935,0.3330404162196434,0.5879344830756359],[-0.7503140997633075,0.31756807610790816,0.5798096832008753],[-0.7574174831104159,0.3084767684394735,0.5754657588526205],[-0.7610618623732425,0.3033500868453814,0.5733790774451675],[-0.7690106234196457,0.291315621022435,0.5689972495680808],[-0.8108174574068574,0.24278827590924038,0.5325682152037405],[-0.8197142453509196,0.2140726629827123,0.5312640124573305],[-0.8248610590911145,0.2122524113359704,0.5239781933221563],[-0.878194102514951,0.25938796094472066,0.4018619215911104],[-0.8799703815632717,0.258109454628012,0.39878770919252315],[-0.8802554154362596,0.258092021654665,0.39816945130603126],[-0.8812157479715399,0.2574453219579161,0.3964602271715847],[-0.8812614086630467,0.2576973794285443,0.3961948892109583],[-0.8822264225067521,0.2597942824822222,0.3926620305306909],[-0.8828378065785961,0.26026136395696436,0.39097497324861336],[-0.8840554390792953,0.26022599618059905,0.3882375710130708],[-0.8840554390792953,0.26022599618059905,0.3882375710130708],[-0.8828378065785961,0.26026136395696436,0.39097497324861336],[-0.8822264225067521,0.2597942824822222,0.3926620305306909],[-0.8812614086630467,0.2576973794285443,0.3961948892109583],[-0.8812157479715399,0.2574453219579161,0.3964602271715847],[-0.8802554154362596,0.258092021654665,0.39816945130603126],[-0.8799703815632717,0.258109454628012,0.39878770919252315],[-0.878194102514951,0.25938796094472066,0.4018619215911104],[-0.8248610590911145,0.2122524113359704,0.5239781933221563],[-0.8197142453509196,0.2140726629827123,0.5312640124573305],[-0.8180878604101247,0.18311577857284625,0.545161319507579],[-0.8150845254614142,0.11229512466421987,0.5683546615714423],[-0.8199397573620163,0.08767558615888248,0.5656958422056982],[-0.8200543615614192,0.0869852423546081,0.5656362892324035],[-0.8201042452547357,0.08667123220928644,0.565612167852217],[-0.8209285484175968,0.08059588533643311,0.5653146218344384],[-0.8233039367067058,0.05718454902973312,0.5647128076779442],[-0.8246797572174754,0.025073042770834376,0.5650439279931586],[-0.8706038238163462,-0.04536521442018036,0.4898887417332303],[-0.8855476606178604,-0.05037411541286284,0.46180925637172593],[-0.8873991072584562,0.08357364715065085,0.4533632869331542],[-0.8867526041442592,0.09882453115331266,0.45155678611410854],[-0.8867817279468709,0.09894147867667705,0.45147397574703513],[-0.8865673463853594,0.09951891005491495,0.45176800115181237],[-0.8858950589062635,0.10237180648899745,0.45244884555234216],[-0.8854223139446614,0.10694279577952591,0.45231688493769506],[-0.8854294846930102,0.10760802703602457,0.45214504327006044],[-0.8857709399267537,0.1081518141056956,0.45134579546831094],[-0.8700322005594859,0.1778183497124491,0.4598093131888041],[-0.8697669216762195,0.1781054186286543,0.4601999150510406],[-0.8889940355268705,0.19018237111813105,0.416557643686363],[-0.8964587748608376,0.1972481224639063,0.396805800309761],[-0.8945203380345407,0.20478483997199393,0.39736196868877116],[-0.8995059538494677,0.19477638080195975,0.3910897601204221],[-0.8995686615250411,0.19497332676959367,0.39084731680087464],[-0.9004220784344525,0.1962194460821366,0.38824993193431495],[-0.901986522657516,0.1968717086058536,0.3842679316503191],[-0.9024062919015483,0.19676226329124907,0.38333731370817903],[-0.9027834935759191,0.19604979932734798,0.38281384498286497],[-0.9027834935759191,0.19604979932734798,0.38281384498286497],[-0.9024062919015483,0.19676226329124907,0.38333731370817903],[-0.901986522657516,0.1968717086058536,0.3842679316503191],[-0.9004220784344525,0.1962194460821366,0.38824993193431495],[-0.8995686615250411,0.19497332676959367,0.39084731680087464],[-0.8995059538494677,0.19477638080195975,0.3910897601204221],[-0.8945203380345407,0.20478483997199393,0.39736196868877116],[-0.8964587748608376,0.1972481224639063,0.396805800309761],[-0.8889940355268705,0.19018237111813105,0.416557643686363],[-0.8697669216762195,0.1781054186286543,0.4601999150510406],[-0.8700322005594859,0.1778183497124491,0.4598093131888041],[-0.8857709399267537,0.1081518141056956,0.45134579546831094],[-0.8866867337886836,0.10885022064995162,0.4493754172043827],[-0.8880663497123406,0.10895904455774734,0.4466162615911582],[-0.8890075943566487,0.10847764147914013,0.44485739116634615],[-0.8891944251047089,0.10800087890688263,0.44459991511250546],[-0.8899013191750101,0.10510462463851272,0.4438791051741164],[-0.8899013191750101,0.10510462463851272,0.4438791051741164],[-0.8891944251047089,0.10800087890688263,0.44459991511250546],[-0.8890075943566487,0.10847764147914013,0.44485739116634615],[-0.8880663497123406,0.10895904455774734,0.4466162615911582],[-0.8866867337886836,0.10885022064995162,0.4493754172043827],[-0.8857709399267537,0.1081518141056956,0.45134579546831094],[-0.8854294846930102,0.10760802703602457,0.45214504327006044],[-0.8854223139446614,0.10694279577952591,0.45231688493769506],[-0.8858950589062635,0.10237180648899745,0.45244884555234216],[-0.8865673463853594,0.09951891005491495,0.45176800115181237],[-0.8867817279468709,0.09894147867667705,0.45147397574703513],[-0.8867526041442592,0.09882453115331266,0.45155678611410854],[-0.8873991072584562,0.08357364715065085,0.4533632869331542],[-0.8855476606178604,-0.05037411541286284,0.46180925637172593],[-0.8936830178531082,-0.05369919142206288,0.4454739727992845],[-0.9040240837909237,-0.05899750240799356,0.4233907776931375],[-0.9238961389574024,-0.0717535242612513,0.3758554990627306],[-0.9256141479124641,-0.21081690970419348,0.3143162098382089],[-0.9305191838135687,-0.227046019534128,0.287374587548444],[-0.9430218129108234,-0.24893925655595864,0.22076935231084596],[-0.9454991095442371,-0.2555483465149018,0.20180801878159982],[-0.9405541260246727,-0.32684843357519544,0.09234737401466951],[-0.9419920859817175,-0.32308824734917435,0.09091146447314175],[-0.9820280037015665,-0.18108472242711054,0.053191383225221746],[-0.9955013408681314,-0.08454905654529024,0.0427614004337315],[-0.997071692711016,-0.062218918679846885,0.04446173357731257],[-0.9926555489064491,-0.06470975426531438,0.1022135457175746],[-0.9841108795149337,-0.12219549320641475,0.12881784915292055],[-0.9645109549801839,-0.20147788488013282,0.17066130090750375],[-0.9884564546791177,-0.03203733399064949,0.14807918973968298],[-0.9893438294674641,-0.022607110401279735,0.1438322135474445],[-0.9892976917198194,-0.021021507504766928,0.1443889655758507],[-0.9888679772973868,-0.017144467674961524,0.14780456929309466],[-0.988154736736248,-0.019091759269998818,0.15226858176818014],[-0.9868779136546179,-0.017671510985842995,0.1604982904587651],[-0.9867983132344228,-0.015969746697617495,0.16116468654178512],[-0.9867983132344228,-0.015969746697617495,0.16116468654178512],[-0.9868779136546179,-0.017671510985842995,0.1604982904587651],[-0.988154736736248,-0.019091759269998818,0.15226858176818014],[-0.9888679772973868,-0.017144467674961524,0.14780456929309466],[-0.9890214671838942,-0.015315190586598276,0.14697612862881407],[-0.9891860372969249,-0.010771509456214488,0.1462701548534132],[-0.9891592853745126,-0.008002065895699064,0.14662835707592364],[-0.9889918340721927,-0.005036855582179634,0.14788435422438942],[-0.9888581536966234,-0.004634845659773174,0.1487886758910608],[-0.9879834005997132,-0.003742963453929631,0.1545146930359993],[-0.9870424280940628,-0.00458172964158729,0.1603940550508907],[-0.9870371039797121,-0.004594986114027126,0.16042643631881479],[-0.9868072964371123,-0.0031388013531259704,0.16186879756315897],[-0.9868072964371123,-0.0031388013531259704,0.16186879756315897],[-0.9870371039797121,-0.004594986114027126,0.16042643631881479],[-0.9870424280940628,-0.00458172964158729,0.1603940550508907],[-0.9879834005997132,-0.003742963453929631,0.1545146930359993],[-0.9888581536966234,-0.004634845659773174,0.1487886758910608],[-0.9889918340721927,-0.005036855582179634,0.14788435422438942],[-0.9891592853745126,-0.008002065895699064,0.14662835707592364],[-0.9891860372969249,-0.010771509456214488,0.1462701548534132],[-0.9890214671838942,-0.015315190586598276,0.14697612862881407],[-0.9888679772973868,-0.017144467674961524,0.14780456929309466],[-0.9892976917198194,-0.021021507504766928,0.1443889655758507],[-0.9893438294674641,-0.022607110401279735,0.1438322135474445],[-0.9884564546791177,-0.03203733399064949,0.14807918973968298],[-0.9645109549801839,-0.20147788488013282,0.17066130090750375],[-0.9841108795149337,-0.12219549320641475,0.12881784915292055],[-0.989581721338373,-0.024452974017695382,0.14188047383157712],[-0.9951779700047367,-0.029712190090586198,0.09347723667969875],[-0.9950626317486585,-0.0330047262890002,0.09360046442204188],[-0.9971004556329052,-0.03428696441860396,0.06793442019779375],[-0.9985527301055941,-0.03284697810907211,0.042585457937737214],[-0.9985877855741224,-0.036840688201172374,0.038277907401457534],[-0.9993648801584883,0.006279718372483999,0.03507707859803344],[-0.9914715891473302,0.12280566140793835,0.04362175420391152],[-0.9912302382492745,0.12036798040239506,0.05453589711497799],[-0.9885586102929835,0.12477348755074456,0.0847552406641003],[-0.9858747406534475,0.1260963984075296,0.11023018665568543],[-0.980026237548174,0.12653214626294257,0.15342160760226578],[-0.9799936430370688,0.1265410820377013,0.15362231011041938],[-0.9766593493266157,0.12829203352253707,0.17227207988401358],[-0.9718361927455951,0.13080395704359116,0.1960222928431483],[-0.9577367506290146,0.13709458480875708,0.25287425988164824],[-0.9458671078627245,0.05699922134708332,0.3195097854983965],[-0.9304094807514618,0.09185550348867201,0.35482497742779884],[-0.9102703478439903,0.1755326685655557,0.3749615661667683],[-0.9081201392060729,0.18468033133231257,0.3757805050655633],[-0.9081201392060729,0.18468033133231257,0.3757805050655633],[-0.9102703478439903,0.1755326685655557,0.3749615661667683],[-0.9304094807514618,0.09185550348867201,0.35482497742779884],[-0.9458671078627245,0.05699922134708332,0.3195097854983965],[-0.9577367506290146,0.13709458480875708,0.25287425988164824],[-0.9403565572207331,0.21340476077134785,0.2649300914809301],[-0.9402238629848206,0.2138864900007846,0.2650125598326344],[-0.93865526786605,0.21932204006377903,0.26612803469303264],[-0.9355165903593773,0.22945323774968848,0.2686259869196394],[-0.9354892513127485,0.22953832386130094,0.26864850373165655],[-0.9513271069777922,0.26719374277770935,0.153571609842782],[-0.9513271069777922,0.26719374277770935,0.153571609842782],[-0.9354892513127485,0.22953832386130094,0.26864850373165655],[-0.9355165903593773,0.22945323774968848,0.2686259869196394],[-0.93865526786605,0.21932204006377903,0.26612803469303264],[-0.9402238629848206,0.2138864900007846,0.2650125598326344],[-0.9403565572207331,0.21340476077134785,0.2649300914809301],[-0.9577367506290146,0.13709458480875708,0.25287425988164824],[-0.9718361927455951,0.13080395704359116,0.1960222928431483],[-0.9766593493266157,0.12829203352253707,0.17227207988401358],[-0.9799936430370688,0.1265410820377013,0.15362231011041938],[-0.980026237548174,0.12653214626294257,0.15342160760226578],[-0.9858747406534475,0.1260963984075296,0.11023018665568543],[-0.9643959697581324,0.23316721636866183,0.12479368062991494],[-0.9643959697581324,0.23316721636866183,0.12479368062991494],[-0.9858747406534475,0.1260963984075296,0.11023018665568543],[-0.9885586102929835,0.12477348755074456,0.0847552406641003],[-0.9912302382492745,0.12036798040239506,0.05453589711497799],[-0.9914715891473302,0.12280566140793835,0.04362175420391152],[-0.9915045207420836,0.12362261316177227,0.04045040003592022],[-0.9915235240981436,0.12512158846174526,0.03500984519828449],[-0.962853384854428,0.2653378122855598,0.05009196188894945],[-0.9609798530011943,0.27638017699228695,0.011476928662118387],[-0.9609798530011943,0.27638017699228695,0.011476928662118387],[-0.962853384854428,0.2653378122855598,0.05009196188894945],[-0.9915235240981436,0.12512158846174526,0.03500984519828449],[-0.9915045207420836,0.12362261316177227,0.04045040003592022],[-0.9914715891473302,0.12280566140793835,0.04362175420391152],[-0.9993648801584883,0.006279718372483999,0.03507707859803344],[-0.9985877855741224,-0.036840688201172374,0.038277907401457534],[-0.9985527301055941,-0.03284697810907211,0.042585457937737214],[-0.9971004556329052,-0.03428696441860396,0.06793442019779375],[-0.9950626317486585,-0.0330047262890002,0.09360046442204188],[-0.9951779700047367,-0.029712190090586198,0.09347723667969875],[-0.989581721338373,-0.024452974017695382,0.14188047383157712],[-0.9841108795149337,-0.12219549320641475,0.12881784915292055],[-0.9926555489064491,-0.06470975426531438,0.1022135457175746],[-0.997071692711016,-0.062218918679846885,0.04446173357731257],[-0.9955013408681314,-0.08454905654529024,0.0427614004337315],[-0.9820280037015665,-0.18108472242711054,0.053191383225221746],[-0.9419920859817175,-0.32308824734917435,0.09091146447314175],[-0.9405541260246727,-0.32684843357519544,0.09234737401466951],[-0.936363983929088,-0.3441514261202378,0.06915407073956784],[-0.9128736708375342,-0.4081177596935738,-0.01007746566869545],[-0.926491038150601,-0.32437861580729965,-0.19076915325482305],[-0.9223341351571572,-0.3246317056579326,-0.20955667206156967],[-0.8080360091606227,-0.4125231234038779,-0.420597765753556],[-0.7868414176910878,-0.4235421844832416,-0.4488792725990395],[-0.7744113357314992,-0.4294493485399881,-0.4646077271517715],[-0.76594095973617,-0.4332046283098759,-0.4750454675179388],[-0.7653500005233503,-0.43344258090174276,-0.4757803124974215],[-0.7385358050513932,-0.44510271002696566,-0.5064073875682912],[-0.7369187547788566,-0.4458268506864278,-0.5081231819767732],[-0.7848027502671135,-0.13930239594891125,-0.603886980863197],[-0.7878239510189935,-0.13202336996185976,-0.6015839525658382],[-0.7901805412779318,-0.13343929610378238,-0.5981711013088494],[-0.7956581749718125,-0.13410364238882438,-0.5907150596510767],[-0.7984102118004638,-0.13318661494582307,-0.5871988243278521],[-0.8021943507211963,-0.1301754420471216,-0.5826993890153266],[-0.8021943507211963,-0.1301754420471216,-0.5826993890153266],[-0.7984102118004638,-0.13318661494582307,-0.5871988243278521],[-0.7956581749718125,-0.13410364238882438,-0.5907150596510767],[-0.7901805412779318,-0.13343929610378238,-0.5981711013088494],[-0.7878239510189935,-0.13202336996185976,-0.6015839525658382],[-0.7848027502671135,-0.13930239594891125,-0.603886980863197],[-0.7369187547788566,-0.4458268506864278,-0.5081231819767732],[-0.7196787198356135,-0.45360778158904147,-0.5256448617628077],[-0.5096042641185538,-0.5306641074523782,-0.6772732824008033],[-0.5376637683783434,-0.32863082800764476,-0.7764788799807816],[-0.7407227077898727,-0.15112710879520594,-0.6545918324816167],[-0.7578491648686817,-0.1285930206645961,-0.6396315176288583],[-0.7603357467766497,-0.12599025307849693,-0.6371938545708132],[-0.7668691270350565,-0.1141318612784112,-0.6315739546890895],[-0.7690700128514535,-0.11252271130856809,-0.6291819727014069],[-0.7760676779384881,-0.10349320906923716,-0.622099762848142],[-0.7762773743499211,-0.10239808152480223,-0.6220193493553337],[-0.7814947813510006,-0.09627670693562736,-0.6164387256027829],[-0.7833733302531422,-0.10568968215776843,-0.6124997277823816],[-0.7880851863393195,-0.1111721833887889,-0.6054440392910724],[-0.7882152433019102,-0.11146017700254042,-0.6052217438006281],[-0.7900163108416371,-0.10978549737294648,-0.603176071450737],[-0.7992417972454245,-0.10567732845318503,-0.5916458837741553],[-0.7970719975822834,-0.09394315993072982,-0.5965324076464059],[-0.7922778425803131,-0.09236110242181833,-0.6031295440580831],[-0.7918462712577123,-0.09309443017508219,-0.6035833908961],[-0.7876486663643828,-0.09187450870881969,-0.6092361225534172],[-0.7863506200760443,-0.09522441002120963,-0.6103974230303837],[-0.782288673070239,-0.09416153477661263,-0.6157580997067903],[-0.7816232397219082,-0.09534778067607247,-0.6164202396472525],[-0.7759987609233115,-0.09337088848096813,-0.6237850593191214],[-0.7735951115248308,-0.08655836157185677,-0.627740594088737],[-0.7732985666375857,-0.08221136514510469,-0.6286896040791782],[-0.7828670364604368,-0.07829398124076364,-0.6172432711055863],[-0.7854072252410343,-0.07590956336109288,-0.6143071127127762],],
[[-0.5783903343244116,-0.756175468673626,0.3060445747539363],[-0.5787688724259586,-0.7561153012532924,0.30547707527967977],[-0.5802022533090928,-0.7564997345345718,0.30178385792512824],[-0.580164282543579,-0.7565820194733263,0.30165054793644536],[-0.580164282543579,-0.7565820194733263,0.30165054793644536],[-0.5802022533090928,-0.7564997345345718,0.30178385792512824],[-0.5787688724259586,-0.7561153012532924,0.30547707527967977],[-0.5783903343244116,-0.756175468673626,0.3060445747539363],[-0.5748860944191532,-0.7574937701920443,0.30936898125658097],[-0.5739049083849123,-0.7580034861883905,0.3099417220348883],[-0.5712332974371571,-0.7603258663673989,0.3091878018805674],[-0.5710400028158802,-0.7605305726682788,0.3090413616668479],[-0.5710400028158802,-0.7605305726682788,0.3090413616668479],[-0.5712332974371571,-0.7603258663673989,0.3091878018805674],[-0.5739049083849123,-0.7580034861883905,0.3099417220348883],[-0.5748860944191532,-0.7574937701920443,0.30936898125658097],[-0.5783903343244116,-0.756175468673626,0.3060445747539363],[-0.5858166567665647,-0.7442076118110155,0.32089542716808866],[-0.5845786581078789,-0.7455862958645942,0.3199513524017449],[-0.5738181893768801,-0.7560599027520108,0.3148112275489216],[-0.5734015985376424,-0.7553607532910852,0.31723924596745723],[-0.6189989564479844,-0.6528324033905093,0.4366350249346448],[-0.6104031957855518,-0.655788165578077,0.44424072355258726],[-0.5465883931085508,-0.7009193609964992,0.4582064795474544],[-0.47329544975121657,-0.7519592257176229,0.4588559034195233],[-0.46002034912764816,-0.762020019665949,0.4557485798296945],[-0.44293768166523007,-0.7738263551615409,0.45276813295376295],[-0.4427958767909883,-0.7742418564609465,0.45219615124501805],[-0.40797119561734624,-0.8393830525930424,0.3591595669979277],[-0.37366951682649024,-0.898276407578907,0.2312370813295103],[-0.36466790272651345,-0.9080408610454757,0.20610462244412983],[-0.3690855660024813,-0.9131611053104556,0.17295271237195214],[-0.3698194686030398,-0.9140016589476258,0.16683683071538372],[-0.21561219068366883,-0.9723153745660127,0.09007882998320868],[-0.19406921567723492,-0.9774985267674007,0.08266661777273875],[-0.16722839170162107,-0.9830517843109315,0.07512559065979546],[-0.14317483783783402,-0.9872471916044451,0.06959848043776838],[-0.07075682672930732,-0.9964872800120758,0.044794779219611155],[0.0006846459778568911,-0.9997591794939386,0.02193431734729853],[0.01823053334612426,-0.9997040448772098,0.016108082134801742],[0.021327394068412855,-0.9996675171662004,0.014491286520361702],[0.07409102965879377,-0.9970814475698142,0.018414837392274074],[0.1103746456150939,-0.9936140015439016,0.023423354611545544],[0.151236472039556,-0.9879837299342008,0.03186971776362071],[0.16462991229155324,-0.944749115606022,-0.28345387727197296],[0.15894539198272567,-0.9381567460023197,-0.3075683376061276],[0.1473484283265908,-0.9504919270420762,-0.27359374498976435],[0.1429649139751946,-0.957461712350075,-0.2506553465532454],[0.14167475312087355,-0.9397622707662746,-0.3110870276503905],[0.14156103259357558,-0.939758251912317,-0.3111509312435796],[0.14012050236779128,-0.9395245190751437,-0.3125058765412546],[0.13957726797836797,-0.9390235728457391,-0.3142497667520499],[0.13933364149481497,-0.9371551821463598,-0.31988482446658417],[0.13933364149481497,-0.9371551821463598,-0.31988482446658417],[0.13957726797836797,-0.9390235728457391,-0.3142497667520499],[0.14012050236779128,-0.9395245190751437,-0.3125058765412546],[0.14156103259357558,-0.939758251912317,-0.3111509312435796],[0.14167475312087355,-0.9397622707662746,-0.3110870276503905],[0.1429649139751946,-0.957461712350075,-0.2506553465532454],[0.1473484283265908,-0.9504919270420762,-0.27359374498976435],[0.15894539198272567,-0.9381567460023197,-0.3075683376061276],[0.16462991229155324,-0.944749115606022,-0.28345387727197296],[0.16917824017948613,-0.9393956101194769,-0.2981855307321736],[0.16917824017948613,-0.9393956101194769,-0.2981855307321736],[0.16462991229155324,-0.944749115606022,-0.28345387727197296],[0.151236472039556,-0.9879837299342008,0.03186971776362071],[0.20631392176211805,-0.977342810757198,0.047282089086191255],[0.2683745719606168,-0.9626943250156327,0.03456480446424134],[0.34161527945470077,-0.9168419655873971,-0.20663932583350386],[0.34132693883529236,-0.9167845283006177,-0.20736935524310804],[0.3337953311700979,-0.9153328499089549,-0.22526972891756988],[0.36783110112226325,-0.860057907470024,-0.3535543477960172],[0.3833772090597738,-0.8346437397496439,-0.39546395950866037],[0.38384634686711766,-0.8342327048941076,-0.3958759604747794],[0.3876167956649553,-0.8318397807226815,-0.3972351934631089],[0.3865039772123463,-0.8291429656261354,-0.40390174318977073],[0.38676722844592304,-0.827941042935204,-0.40610927153122955],[0.38676722844592304,-0.827941042935204,-0.40610927153122955],[0.3865039772123463,-0.8291429656261354,-0.40390174318977073],[0.3876167956649553,-0.8318397807226815,-0.3972351934631089],[0.38384634686711766,-0.8342327048941076,-0.3958759604747794],[0.3833772090597738,-0.8346437397496439,-0.39546395950866037],[0.36783110112226325,-0.860057907470024,-0.3535543477960172],[0.3337953311700979,-0.9153328499089549,-0.22526972891756988],[0.34132693883529236,-0.9167845283006177,-0.20736935524310804],[0.34161527945470077,-0.9168419655873971,-0.20663932583350386],[0.2683745719606168,-0.9626943250156327,0.03456480446424134],[0.39657921863596374,-0.9129936848612857,0.09574682631554814],[0.5015211207423261,-0.8538025787801617,-0.13963424335637378],[0.5071013869223635,-0.846959955721523,-0.15970916312350736],[0.3826629396015553,-0.896009472610287,-0.22524675280263617],[0.3791770970223097,-0.8971609279380679,-0.22655462580807925],[0.4146970528459677,-0.8761778335980893,-0.2456394884220116],[0.42170579989728413,-0.8738658322449416,-0.2419147072169186],[0.4754790056947964,-0.8532673572660466,-0.21413671373144913],[0.4754790056947964,-0.8532673572660466,-0.21413671373144913],[0.42170579989728413,-0.8738658322449416,-0.2419147072169186],[0.4146970528459677,-0.8761778335980893,-0.2456394884220116],[0.3791770970223097,-0.8971609279380679,-0.22655462580807925],[0.3826629396015553,-0.896009472610287,-0.22524675280263617],[0.5071013869223635,-0.846959955721523,-0.15970916312350736],[0.5015211207423261,-0.8538025787801617,-0.13963424335637378],[0.39657921863596374,-0.9129936848612857,0.09574682631554814],[0.39924713135077594,-0.9116553065212188,0.09739779360888404],[0.4541276446788583,-0.8801364214274061,0.13830387563402588],[0.5338970023025704,-0.8336912938039865,-0.14111278314796372],[0.5338970023025704,-0.8336912938039865,-0.14111278314796372],[0.4541276446788583,-0.8801364214274061,0.13830387563402588],[0.4794201451174053,-0.8627875178122969,0.1604806018274535],[0.5336203993861589,-0.8318938820939357,0.15232149649224655],[0.6894944985480297,-0.7179814538169288,0.09539375475852967],[0.6897742383956129,-0.7177697229075948,0.09496380848990177],[0.7147713580182846,-0.6988338878915769,0.0270758728583246],[0.7189720130416082,-0.6948458843212552,0.016384184590958497],[0.8165014750362685,-0.5089155905841153,-0.2726357697075334],[0.7559368766006921,-0.556737666684828,-0.3443872951917994],[0.6679125382231655,-0.5003136238647464,-0.5509801439794482],[0.49436011474497255,-0.5360811602837088,-0.6842697322972939],[0.49436011474497255,-0.5360811602837088,-0.6842697322972939],[0.6679125382231655,-0.5003136238647464,-0.5509801439794482],[0.6523874287379952,-0.48873981007925066,-0.5792443705970093],[0.6235849937280525,-0.4625580239609006,-0.6302236349634721],[0.6174202356006453,-0.45604437587228275,-0.6409491242728269],[0.5936919750819202,-0.43653580157054034,-0.675992849570537],[0.5824183446446778,-0.42896396025824357,-0.6904917035134582],[0.5121785871548711,-0.3910629752356866,-0.7646848005942403],[0.4871668552217412,-0.37568331795112914,-0.7883720567007623],[0.48265843709279177,-0.37780336111874974,-0.7901300231167775],[0.4601294603642176,-0.38661180816257795,-0.79925727365736],[0.42393342377215265,-0.3963478323633524,-0.8143640758221672],[0.42264305013353143,-0.39673612968636673,-0.8148455654756352],[0.3901740818611833,-0.40506294520868164,-0.8268543984660488],[0.37340863958933823,-0.4104102276737678,-0.8319431668694719],[0.3583307653564921,-0.4161755548152982,-0.8357014838883615],[0.2757946700474144,-0.451829180470086,-0.8484030243045863],[0.26040071072397536,-0.46121678265801624,-0.848216098202007],[0.24207543478872942,-0.47435573902337547,-0.8463959574143977],[0.209682429966628,-0.4980701178271325,-0.8414032542669161],[0.18238974484195733,-0.5183112477857545,-0.8355162663857956],[0.16024114922747104,-0.5339096068837005,-0.830218830051181],[0.061820013038476875,-0.5940927400032393,-0.8020175199229541],[-0.0628028273082063,-0.6579864767493878,-0.7504062908165303],[-0.10556302089072842,-0.7043939601992285,-0.7019156626370944],[-0.11134632531658785,-0.7054132597959957,-0.6999958062320658],[-0.1778758626083376,-0.716433468692802,-0.6745985935637131],[-0.18651134620450613,-0.7177613310626617,-0.6708443853593314],[-0.21561889610124554,-0.7228835188178327,-0.6564662290366721],[-0.24775103001711418,-0.7172368705416339,-0.6512992389532652],[-0.3151136855387612,-0.7033723306698911,-0.6371583238365361],[-0.5096042641185538,-0.5306641074523782,-0.6772732824008033],[-0.7196787198356135,-0.45360778158904147,-0.5256448617628077],[-0.7369187547788566,-0.4458268506864278,-0.5081231819767732],[-0.7385358050513932,-0.44510271002696566,-0.5064073875682912],[-0.7653500005233503,-0.43344258090174276,-0.4757803124974215],[-0.76594095973617,-0.4332046283098759,-0.4750454675179388],[-0.7744113357314992,-0.4294493485399881,-0.4646077271517715],[-0.7868414176910878,-0.4235421844832416,-0.4488792725990395],[-0.8080360091606227,-0.4125231234038779,-0.420597765753556],[-0.9223341351571572,-0.3246317056579326,-0.20955667206156967],[-0.926491038150601,-0.32437861580729965,-0.19076915325482305],[-0.9128736708375342,-0.4081177596935738,-0.01007746566869545],[-0.9013745985816917,-0.4330303667153103,-0.002921392493000401],[-0.7178399679670932,-0.6371495316721526,-0.28061763073434853],[-0.765222346838638,-0.5328853213512323,-0.3612035356792085],[-0.739956130284762,-0.5876815896559283,-0.3272541434932207],[-0.7114338746920166,-0.643871116065463,-0.2815880463324377],[-0.7084924770328852,-0.6470206391246807,-0.2817848514993247],[-0.7082678881361312,-0.6481721129760294,-0.27969538894192436],[-0.7063541591656578,-0.6524995833610224,-0.27442320518328744],[-0.7026514982953871,-0.6583629089949308,-0.26988729500104314],[-0.7020314474834036,-0.6591708982136443,-0.26952842835696317],[-0.6989476222297853,-0.6617820387279159,-0.2711397326037863],[-0.6931022728386612,-0.6657669039657339,-0.27633977087955225],[-0.6921203622931723,-0.6662307388641098,-0.27767968361360273],[-0.6778323544287317,-0.687231259774041,-0.2612594397892388],[-0.6840482303908564,-0.6730790657011346,-0.2811451401216558],[-0.6796237436429727,-0.6771660350154729,-0.2820597952529466],[-0.5266469980873955,-0.8471510147203909,-0.07055563523735794],[-0.5232045014499355,-0.8476806810446407,-0.08771837120135577],[-0.4489327420878471,-0.8839482446464548,-0.13074744306462624],[-0.44757978876943316,-0.8845283737649421,-0.1314605974802204],[-0.37239256450217373,-0.91251448535542,-0.16923679245373105],[-0.2735761622558061,-0.9380564855760722,-0.2126172930738542],[-0.27736299751356613,-0.9279393415546809,-0.24899467063645137],[-0.2655064840874432,-0.9413410610112427,-0.20828661445650365],[-0.26174942226536174,-0.9428583060452169,-0.20616851036298828],[-0.2595840694845814,-0.9430838259021149,-0.20786776611984215],[-0.2595840694845814,-0.9430838259021149,-0.20786776611984215],[-0.26174942226536174,-0.9428583060452169,-0.20616851036298828],[-0.2625212377198924,-0.943471805983006,-0.2023451285827782],[-0.2621578538046271,-0.9446537504019166,-0.19723729753813127],[-0.2594380371563631,-0.9468731477472773,-0.19006090326949537],[-0.2587161636586923,-0.9472715977406414,-0.18905678188211422],[-0.24684350112754352,-0.9501711846615051,-0.19037595906534116],[-0.24357347898574194,-0.9507456234969053,-0.19171520476024614],[-0.24219013143271692,-0.950894685870284,-0.19272580683514362],[-0.24128079318471382,-0.9512252979499504,-0.19223426172299135],[-0.2380288520231207,-0.9521868996783293,-0.1915264307753028],[-0.2380288520231207,-0.9521868996783293,-0.1915264307753028],[-0.24128079318471382,-0.9512252979499504,-0.19223426172299135],[-0.24219013143271692,-0.950894685870284,-0.19272580683514362],[-0.24357347898574194,-0.9507456234969053,-0.19171520476024614],[-0.24684350112754352,-0.9501711846615051,-0.19037595906534116],[-0.2587161636586923,-0.9472715977406414,-0.18905678188211422],[-0.2594380371563631,-0.9468731477472773,-0.19006090326949537],[-0.2621578538046271,-0.9446537504019166,-0.19723729753813127],[-0.2625212377198924,-0.943471805983006,-0.2023451285827782],[-0.26174942226536174,-0.9428583060452169,-0.20616851036298828],[-0.2655064840874432,-0.9413410610112427,-0.20828661445650365],[-0.27736299751356613,-0.9279393415546809,-0.24899467063645137],[-0.2735761622558061,-0.9380564855760722,-0.2126172930738542],[-0.37239256450217373,-0.91251448535542,-0.16923679245373105],[-0.44757978876943316,-0.8845283737649421,-0.1314605974802204],[-0.4489327420878471,-0.8839482446464548,-0.13074744306462624],[-0.5232045014499355,-0.8476806810446407,-0.08771837120135577],[-0.5266469980873955,-0.8471510147203909,-0.07055563523735794],[-0.6796237436429727,-0.6771660350154729,-0.2820597952529466],[-0.6840482303908564,-0.6730790657011346,-0.2811451401216558],[-0.6778323544287317,-0.687231259774041,-0.2612594397892388],[-0.6921203622931723,-0.6662307388641098,-0.27767968361360273],[-0.6931022728386612,-0.6657669039657339,-0.27633977087955225],[-0.6989476222297853,-0.6617820387279159,-0.2711397326037863],[-0.7020314474834036,-0.6591708982136443,-0.26952842835696317],[-0.7026514982953871,-0.6583629089949308,-0.26988729500104314],[-0.7063541591656578,-0.6524995833610224,-0.27442320518328744],[-0.7082678881361312,-0.6481721129760294,-0.27969538894192436],[-0.7084924770328852,-0.6470206391246807,-0.2817848514993247],[-0.7114338746920166,-0.643871116065463,-0.2815880463324377],[-0.739956130284762,-0.5876815896559283,-0.3272541434932207],[-0.765222346838638,-0.5328853213512323,-0.3612035356792085],[-0.7178399679670932,-0.6371495316721526,-0.28061763073434853],[-0.9013745985816917,-0.4330303667153103,-0.002921392493000401],[-0.8650335970256116,-0.5012185854454398,0.022289136838475384],[-0.8293377439726336,-0.556310479769681,0.052130188190816086],[-0.7602175915666505,-0.6395493417499412,0.11421844395638728],[-0.7401018162375742,-0.6113683946852021,0.28013922892355353],[-0.7243751495810188,-0.6068283331346099,0.3271697063827083],[-0.6733386148564208,-0.6274848738719001,0.3909959626456549],[-0.6711250107430421,-0.6287617933158007,0.392746517771259],[-0.6479567209378602,-0.6410078677615126,0.4114134189100973],[-0.6189989564479844,-0.6528324033905093,0.4366350249346448],[-0.5734015985376424,-0.7553607532910852,0.31723924596745723],[-0.5738181893768801,-0.7560599027520108,0.3148112275489216],[-0.5845786581078789,-0.7455862958645942,0.3199513524017449],[-0.5858166567665647,-0.7442076118110155,0.32089542716808866],[-0.5783903343244116,-0.756175468673626,0.3060445747539363],],
[[-0.15330857863393335,0.2541269398985255,-0.9549429187836592],[-0.1547105599004014,0.255394279337864,-0.954378543732411],[-0.16161446387155048,0.2625910638219141,-0.9512763522070686],[-0.1715859627510801,0.2533470126803072,-0.952036526900491],[-0.18997611940614026,0.23083786016246396,-0.9542656634140194],[-0.19409619467387312,0.22470407002521653,-0.9549003864944366],[-0.2149468730830778,0.18565472268088024,-0.9588170658150036],[-0.2315345456959072,0.16086756260018523,-0.9594338859204763],[-0.23650839224227727,0.15543625719009194,-0.959115921226266],[-0.24015337285289626,0.15081160883943678,-0.958948495043732],[-0.2545483489600901,0.13484621949871478,-0.9576124660469896],[-0.2595242379919281,0.12990106317236375,-0.9569602309821441],[-0.27233350371618736,0.11567110657895426,-0.95522492526968],[-0.2739103291358928,0.11407228395602985,-0.9549663060159358],[-0.2832181078960674,0.10543989889892698,-0.9532418009508163],[-0.2933355746636825,0.0932947514487472,-0.9514464409460175],[-0.2929482394897183,0.08707198479288775,-0.9521553436514977],[-0.2861638557477148,0.022876192138345484,-0.9579075777426811],[-0.42464166972174944,-0.11273712965674205,-0.8983149736772084],[-0.42884928901176717,-0.11744299226356968,-0.8957094567337563],[-0.43047551282833163,-0.11899811433770413,-0.8947235783409621],[-0.468529736286061,-0.16195390700910017,-0.8684761471797611],[-0.4745470346874678,-0.16824112283450113,-0.8640023359092946],[-0.48350591024852985,-0.17847729265261372,-0.8569526770844081],[-0.26894651606915176,-0.17816998638489362,-0.9465322115204914],[-0.23424548063540143,-0.183253878854145,-0.954749742438719],[-0.2233600973650364,-0.17192639474171667,-0.9594537934138345],[-0.22243529526636185,-0.16993016961566218,-0.9600241022360629],[-0.21964704317313952,-0.1668573054941921,-0.9612043570586407],[-0.22023497784539142,-0.16549494550355445,-0.9613053508361511],[-0.22278610768190418,-0.14958361173640305,-0.9633229434223187],[-0.22233442764417713,-0.14574370934058384,-0.9640156500139319],[-0.21908414456193762,-0.13771593153901915,-0.9659381242097778],[-0.2217823958513251,-0.13514480824244465,-0.9656854817669981],[-0.2217823958513251,-0.13514480824244465,-0.9656854817669981],[-0.21908414456193762,-0.13771593153901915,-0.9659381242097778],[-0.2156248162708188,-0.13632674744796353,-0.966913107025877],[-0.20637648205377263,-0.13517218498154082,-0.9690909286864804],[-0.19829560020200623,-0.13643254379426695,-0.9706003379014204],[-0.1908319241240111,-0.13986191789967042,-0.9716078533320702],[-0.18956611020085906,-0.14269701514786992,-0.9714433857570931],[-0.18956611020085906,-0.14269701514786992,-0.9714433857570931],[-0.1908319241240111,-0.13986191789967042,-0.9716078533320702],[-0.19829560020200623,-0.13643254379426695,-0.9706003379014204],[-0.20637648205377263,-0.13517218498154082,-0.9690909286864804],[-0.2156248162708188,-0.13632674744796353,-0.966913107025877],[-0.21908414456193762,-0.13771593153901915,-0.9659381242097778],[-0.22233442764417713,-0.14574370934058384,-0.9640156500139319],[-0.22278610768190418,-0.14958361173640305,-0.9633229434223187],[-0.22023497784539142,-0.16549494550355445,-0.9613053508361511],[-0.21964704317313952,-0.1668573054941921,-0.9612043570586407],[-0.2154487542185942,-0.16878692616121663,-0.9618174503837533],[-0.2154487542185942,-0.16878692616121663,-0.9618174503837533],[-0.21964704317313952,-0.1668573054941921,-0.9612043570586407],[-0.22243529526636185,-0.16993016961566218,-0.9600241022360629],[-0.2233600973650364,-0.17192639474171667,-0.9594537934138345],[-0.23424548063540143,-0.183253878854145,-0.954749742438719],[-0.26894651606915176,-0.17816998638489362,-0.9465322115204914],[-0.48350591024852985,-0.17847729265261372,-0.8569526770844081],[-0.5371441097430881,-0.23578908313817493,-0.8098640093504368],[-0.5376637683783434,-0.32863082800764476,-0.7764788799807816],[-0.5096042641185538,-0.5306641074523782,-0.6772732824008033],[-0.3151136855387612,-0.7033723306698911,-0.6371583238365361],[-0.24775103001711418,-0.7172368705416339,-0.6512992389532652],[-0.21561889610124554,-0.7228835188178327,-0.6564662290366721],[-0.18651134620450613,-0.7177613310626617,-0.6708443853593314],[-0.1778758626083376,-0.716433468692802,-0.6745985935637131],[-0.11134632531658785,-0.7054132597959957,-0.6999958062320658],[-0.10556302089072842,-0.7043939601992285,-0.7019156626370944],[-0.0628028273082063,-0.6579864767493878,-0.7504062908165303],[0.061820013038476875,-0.5940927400032393,-0.8020175199229541],[0.16024114922747104,-0.5339096068837005,-0.830218830051181],[0.18238974484195733,-0.5183112477857545,-0.8355162663857956],[0.209682429966628,-0.4980701178271325,-0.8414032542669161],[0.24207543478872942,-0.47435573902337547,-0.8463959574143977],[0.26040071072397536,-0.46121678265801624,-0.848216098202007],[0.2711529399313806,-0.3397693498756757,-0.9005736349969555],[0.2685945186022169,-0.2989162146690031,-0.9156997767744611],[0.2578902394034964,-0.2526414111205342,-0.9325582779684242],[0.2589851092455522,-0.25095469806268583,-0.9327102726513394],[0.2557075792763175,-0.24301511449725002,-0.9357121822582702],[0.2552946740581647,-0.2391357535912289,-0.9368237404933174],[0.2552946740581647,-0.2391357535912289,-0.9368237404933174],[0.2557075792763175,-0.24301511449725002,-0.9357121822582702],[0.2589851092455522,-0.25095469806268583,-0.9327102726513394],[0.2578902394034964,-0.2526414111205342,-0.9325582779684242],[0.2685945186022169,-0.2989162146690031,-0.9156997767744611],[0.2711529399313806,-0.3397693498756757,-0.9005736349969555],[0.26040071072397536,-0.46121678265801624,-0.848216098202007],[0.2757946700474144,-0.451829180470086,-0.8484030243045863],[0.30956297160195506,-0.3411365071262593,-0.8875790951338719],[0.2986781607864052,-0.2623764859970047,-0.9175782995827191],[0.3324142345828311,-0.26785472850568204,-0.9042978608090688],[0.3326087413906451,-0.2673130372209092,-0.904386623785571],[0.33473597517897163,-0.25592409267841965,-0.9068928744387127],[0.334804268794774,-0.2525450323802326,-0.9078144679486354],[0.3774847724338743,-0.24829550252966104,-0.8921068265651202],[0.3791270512071552,-0.2395212266586552,-0.893807731574806],[0.3804993764606077,-0.23649433852181181,-0.8940305656744738],[0.3871156346112461,-0.23306557161531535,-0.89208851845944],[0.39441109206838176,-0.23157432489520538,-0.8892767974611485],[0.40612695882633537,-0.2327474433685153,-0.8836795351935519],[0.4072805633252523,-0.23319632087827719,-0.8830300213844945],[0.4085276417552182,-0.24784484888714528,-0.8784521027364146],[0.4085276417552182,-0.24784484888714528,-0.8784521027364146],[0.4072805633252523,-0.23319632087827719,-0.8830300213844945],[0.40612695882633537,-0.2327474433685153,-0.8836795351935519],[0.39441109206838176,-0.23157432489520538,-0.8892767974611485],[0.3871156346112461,-0.23306557161531535,-0.89208851845944],[0.3804993764606077,-0.23649433852181181,-0.8940305656744738],[0.3791270512071552,-0.2395212266586552,-0.893807731574806],[0.3774847724338743,-0.24829550252966104,-0.8921068265651202],[0.334804268794774,-0.2525450323802326,-0.9078144679486354],[0.33473597517897163,-0.25592409267841965,-0.9068928744387127],[0.3326087413906451,-0.2673130372209092,-0.904386623785571],[0.3324142345828311,-0.26785472850568204,-0.9042978608090688],[0.2986781607864052,-0.2623764859970047,-0.9175782995827191],[0.30956297160195506,-0.3411365071262593,-0.8875790951338719],[0.2757946700474144,-0.451829180470086,-0.8484030243045863],[0.3583307653564921,-0.4161755548152982,-0.8357014838883615],[0.37340863958933823,-0.4104102276737678,-0.8319431668694719],[0.3901740818611833,-0.40506294520868164,-0.8268543984660488],[0.42264305013353143,-0.39673612968636673,-0.8148455654756352],[0.42393342377215265,-0.3963478323633524,-0.8143640758221672],[0.4601294603642176,-0.38661180816257795,-0.79925727365736],[0.48265843709279177,-0.37780336111874974,-0.7901300231167775],[0.4871668552217412,-0.37568331795112914,-0.7883720567007623],[0.5121785871548711,-0.3910629752356866,-0.7646848005942403],[0.5824183446446778,-0.42896396025824357,-0.6904917035134582],[0.5988783378870118,-0.3375371169821951,-0.7262323533615382],[0.5988783378870118,-0.3375371169821951,-0.7262323533615382],[0.5824183446446778,-0.42896396025824357,-0.6904917035134582],[0.5936919750819202,-0.43653580157054034,-0.675992849570537],[0.6174202356006453,-0.45604437587228275,-0.6409491242728269],[0.6235849937280525,-0.4625580239609006,-0.6302236349634721],[0.6523874287379952,-0.48873981007925066,-0.5792443705970093],[0.6679125382231655,-0.5003136238647464,-0.5509801439794482],[0.7559368766006921,-0.556737666684828,-0.3443872951917994],[0.8165014750362685,-0.5089155905841153,-0.2726357697075334],[0.8188131844265942,-0.5052619775746412,-0.27249826242848413],[0.7819189138718498,-0.3311891188612763,-0.5281255340137971],[0.7962010231796132,-0.22194256094823278,-0.5628547151152571],[0.800102734631537,-0.18764578376290408,-0.5697584346643249],[0.8007246000632119,-0.11010098301211256,-0.5888275540371526],[0.7954263766661929,-0.11183222641374764,-0.5956428732378456],[0.7938997665646486,-0.11162435513001522,-0.5977149521221674],[0.7938997665646486,-0.11162435513001522,-0.5977149521221674],[0.7954263766661929,-0.11183222641374764,-0.5956428732378456],[0.8007246000632119,-0.11010098301211256,-0.5888275540371526],[0.800102734631537,-0.18764578376290408,-0.5697584346643249],[0.802886057400655,-0.16713370000121258,-0.5722239991083361],[0.8108678841575457,-0.12039576159149509,-0.572711214341634],[0.8108678841575457,-0.12039576159149509,-0.572711214341634],[0.802886057400655,-0.16713370000121258,-0.5722239991083361],[0.800102734631537,-0.18764578376290408,-0.5697584346643249],[0.7962010231796132,-0.22194256094823278,-0.5628547151152571],[0.7819189138718498,-0.3311891188612763,-0.5281255340137971],[0.8188131844265942,-0.5052619775746412,-0.27249826242848413],[0.8776079493400311,-0.41736243086027447,-0.23582385070553846],[0.9107920554622381,-0.3482141943911043,-0.221821339215653],[0.9644251386871106,-0.11185243749490396,-0.23952700076358036],[0.9687947125418501,-0.07487558192357294,-0.23628468461277857],[0.9707338392903698,-0.055979394268536514,-0.23354254574682162],[0.9737121268186838,-0.019796358177899917,-0.22692024653857537],[0.9765568664748858,0.05635967742516222,-0.20775050734302408],[0.9513884058426806,0.13434337732030427,-0.2771497035868833],[0.8542486587094311,0.30819384700875013,-0.41865950575507677],[0.8184402249592919,0.34799553239665343,-0.45722500762814083],[0.7964149710752043,0.31770874067436256,-0.5145720065708903],[0.7716053009754633,0.2888757037711126,-0.566723995678063],[0.7616863033742253,0.27849948482535164,-0.5850401799911877],[0.7463605489078431,0.26333142564019424,-0.6112303095432082],[0.7160081920581738,0.23521177361874002,-0.6572729193087997],[0.712280443750101,0.22764387471297015,-0.6639539409905063],[0.7099264519962147,0.22213438056454504,-0.6683268285257388],[0.6985071314950121,0.19503498638469732,-0.6885122666565432],[0.6831217116556183,0.1586992481045791,-0.7128529131004092],[0.6677604808582135,0.12261201478667143,-0.7342085766551361],[0.46245885260610414,0.12295375734510673,-0.878074133089551],[0.4537760547265541,0.12228792685730416,-0.8826850826323883],[0.4529056551840403,0.08127367119341791,-0.8878463030688699],[0.4563363730028209,0.03759513232178191,-0.8890127787047485],[0.4563363730028209,0.03759513232178191,-0.8890127787047485],[0.4529056551840403,0.08127367119341791,-0.8878463030688699],[0.4537760547265541,0.12228792685730416,-0.8826850826323883],[0.44527033015499057,0.12277743223729111,-0.8869385746582924],[0.4297700924691179,0.12469521316380515,-0.8942867389339503],[0.41703669355159384,0.12369727604243329,-0.9004328848566316],[0.4090501698253804,0.12465023397798303,-0.9039581172460711],[0.392894694259436,0.1244428674389574,-0.9111244327567747],[0.3876822448795822,0.12471007102476603,-0.9133180580663702],[0.3386183796882073,0.12397820358018659,-0.9327202141984288],[0.2919990171516742,0.038832943658786936,-0.9556299369888167],[0.2796396706824689,0.01876037067664192,-0.9599217171585792],[0.2737831467454209,0.010754211106593466,-0.9617313218886293],[0.2477801706240775,-0.019573973992096316,-0.9686185248009971],[0.2468117044937508,-0.02085000638636892,-0.9688391299687363],[0.2375844721440071,-0.03156322591963661,-0.9708539444044091],[0.21423155384203613,-0.03384236444057404,-0.9761964636831554],[0.20850146138934267,-0.03422523775122337,-0.9774230269946481],[0.19529158082341627,-0.035497299617968534,-0.9801026171678776],[0.15228707784626952,-0.0434342214406178,-0.9873814431762893],[0.05808248397566839,-0.06327287608210379,-0.9963046563213057],[0.05766893144298225,-0.06273370379978102,-0.9963627736692023],[0.037538581456359986,0.12081467253434276,-0.9919650547285744],[0.03696080522053988,0.13670761918009527,-0.9899216765661611],[0.03718276017998156,0.14228228939571394,-0.9891274905034801],[-0.005820891381684086,0.17461086448800864,-0.9846203142461936],[-0.006471518028979352,0.17515567395147089,-0.9845194814410768],[-0.007314336818854606,0.1760381883372351,-0.9843561635525245],[-0.032881481067034694,0.1999114086687356,-0.9792620879452651],[-0.03705980509847086,0.20275557668469896,-0.978527846803206],[-0.056317134414411836,0.21368748616623362,-0.9752774162397614],[-0.07557570970559124,0.2221815034906122,-0.9720718551676862],[-0.11006575311208647,0.22856526406344357,-0.967286643170202],[-0.10993681341529508,0.2247999895779358,-0.9681832790034388],[-0.10288376565460394,0.18002037784919922,-0.9782676496357018],[-0.11482020234515969,0.1681910737444542,-0.9790444749070923],[-0.11567023471939639,0.16651272795152147,-0.9792312843399676],[-0.11899262015246666,0.16304651276019017,-0.9794164543369649],[-0.11612431556958902,0.15625864437834058,-0.980866137345223],[-0.11548319312624605,0.15124346734739288,-0.9817275822192755],[-0.11548319312624605,0.15124346734739288,-0.9817275822192755],[-0.11612431556958902,0.15625864437834058,-0.980866137345223],[-0.11899262015246666,0.16304651276019017,-0.9794164543369649],[-0.11567023471939639,0.16651272795152147,-0.9792312843399676],[-0.11482020234515969,0.1681910737444542,-0.9790444749070923],[-0.10288376565460394,0.18002037784919922,-0.9782676496357018],[-0.10993681341529508,0.2247999895779358,-0.9681832790034388],[-0.11006575311208647,0.22856526406344357,-0.967286643170202],[-0.1106353269632773,0.22880489589005726,-0.967165003525494],[-0.14696754305949664,0.24916507213634698,-0.95724464381596],[-0.15330857863393335,0.2541269398985255,-0.9549429187836592],],
[[-0.4549531811022915,0.19293529303584603,0.8693638914206627],[-0.4564723234731574,0.1944275427715058,0.8682343857017247],[-0.45760778588608286,0.1955289240895325,0.8673889289936936],[-0.45990982543993836,0.1976533349806024,0.8656882300429245],[-0.46057531049945805,0.21717310822453062,0.8606429134213702],[-0.45114773945873116,0.2431335918218413,0.8586918968460616],[-0.44567028619720217,0.24596503815113668,0.8607433973073588],[-0.43065686655084123,0.2233214071817331,0.8744496625804035],[-0.43065686655084123,0.2233214071817331,0.8744496625804035],[-0.44567028619720217,0.24596503815113668,0.8607433973073588],[-0.4434339669495945,0.24713420305555858,0.8615631158745364],[-0.4398796738495766,0.2490304920351392,0.862838157808709],[-0.42223222098081736,0.25818061390710045,0.8689434516515785],[-0.4187955599260031,0.25748554819068675,0.8708108126678303],[-0.4005239946460097,0.24266246946738096,0.8835697231259091],[-0.3984133498323526,0.24101669172221774,0.8849733086294982],[-0.39677001932420974,0.23984302329745127,0.8860298391933561],[-0.3969768809786922,0.23643023914821476,0.8868540454802849],[-0.39715081894893806,0.22579418638282764,0.8895438226438902],[-0.3998579953135767,0.2091538957399359,0.892394661279759],[-0.40578747476728877,0.20105713454124555,0.8915786863603518],[-0.40659135326328527,0.19987970405420882,0.8914771872340493],[-0.41062302650762567,0.19542365684522733,0.8906168224589948],[-0.41240128842342366,0.19319273283512295,0.8902818347503205],[-0.41684795965780946,0.18726079184198238,0.8894780347866017],[-0.4171899515285675,0.18685673813685133,0.8894026668255767],[-0.42051378791667116,0.1855424721080302,0.888111561244427],[-0.4317803100065267,0.18449349118274133,0.8829087810198013],[-0.45100562508388875,0.18895882094807798,0.872289223898016],[-0.4511594158801184,0.18911511156528726,0.8721758171609434],[-0.4549531811022915,0.19293529303584603,0.8693638914206627],],
];


const g_edges = [{from: "dark pink", to: "pink"},{from: "dark pink", to: "light brown"},{from: "dark pink", to: "dirt"},{from: "dark pink", to: "purple"},{from: "dark pink", to: "rose"},{from: "dark pink", to: "hot pink"},{from: "dark pink", to: "salmon"},{from: "dark pink", to: "grey"},{from: "dark pink", to: "mauve"},{from: "dark pink", to: "orange"},{from: "dark pink", to: "magenta"},{from: "indigo", to: "royal blue"},{from: "indigo", to: "purple"},{from: "indigo", to: "navy blue"},{from: "indigo", to: "maroon"},{from: "indigo", to: "dark blue"},{from: "indigo", to: "dark purple"},{from: "sea green", to: "turquoise"},{from: "sea green", to: "aqua"},{from: "sea green", to: "pale green"},{from: "sea green", to: "light green"},{from: "sea green", to: "sky blue"},{from: "sea green", to: "cyan"},{from: "sea green", to: "light blue"},{from: "lilac", to: "pink"},{from: "lilac", to: "peach"},{from: "lilac", to: "light purple"},{from: "lilac", to: "light pink"},{from: "lilac", to: "grey"},{from: "lilac", to: "lavender"},{from: "lilac", to: "periwinkle"},{from: "lilac", to: "beige"},{from: "lilac", to: "sky blue"},{from: "lilac", to: "light blue"},{from: "mauve", to: "pink"},{from: "mauve", to: "light brown"},{from: "mauve", to: "peach"},{from: "mauve", to: "light purple"},{from: "mauve", to: "dirt"},{from: "mauve", to: "purple"},{from: "mauve", to: "rose"},{from: "mauve", to: "salmon"},{from: "mauve", to: "grey"},{from: "mauve", to: "lavender"},{from: "mauve", to: "periwinkle"},{from: "mauve", to: "olive"},{from: "mauve", to: "tan"},{from: "sky blue", to: "light purple"},{from: "sky blue", to: "lavender"},{from: "sky blue", to: "grey"},{from: "sky blue", to: "periwinkle"},{from: "sky blue", to: "light blue"},{from: "lavender", to: "pink"},{from: "lavender", to: "peach"},{from: "lavender", to: "light pink"},{from: "lavender", to: "grey"},{from: "lavender", to: "periwinkle"},{from: "lavender", to: "beige"},{from: "lavender", to: "light blue"},{from: "lavender", to: "tan"},{from: "lavender", to: "light purple"},{from: "yellow", to: "mustard"},{from: "yellow", to: "lime"},{from: "olive green", to: "brown"},{from: "olive green", to: "light brown"},{from: "olive green", to: "dirt"},{from: "olive green", to: "forest green"},{from: "olive green", to: "green"},{from: "olive green", to: "olive"},{from: "forest green", to: "brown"},{from: "forest green", to: "navy blue"},{from: "forest green", to: "dark blue"},{from: "forest green", to: "black"},{from: "forest green", to: "olive"},{from: "forest green", to: "dark purple"},{from: "forest green", to: "dark green"},{from: "violet", to: "purple"},{from: "violet", to: "magenta"},{from: "magenta", to: "purple"},{from: "magenta", to: "rose"},{from: "magenta", to: "hot pink"},{from: "magenta", to: "maroon"},{from: "magenta", to: "red"},{from: "lime green", to: "mustard"},{from: "lime green", to: "light green"},{from: "lime green", to: "lime"},{from: "tan", to: "pink"},{from: "tan", to: "light brown"},{from: "tan", to: "mustard"},{from: "tan", to: "peach"},{from: "tan", to: "dirt"},{from: "tan", to: "rose"},{from: "tan", to: "light pink"},{from: "tan", to: "salmon"},{from: "tan", to: "grey"},{from: "tan", to: "pale green"},{from: "tan", to: "beige"},{from: "tan", to: "light green"},{from: "tan", to: "lime"},{from: "lime", to: "mustard"},{from: "lime", to: "pale green"},{from: "lime", to: "light green"},{from: "pink", to: "light purple"},{from: "pink", to: "peach"},{from: "pink", to: "light pink"},{from: "pink", to: "salmon"},{from: "pink", to: "beige"},{from: "pink", to: "rose"},{from: "light green", to: "grey"},{from: "light green", to: "pale green"},{from: "light green", to: "beige"},{from: "light green", to: "light blue"},{from: "light brown", to: "mustard"},{from: "light brown", to: "peach"},{from: "light brown", to: "dirt"},{from: "light brown", to: "rose"},{from: "light brown", to: "salmon"},{from: "light brown", to: "grey"},{from: "light brown", to: "orange"},{from: "light brown", to: "olive"},{from: "peach", to: "mustard"},{from: "peach", to: "rose"},{from: "peach", to: "light pink"},{from: "peach", to: "salmon"},{from: "peach", to: "grey"},{from: "peach", to: "pale green"},{from: "peach", to: "beige"},{from: "purple", to: "dirt"},{from: "purple", to: "rose"},{from: "purple", to: "maroon"},{from: "purple", to: "dark purple"},{from: "rose", to: "light purple"},{from: "rose", to: "dirt"},{from: "rose", to: "salmon"},{from: "rose", to: "grey"},{from: "rose", to: "orange"},{from: "light pink", to: "pale green"},{from: "light pink", to: "beige"},{from: "light pink", to: "light blue"},{from: "dark blue", to: "navy blue"},{from: "dark blue", to: "maroon"},{from: "dark blue", to: "royal blue"},{from: "dark blue", to: "black"},{from: "dark blue", to: "dark purple"},{from: "dark blue", to: "dark green"},{from: "periwinkle", to: "light purple"},{from: "periwinkle", to: "grey"},{from: "periwinkle", to: "light blue"},{from: "cyan", to: "turquoise"},{from: "cyan", to: "aqua"},{from: "orange", to: "salmon"},{from: "orange", to: "mustard"},{from: "black", to: "navy blue"},{from: "black", to: "maroon"},{from: "black", to: "dark purple"},{from: "black", to: "dark green"},{from: "brown", to: "dirt"},{from: "brown", to: "maroon"},{from: "brown", to: "olive"},{from: "brown", to: "dark purple"},{from: "brown", to: "dark green"},{from: "turquoise", to: "aqua"},{from: "turquoise", to: "teal"},{from: "light purple", to: "grey"},{from: "light purple", to: "light blue"},{from: "dirt", to: "grey"},{from: "dirt", to: "olive"},{from: "navy blue", to: "maroon"},{from: "navy blue", to: "royal blue"},{from: "navy blue", to: "dark purple"},{from: "navy blue", to: "dark green"},{from: "blue", to: "royal blue"},{from: "light blue", to: "grey"},{from: "light blue", to: "pale green"},{from: "light blue", to: "beige"},{from: "royal blue", to: "dark purple"},{from: "maroon", to: "dark purple"},{from: "bright green", to: "green"},{from: "olive", to: "green"},{from: "dark purple", to: "dark green"},{from: "aqua", to: "teal"},{from: "grey", to: "beige"},{from: "pale green", to: "beige"},{from: "green", to: "teal"},];

const g_labels = [{label: "dark pink", pos: [-0.5328022087195867,0.56323737093474,-0.6315738043697287], pos2d: [-0.3265572218018089,0.34521108970140435], color:"#cb416b"},{label: "indigo", pos: [-0.8845650588379325,0.44961180700254455,0.12407207456535727], pos2d: [-1.0098605526236692,0.513297719991566], color:"#380282"},{label: "sea green", pos: [0.4502471248147203,-0.5252284942738166,-0.7220890217964384], pos2d: [0.26145403583435783,-0.3049949727488024], color:"#53fca1"},{label: "lilac", pos: [0.21378117340783817,0.5476509086447158,-0.808935159426876], pos2d: [0.11818067236615068,0.30274767218202986], color:"#cea2fd"},{label: "mauve", pos: [-0.4393713650282046,0.38189241012717473,-0.8130873204524285], pos2d: [-0.24233326220524565,0.21063100812589614], color:"#ae7181"},{label: "sky blue", pos: [0.3946778487275938,0.31716807169735867,-0.8623420493165909], pos2d: [0.21192554228823093,0.17030602504719655], color:"#75bbfd"},{label: "lavender", pos: [0.14693152855080102,0.5185334639386521,-0.8423385143120953], pos2d: [0.07975273132997673,0.2814539564311641], color:"#c79fef"},{label: "yellow", pos: [0.7975062754110265,-0.09698640157493538,-0.5954640027655556], pos2d: [0.4998585201725892,-0.060788837232817826], color:"#ffff14"},{label: "olive green", pos: [-0.7960230570521494,-0.11930463698880603,-0.5933916887135509], pos2d: [-0.4995777640178548,-0.07487464496888926], color:"#677a04"},{label: "forest green", pos: [-0.9984154919038704,-0.04854179228622753,0.02846401110162242], pos2d: [-1.0276670172928657,-0.0499639672033858], color:"#06470c"},{label: "violet", pos: [-0.6451303179727765,0.7586567949025926,0.09081156523521475], pos2d: [-0.7095672286457066,0.8344329578926767], color:"#9a0eea"},{label: "magenta", pos: [-0.6198833342456824,0.7476165918015434,-0.2383570506351764], pos2d: [-0.5005691483952328,0.603716506009375], color:"#c20078"},{label: "lime green", pos: [0.6233179340651297,-0.28141863562945185,-0.7295740569628532], pos2d: [0.3603881149557026,-0.1627097923309658], color:"#89fe05"},{label: "tan", pos: [-0.13410621133844938,0.14900406900546675,-0.979700623405059], pos2d: [-0.0677406521738567,0.07526596054164074], color:"#d1b26f"},{label: "lime", pos: [0.39310611674122725,-0.2481873490348022,-0.8853646823539495], pos2d: [0.20850402069185858,-0.1316389085664482], color:"#aaff32"},{label: "pink", pos: [-0.051525838410755906,0.6308799359725566,-0.7741676784543073], pos2d: [-0.029042259667161962,0.35559205797402005], color:"#ff81c0"},{label: "light green", pos: [0.2726046535791936,-0.23612932689313115,-0.9327001896793872], pos2d: [0.141048598760895,-0.12217586988093704], color:"#96f97b"},{label: "light brown", pos: [-0.4698856175549176,0.21414444481230294,-0.856358373095671], pos2d: [-0.2531222550370672,0.11535727579109348], color:"#ad8150"},{label: "peach", pos: [-0.04573687183260607,0.2987654668479071,-0.9532299483199843], pos2d: [-0.02341602015264273,0.15295969995999795], color:"#ffb07c"},{label: "purple", pos: [-0.7685411947266045,0.5600091474427753,-0.3094094161279184], pos2d: [-0.5869372751261203,0.42768070898618543], color:"#7e1e9c"},{label: "rose", pos: [-0.44459345424275415,0.46957627226519,-0.7627809547766806], pos2d: [-0.2522114009900214,0.26638379033580983], color:"#cf6275"},{label: "light pink", pos: [0.45405192639166764,0.47691907080723756,-0.7525855752274137], pos2d: [0.25907546701835105,0.2721231291347089], color:"#ffd1df"},{label: "dark blue", pos: [-0.8842810563199375,0.254602235227207,0.39143928680065504], pos2d: [-1.453069574062819,0.4183678467982331], color:"#00035b"},{label: "periwinkle", pos: [0.17038734018253804,0.6643127791000554,-0.7277751615917386], pos2d: [0.09861661631109811,0.3844902935680863], color:"#8e82fe"},{label: "cyan", pos: [0.5278979195618462,-0.8330705038744448,-0.16527952715522082], pos2d: [0.4530225643374987,-0.714910443769837], color:"#00ffff"},{label: "orange", pos: [-0.44146376421090333,0.11314426396295807,-0.8901169139057075], pos2d: [-0.23356426312204656,0.05986098697416476], color:"#f97306"},{label: "black", pos: [-0.8878855539779922,0.10390150259609306,0.4481782243655621], pos2d: [-1.6090078231457547,0.18828815241413024], color:"#000000"},{label: "red", pos: [-0.3305332604599998,0.8559026412538299,0.39771652269474506], pos2d: [-0.5488001463013336,1.421096001310415], color:"#e50000"},{label: "brown", pos: [-0.9287460240326622,0.06004955383636465,-0.3658208221624013], pos2d: [-0.6799911152051764,0.04396590889666824], color:"#653700"},{label: "turquoise", pos: [0.15117564186445276,-0.935204110062077,-0.32021742274565446], pos2d: [0.11450814029559842,-0.7083712833581111], color:"#06c2ac"},{label: "mustard", pos: [-0.20477475092439232,-0.15356028668718444,-0.9666884398483324], pos2d: [-0.10412160196568003,-0.07808063726607695], color:"#ceb301"},{label: "light purple", pos: [0.048437515529676275,0.6782691584238876,-0.7332153543265878], pos2d: [0.02794662267949725,0.3913357660551178], color:"#bf77f6"},{label: "dirt", pos: [-0.6326133849139594,0.1729882247101538,-0.754900906966823], pos2d: [-0.3604838212816076,0.09857435483872834], color:"#8a6e45"},{label: "navy blue", pos: [-0.902319888056566,0.19115758059144702,0.3863645933571173], pos2d: [-1.4704495182131643,0.31151654308418186], color:"#001146"},{label: "blue", pos: [-0.42674593951391915,0.2202991686305987,0.8771295111949259], pos2d: [-3.473136175041373,1.7929380014112961], color:"#0343df"},{label: "salmon", pos: [-0.2841876717918098,0.4999413850133934,-0.8181051147330889], pos2d: [-0.15630981371147545,0.27497936228334546], color:"#ff796c"},{label: "light blue", pos: [0.41805424681943354,0.23735429082854312,-0.8768657749858387], pos2d: [0.22274062023566274,0.12646311419383946], color:"#95d0fc"},{label: "royal blue", pos: [-0.7926218220894167,0.3800104907706361,0.47680464978008924], pos2d: [-1.5149634295416803,0.7263262003588317], color:"#0504aa"},{label: "maroon", pos: [-0.9546094568350683,0.2973973528380626,-0.016601188089075587], pos2d: [-0.939020599247445,0.2925408275363971], color:"#650021"},{label: "bright green", pos: [-0.5742633037359691,-0.7603876968466731,0.3033681072005793], pos2d: [-0.8243425396851809,-1.0915200763936448], color:"#01ff07"},{label: "olive", pos: [-0.7773173300565248,-0.0679543597119826,-0.6254278322795767], pos2d: [-0.47822321890869696,-0.04180706049353185], color:"#6e750e"},{label: "dark purple", pos: [-0.9562397237130708,0.26628911410524925,0.12122581615395203], pos2d: [-1.0881518156666672,0.3030233693709649], color:"#35063e"},{label: "hot pink", pos: [-0.4500761522804291,0.8804538169254288,-0.1491057792638753], pos2d: [-0.39167512721827125,0.7662078050720912], color:"#ff028d"},{label: "aqua", pos: [0.3988260665359196,-0.8241210017600356,-0.40219689594714914], pos2d: [0.2844294319069381,-0.587735577037747], color:"#13eac9"},{label: "grey", pos: [-0.2752437453676404,0.2534579333365246,-0.9273618261847808], pos2d: [-0.14280854877803942,0.13150511226957598], color:"#929591"},{label: "pale green", pos: [0.43001828734235575,0.007954058717120004,-0.9027851380594786], pos2d: [0.2259941381405271,0.004180219068366178], color:"#c7fdb5"},{label: "green", pos: [-0.6990569731485505,-0.6569868686144752,-0.28228992677836245], pos2d: [-0.5451629608483847,-0.5123543863945771], color:"#15b01a"},{label: "beige", pos: [0.20518459008939488,0.17689160805993873,-0.9626051334726073], pos2d: [0.10454705665950441,0.09013102281402326], color:"#e6daa6"},{label: "teal", pos: [-0.25189338931352856,-0.9468919864478665,-0.19986316924575295], pos2d: [-0.20993509574251829,-0.7891666405954382], color:"#029386"},{label: "dark green", pos: [-0.9879990518499808,-0.01128229705186469,0.15404734115450508], pos2d: [-1.167912934038581,-0.013336794835850608], color:"#033500"},];


const g_colors = ['#fbb4ae', '#ccebc5', '#decbe4', '#b3cde3', '#fed9a6', '#decbe4'];
const tempV = new THREE.Vector3();
const myV = new THREE.Vector3();

const cameraToPoint = new THREE.Vector3();
const cameraPosition = new THREE.Vector3();
const normalMatrix = new THREE.Matrix3();
const settings = {
  minArea: 20,
  maxVisibleDot: -0.2,
};


  const width = 1200
  const height = 700
  const globeRadius = 200
  const globeSegments = 64
  const globeWidth = 4098 / 2
  const globeHeight = 1968 / 2


const clusterColors = [];

//label and position in a dictionary table for efficient access when drawing edges. 
// key: label name
// value: position in V3 and color of the node, which is inverse color of the cluster.
// if node numbers is more than the numbers of clusters, randomize the color of node.
const labelTable = new Object();  



var labels = [];
var scene = new THREE.Scene();


const canvas = document.querySelector('#c');
const renderer = new THREE.WebGLRenderer({canvas});




var camera = new THREE.PerspectiveCamera(45, width / height, 1, 4000);
camera.position.set(0, 5, -500);



renderer.setSize(width, height);

renderer.setClearColor(0x999999);


var controls = new THREE.OrbitControls(camera, renderer.domElement);

scene.add(new THREE.AxesHelper(1));


let sphereRadius = globeRadius;
const loader = new THREE.TextureLoader();
const geometry = new THREE.SphereGeometry(sphereRadius-2, 128, 64);



const material = new THREE.MeshBasicMaterial({transparent: false, opacity: 0.5, color: '#C8C8C8', vertexColors: THREE.FaceColors, wireframe: false });

let sphere = new THREE.Mesh(geometry, material);
scene.add(sphere);


const labelContainerElem = document.querySelector('#labels');

///// Main actions: 
//  draw clusters, labels and nodes, and then edges.

// draw cluster.
g_clusters.forEach(drawPoly);

// now we have color for clusters, so prepare label hash table and node color
prepareLabels();

//time for nodes and labels
g_labels.forEach(drawLabelAndNode);

// finally the edges.
g_edges.forEach(drawArcForItem);

sphereRadius = sphereRadius-0.5;
g_clusters.forEach(drawPoly);


function prepareLabels()
{
  for (var i=0; i< g_labels.length; i++)
  {
    var labelName = g_labels[i].label;

    var nodeColor;
    if (i < clusterColors.length)
    {
      nodeColor = invertColor(clusterColors[i]);
    }
    else
    {
      nodeColor = getRandomColor();
    }

    var posi = g_labels[i].pos;
    var tempV = new THREE.Vector3(posi[0], posi[1], posi[2]).normalize().multiplyScalar(sphereRadius);

    var posAndColor = {pos: tempV, color: nodeColor};

    labelTable[labelName] = posAndColor;

  }
}

function drawLabelAndNode (data, index, array)
{
  var v3Pos = labelTable[data.label].pos;
  drawLabelAt(v3Pos,  data.label);
  spot(v3Pos, labelTable[data.label].color);

}


function spot(point, color) {
  var s = new THREE.Mesh(new THREE.SphereGeometry(3, 32, 24), new THREE.MeshBasicMaterial({
    color: color
  }));
  s.position.copy(point);
  scene.add(s);
  return s;
}


function spot2(point, color) {
  var s = new THREE.Mesh(new THREE.SphereGeometry(5, 32, 24), new THREE.MeshBasicMaterial({
    color: color
  }));
  s.position.copy(point);
  //scene.add(s);
  return s;
}



function drawLabel (node, index, array)
{
  var tempV = new THREE.Vector3(node.pos[0], node.pos[1], node.pos[2]).normalize().multiplyScalar(sphereRadius);
  var meshPoint = spot(tempV, 0xff0000);
  
  const elem = document.createElement('div');
    elem.textContent = node.label;
    labelContainerElem.appendChild(elem);

    labels.push({elem, meshPoint});

   
}

function drawLabelAt (v3Pos, txt)
{
  
  var meshPoint = spot2(v3Pos, 0xff0000);
  
  const elem = document.createElement('div');
    elem.textContent = txt;
    labelContainerElem.appendChild(elem);

    labels.push({elem, meshPoint});

   
}

function drawArcForItem (edge, index, array)
{

  var fromKey = edge.from.trim();
  var toKey = edge.to.trim();
  if (fromKey in labelTable  && toKey in labelTable)
  {
    var v3Start = labelTable[fromKey].pos;
    var v3End = labelTable[toKey].pos;

    var lineStart = v3Start.clone().normalize().multiplyScalar(sphereRadius +2);
    var lineEnd = v3End.clone().normalize().multiplyScalar(sphereRadius +2);
    setShortArc(lineStart, lineEnd, 20, "white");
  }
  
}

function setArc3D(pointStart, pointEnd, smoothness, color, clockWise) {
  // calculate normal
  var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();

  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  if (clockWise) angle = angle - Math.PI * 2;
  var angleDelta = angle / (smoothness - 1);

  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    geometry.vertices.push(pointStart.clone().applyAxisAngle(normal, angleDelta * i))
  }

  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  return arc;
}


function GetSmoothness(pointStart, pointEnd)
{
  // we use 0.5 degree as the divider.
  var angleInterval = 0.5; 
  var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();

  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  if (Math.abs(angle) > Math.abs(angle - Math.PI*2))
  {
    angle = angle - Math.PI * 2;
  }

  if (Math.abs(angle)*(180.0/Math.PI) < angleInterval)
  {
    return 2;
  }

   var smoothness = (Math.abs(angle) * 180/Math.PI)/angleInterval;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2)
    {
      smoothness =2;
    }

    return smoothness;
}

function setShortArc(pointStart, pointEnd, smoothness, color) {
  // calculate normal
 
  var cb = new THREE.Vector3(), ab = new THREE.Vector3(), normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();
  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  //console.log(angle + " ");
  //////////
  if (Math.abs(angle) < (Math.PI / 180)) {
    smoothness = 2;
  }
  else {
    smoothness = Math.abs(angle) * 180 / Math.PI;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2) {
      smoothness = 2;
    }
  }
  //////
  if (Math.abs(angle) > Math.abs(angle - Math.PI * 2))
  //if (Math.abs(angle) > Math.abs(Math.abs(angle) - Math.PI * 2))
  {
    angle = angle - Math.PI * 2;
  }
  var angleDelta = angle / (smoothness - 1);
  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
    
    geometry.vertices.push(v3);
  }
  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  scene.add(arc);
  }



function setArcGetGeoPoints(pointStart, pointEnd, smoothness, color) {
  // calculate normal
  var geoPoints = [];
  var cb = new THREE.Vector3(), ab = new THREE.Vector3(), normal = new THREE.Vector3();
  cb.subVectors(new THREE.Vector3(), pointEnd);
  ab.subVectors(pointStart, pointEnd);
  cb.cross(ab);
  normal.copy(cb).normalize();
  // get angle between vectors
  var angle = pointStart.angleTo(pointEnd);
  //////////
  if (Math.abs(angle) < (Math.PI / 180)) {
    smoothness = 2;
  }
  else {
    smoothness = Math.abs(angle) * 180 / Math.PI;
    smoothness = Math.floor(smoothness);
    if (smoothness < 2) {
      smoothness = 2;
    }
  }
  //////
  if (Math.abs(angle) > Math.abs(angle - Math.PI * 2)) {
    angle = angle - Math.PI * 2;
  }
  var angleDelta = angle / (smoothness - 1);
  var geometry = new THREE.Geometry();
  for (var i = 0; i < smoothness; i++) {
    var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
    var latLon = vector3toLonLat(v3.clone());
    geoPoints.push(latLon);
    geometry.vertices.push(v3);
  }
  var arc = new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color, linewidth: 3.0
  }));
  return [arc, geoPoints];
  }


function getArcPoints (pointStart, pointEnd, smoothness)
{
  var points = [];
  if (smoothness < 3)
  {
    points.push(pointStart);
    points.push(pointEnd);

  }
  else
  {
    var cb = new THREE.Vector3(),
    ab = new THREE.Vector3(),
    normal = new THREE.Vector3();
    cb.subVectors(new THREE.Vector3(), pointEnd);
    ab.subVectors(pointStart, pointEnd);
    cb.cross(ab);
    normal.copy(cb).normalize();

    // get angle between vectors
    var angle = pointStart.angleTo(pointEnd);
    if (Math.abs(angle) > Math.abs(angle - Math.PI*2))
    {
      angle = angle - Math.PI * 2;
    }

    var  angleDelta = angle / (smoothness - 1);
  

  
    for (var i = 0; i < smoothness; i++)
     {
      var v3 = pointStart.clone().applyAxisAngle(normal, angleDelta * i);
      points.push(v3);
     }
     

  }
  return points;

}

//////////////
function pointInTriangle (position,coord1,coord2,coord3){
  
  
  var d1,d2,d3;
  var m1 = new THREE.Matrix3();
 m1.set(position.x, position.y, position.z, coord2.x, coord2.y, coord2.z, coord3.x, coord3.y, coord3.z );
 d1 = m1.determinant();

 
  var m2 = new THREE.Matrix3();
  m2.set(coord1.x, coord1.y, coord1.z, position.x, position.y, position.z, coord3.x, coord3.y, coord3.z);
  d2 = m2.determinant();

  
  var m3 = new THREE.Matrix3();
  m3.set(coord1.x, coord1.y, coord1.z, coord2.x, coord2.y, coord2.z, position.x, position.y, position.z);
  d3 = m3.determinant();

  if((d1>=0 && d2 >=0 && d3>=0) || (d1<=0 && d2 <=0 && d3<=0)){
      return true;
  }
  return false;
}


function randColorPoly (poly, index, array)
{
   if (poly.length < 3)
   {
     return
   }

   var points = [];
   for (var i=0; i< poly.length; i++)
   {
    var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
    points.push(tempV);
   }
   drawPolygon(points, getRandomColor());
}

function drawPoly ( poly, index, array)
{
  var clr = g_colors[index];
  clusterColors.push(clr);

  drawPolyAzimuthal(poly,clr)
  polyCounter++;
}

function v3toGeoArray (points)  // not Vector3
{
  var geoArray = [];
  for (var i=0; i< points.length; i++)
  {
    var temp = new THREE.Vector3(points[i][0], points[i][1], points[i][2]).normalize();
    var geoPoint = vector3toLonLat(temp);
    geoArray.push(geoPoint);
  }
  return geoArray;

}

function removeStrayEdges (orig_points)
{
  var points = removeStrayEdges1 (orig_points);

  //do one more time, starting from middle
  var shuffledPoints = [];
  var start = Math.floor(points.length/2);
  for (var i= start; i< points.length; i++)
  {
    shuffledPoints.push(points[i]);
  }
  for (var i=0; i< start; i++)
  {
    shuffledPoints.push(points[i]);
  }

  var finalPoints = removeStrayEdges1 (shuffledPoints);
  if (false == almostSame(finalPoints[0], finalPoints[finalPoints.length -1]))
  {
    finalPoints.push(finalPoints[0]);
  }

  /*
  var final = [];
  final.push(finalPoints[0]);

  for (var i=1; i<finalPoints.length; i++)
  {
    

    var distance = 0.0;
     
        distance = finalPoints[i-1].angleTo(finalPoints[i]);
        distance = Math.abs(distance * 180/Math.PI);
        
      
      if (distance > 8.0)
      {
        var smoothPoints = GetSmoothPoint(finalPoints[i-1], finalPoints[i], 10);
        for (var k=0; k<smoothPoints.length; k++)
        {
          final.push(smoothPoints[k]);
        }
      }
      else
      {
        final.push(finalPoints[i]);
      }
  }
  return final;
  */
 return finalPoints;
}
function removeStrayEdges1 (orig_points)
{
  // first go through remove consective points that are almost same
  var points = [];
  points.push(orig_points[0]);

  for (var i=1; i< orig_points.length -1; i++)
  {
    var p = points[points.length-1];
    if (false == almostSame(p, orig_points[i]) )
    {
      points.push(orig_points[i]);
    }
  }



  var flag = [];
  for (var i=0; i< points.length -1; i++)
  {
    flag.push(-1);
  }

  for (var i=1; i< points.length -1; i++)
  {
    var startj =0;
    if (i > (points.length -1)/2 )
    {
      startj =Math.floor( i - (points.length -1)/2);

    }
    for (var j=startj; j < i; j++)
    {
      if (almostSame (points[j], points[i]))
      {
        if (flag[j] < i)
        {
          flag[j] = i;
        }
      }
    }
  }
  var newPoints = [];
  var i=0; 
  while (i< points.length )
  {
    
      newPoints.push(points[i]);
      if (flag[i] > 0)
      {
         i = flag[i];
      }
      else
      {
        i++;
      }
    
  }
  return newPoints;
}


function almostSame (p1, p2)
{
  
  var angle = p1.angleTo(p2);
  if (Math.abs(angle*180/Math.PI) < 0.01)
  {
    return true;
  }
  return false;
}

function v3toGeoAndThreeArray (points)  // not Vector3
{
  var geoArray = [];
  var ThreeArray =[];
  for (var i=0; i< points.length; i++)
  {
    var temp = new THREE.Vector3(points[i][0], points[i][1], points[i][2]).normalize();
    var threeV = temp.multiplyScalar(sphereRadius);
    ThreeArray.push(threeV.clone());
   // var geoPoint = vector3toLonLat(temp);
   // geoArray.push(geoPoint);
  }

  
  var cleanV3Array = removeStrayEdges(ThreeArray);
  for (var i=0; i< cleanV3Array.length; i++)
  {
    //debugging 
    /*
    drawLabelAt(cleanV3Array[i], i.toString());
     if (i < cleanV3Array.length -1) 
     console.log(i + ": " +  cleanV3Array[i].angleTo(cleanV3Array[i+1])* 180/Math.PI);
     */
    ///////////

    var tmp = cleanV3Array[i].clone().normalize();
    var geoPoint = vector3toLonLat(tmp);
    geoArray.push(geoPoint);
  }
  
  
  //return [geoArray, ThreeArray];
  return [geoArray, cleanV3Array];

  /*  isClocwise not work for huge polygon.

  if (isClockwise(geoArray, cleanV3Array) )
 {
  return [geoArray, cleanV3Array];
 }
 else
 {
   console.log ("poly " + polyCounter + " is counter-clockwise");
   var geo = [];
   var v3 = [];
   for (var i= geoArray.length -1; i >=0; i--)
   {
     geo.push(geoArray[i]); v3.push(cleanV3Array[i]);
   }
   return [geo, v3];
 }
 */

}

function getArea (geoPoints)
{
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
  var area = d3.geoArea(geoPolyformat);
  return area;
}

function isClockwise (geoPoints, v3Points)
{
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   var c = d3.geoCentroid(geoPolyformat);
   var ctr = lonLatToVector3(c[0], c[1]).normalize();
   var centerV3 = ctr.clone().multiplyScalar(sphereRadius);
   
   var mid = Math.floor(v3Points.length/2);
   if (centerV3.clone().dot(v3Points[0]) < 0 )
   {
     return false;
   }
   if (centerV3.clone().dot(v3Points[mid]) < 0)
   {
     return false;
   }
   return true;
}

function testDrawPolyEarcut()
{
  var geoRectangle = [ [90, 10], [110, 20], [100, 40], [115, 25], [160, 50], [-160, 50], [150, 10], [145, 40], [120, 20], [130, 10]];
  var v3points = [];
  for (var i=0; i < geoRectangle.length; i++)
  {
    var vct3 = lonLatToVector3(geoRectangle[i][0], geoRectangle[i][1]);
    var v3 = [vct3.x, vct3.y, vct3.z];
    v3points.push(v3);
  }

  // test getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
 var ret = getCross180LatFromLonLat (160, 70, -150, 50);
  //var splitPolys = cutAlong180(geoRectangle);

  drawPolyEarcut2(v3points, getRandomColor());
}


function testDrawPolyEarcut3()
{
  var geoRectangle = [ [90, 10], [110, 20], [100, 40], [115, 25], [160, 50], [-160, 50], [150, 10], [145, 40], [120, 20], [130, 10]];

   var tmp2 = azimuthalProjection (geoRectangle);
  var v3points = [];
  for (var i=0; i < geoRectangle.length; i++)
  {
    var vct3 = lonLatToVector3(geoRectangle[i][0], geoRectangle[i][1]);
    drawLabelAt(vct3.clone().normalize().multiplyScalar(sphereRadius), i.toString());
   
    //var v3 = [vct3.x, vct3.y, vct3.z];
    v3points.push(vct3);
  }

  // test getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
 //var ret = getCross180LatFromLonLat (160, 70, -150, 50);
  //var splitPolys = cutAlong180(geoRectangle);

  drawPolyEarcut3(v3points, getRandomColor());
  
}

function triFaceInside ( a, b, c)
{
  var ac = c.clone().sub(a.clone()).normalize();
  var ab = b.clone().sub(a.clone()).normalize();
  var normal = ac.cross(ab).normalize();
  var final = normal.add(a.clone().normalize());
  if (final.length() < 1)
  {
    return true;
  }
  return false;

}
/**
 * 
 * @param {*} points : THREE.JS Vector3 normalized array, in clockwise order.
 */
function earcut3d (points) 
{
   var ret =[];
  
    var remain =[];
    for (var x=0; x< points.length; x++)
    {
      remain.push(x);
    }

    while (remain.length > 3)
    { 
      var newRemain = [];
      for (var i=0; i< remain.length-2; )
      {
        var a = remain[i];
        var b = remain[i+1];
        var c = remain[i+2];
        newRemain.push(a);
        // for a, b, c triangle.
        // remove same points and point in a straight line

        /****
         *     c
         *   b
         *     a
         */
        var  ba = points[a].clone().sub(points[b].clone()).normalize();
        if (isZero(ba))
        {
          i +=2;
          continue; // drop point b
        }
        var bc = points[c].clone().sub(points[b].clone()).normalize();
        if (isZero(bc))
        {
          i +=2;
          continue;  // drop b
        }

        var cross = ba.cross(bc).normalize();;
        if (isZero(cross))
        {
          i +=2;
          continue; // drop b, straigt line.
        }

        var addV = cross.add(points[b].clone().normalize());

        if (addV.length() > 1)
        {
          // cut it
          // clockwise
          ret.push(a); ret.push(b); ret.push(c);
          i +=2;
        }
        else
        {
          // can't cut
          //newRemain.push(b);
          i++;
        }

      }

      // push the last one/two points for next round
      while (i < remain.length)
      {
        newRemain.push(i);
        i++;
      }

      remain = newRemain;
    }

    // 3 points remaining, figure out clock wise or not
    var fa = remain[0];
    var fb = remain[1];
    var fc = remain[2];
    var  fba = points[fa].clone().sub(points[fb].clone());
    if (isZero(fba))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }
    var fbc = points[fc].clone().sub(points[fb].clone());
    if (isZero(fbc))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }

    var fcross = fba.cross(fbc).normalize();
    if (isZero(fcross))
    {
      // does not matter clockwise or not, straight line anyway
      ret.push(fa);
      ret.push(fb);
      ret.push(fc);
      return ret;
    }

    if (fcross.add(points[fb]).length() > 1)
    {
     
      // clockwise
      ret.push(fa); ret.push(fb); ret.push(fc);
    }
    else
    {
      //counter clockwise
      ret.push(fa); ret.push(fc);  ret.push(fb);
    }

    return ret;


  


}

function isZero (v3)
{
  if ( v3.length() < 0.0001)
  {
    return true;
  }
  return false;
}

function checkClockWise (points)
{
  var sum = 0.0;
  for (var i=0; i< points.length-1; i++)
  {
     sum += (points[i+1][1] - points[i][1])*(points[i+1][0] + points[i][0]);
  }

  if (sum > 0)
  {
    return true;
  }
  return false;
}

function findCenterPointGeo (geoData)
{
  var minLat, maxLat, minLon, maxLon;

  
  minLon = maxLon = geoData[0][0];
  minLat = maxLat = geoData[0][1];

  for (var i=1; i<geoData.length; i++)
  {
    
    var lon = geoData[i][0];
    var lat = geoData[i][1];
    if (lon < minLon)
    {
      minLon = lon;
    }
    if (lon > maxLon)
    {
      maxLon = lon;
    }
    if (lat < minLat)
    {
      minLat = lat;
    }
    if (lat > maxLat)
    {
      maxLat = lat;
    }
  }

  var midLat = (minLat + maxLat)/2.0;

  //we have to take care of +180 and -180 scenarios
  var midLon;
  // all positives or all negative
  if  (((minLon >=0) && (maxLon >=0)) || ((minLon <=0) && (maxLon <=0)))
  {
   midLon = (minLon + maxLon)/2.0;
  }
  else
  {
    // one positive and one negative, which mean minLon is negative.
    if (Math.abs(minLon) + Math.abs(maxLon) <= 180.0)
    {
      midLon = (minLon + maxLon)/2.0;
    }
    else
    {
      var reverseMid = ((180 - Math.abs(minLon) ) + (180 -Math.abs(maxLon)))/2;
      if (Math.abs(minLon) < Math.abs(maxLon))
      {
        midLon = minLon - reverseMid;
      }
      else
      {
        midLon = maxLon + reverseMid;
      }
    }
  }
  //return lonLatToVector3(midLon*Math.PI/180, midLat*Math.PI/180);
  return [midLon, midLat];
}

function splitPolyTo (geoPoints, v3Points, maxArea)
{
  // split twice at most
  var ret = [];
  var t = splitPoly(geoPoints, v3Points);
  for (var i=0; i < t.length; i++)
  {
    if (getArea(t[i][0]) > maxArea)
    {
      t1 = splitPoly(t[i][0], t[i][1]);
      ret.push(t1[0]);
      ret.push(t1[1]);
    }
    else
    {
      ret.push(t[i]);
    }
  }
  return ret;
  
}


function splitPoly (geoPoints, v3Points)
{
  //idea: center to nearest point p1, and then to nearest point p2 that is the opposite direction of p1.
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   var c = d3.geoCentroid(geoPolyformat);
   var ctr = lonLatToVector3(c[0], c[1]).normalize();
   var centerV3 = ctr.clone().multiplyScalar(sphereRadius);

   var twoIndex = getNearest2Points( centerV3, v3Points);

   var geo1 = [];
   var geo2 = [];
   var v1 = [];
   var v2 =[];

   var a = twoIndex[0]; 
   var b = twoIndex[1];

   for (var i = a; i <=b; i++)
   {
     geo1.push(geoPoints[i]);
     v1.push(v3Points[i]);
   }
   geo1.push(c); v1.push(centerV3);
   geo1.push(geoPoints[a]); v1.push(v3Points[a]);

   //second poly
   geo2.push(geoPoints[a]); v2.push(v3Points[a]);
   geo2.push(c); v2.push(centerV3);
   for (var i= b; i < v3Points.length; i++)
   {
    geo2.push(geoPoints[i]);
    v2.push(v3Points[i]);
   }
   for (var i=0; i<=a; i++)
   {
    geo2.push(geoPoints[i]);
    v2.push(v3Points[i]);
   }

   return [[geo1, v1], [geo2, v2]];


}

function getNearest2Points ( center, v3Points)
{
  var angle = Math.abs(center.angleTo(v3Points[0]));
  var idx =0;
  for (var i=1; i< v3Points.length; i++)
  {
     var a =  Math.abs(center.angleTo(v3Points[i]));
     if (a < angle)
     {
       angle = a;
       idx = i;
     }
  }
  // now find the index on the opposite side using dot operation.
  var v1 = v3Points[idx].clone().sub(center.clone());
  var idx2 = -1;
  var angle2 = 999; //init big value
  for (var i=0; i< v3Points.length; i++)
  {
    if (i != idx)
    {
      var v2 =  v3Points[i].clone().sub(center.clone());
      if (v2.dot(v1) < 0)
      {
        var b = Math.abs(center.angleTo(v3Points[i]));
        if (b < angle2)
        {
          angle2 = b;
          idx2 = i;
        }
      }
    }
  }

  if (idx2 > idx)
  {
    return [idx, idx2];
  }
  else
  {
    return [idx2, idx];
  }

  
}

function azimuthalProjection (geoPoints, theColor="")
{
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   
  var c = d3.geoCentroid(geoPolyformat);
 //var c= findCenterPointGeo(geoPoints);
    
  // for debuging only comment out later///////////////
  //plot out the center with Polygon cluster number:
  /*
  var ctr = lonLatToVector3(c[0], c[1]).normalize();
  var centerV3 = ctr.clone().multiplyScalar(sphereRadius);
  var ctrForLine = ctr.clone().multiplyScalar(sphereRadius + 2);
   
  ////// to be commented out /////////////
  if (polyCounter < gNodes.length )
  {  var lbl = gNodes[polyCounter].label;
    if (polyCounter != 20  && polyCounter != 41)
    { 
      if ((lbl != "Modest Mouse")  && (lbl != "Aerosmith"))
      {
        gLabelTable[lbl] = ctrForLine;
      // drawLabelAt (centerV3, polyCounter.toString());
        drawLabelAt (centerV3, lbl);
        var nodeColor = invertColor(theColor);
        spot(centerV3, nodeColor);
      }
    }
  }
  else
  {
  drawLabelAt (centerV3, polyCounter.toString());
  }
  ////////////// to be comment out above /////////////////
  ***/



  var projection = d3.geoAzimuthalEquidistant().rotate([-c[0], -c[1]]);
  var ret =[];

  for (var i=0; i< geoPoints.length; i++)
  {
    var p = projection(geoPoints[i]);
    ret.push(p);
  }

  return ret;
} 


function drawPolyEarcut (points, theColor, )
{
  var geoArray = v3toGeoArray (points);

 

  var wrapper =[];
  wrapper.push(geoArray);
  //wrapper.push(points);
  var data = earcut.flatten(wrapper);
  var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

  var c = -1; // the counter

  const polyGeometry = new THREE.Geometry();

  for ( var i=0; i <= triangles.length -3; i += 3)
  {
    // clock wise triangle
    /*************
        tb--------tc 
        \       /
          \   /
             ta
            
    ************/
    var ia = triangles[i]; 
    var ib = triangles[i+1];
    var ic = triangles[i+2];

    

    var ta = new THREE.Vector3(points[ia][0],points[ia][1], points[ia][2]).normalize().multiplyScalar(sphereRadius);
    var tb = new THREE.Vector3(points[ib][0],points[ib][1], points[ib][2]).normalize().multiplyScalar(sphereRadius);
    var tc = new THREE.Vector3(points[ic][0],points[ic][1], points[ic][2]).normalize().multiplyScalar(sphereRadius);

    // push ta into the vertice array
    c++;
    polyGeometry.vertices.push(ta);
    var taCounter = c;

    var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
    var sectionPoints = getArcPoints(tb, tc, smooth);

    for (var j =0; j< smooth - 1; j++)
    {
      var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
      var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
      var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
      
      for (var k =0; k < cordSmooth; k++)
      {
        polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
        c++;
        polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
        c++;

        if (k == 0)
        {
         // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
          polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
        }
        else
        {
          //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

         // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

        }
      }
    }
  }  // end of for ( var i=0; i < triangles.length -3; i += 3)

  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
     /* wireframe: true,   */
      vertexColors: THREE.FaceColors
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);  

}


function invertColor(hex) {
  if (hex.indexOf('#') === 0) {
      hex = hex.slice(1);
  }
  // convert 3-digit hex to 6-digits.
  if (hex.length === 3) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }
  if (hex.length !== 6) {
      throw new Error('Invalid HEX color.');
  }
  // invert color components
  var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),
      g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),
      b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);
  // pad each with zeros and return
  return '#' + padZero(r) + padZero(g) + padZero(b);
}

function padZero(str, len) {
  len = len || 2;
  var zeros = new Array(len).join('0');
  return (zeros + str).slice(-len);
}


function drawPolyEarcut3 (points, theColor)
{
  
  var triangles = earcut3d(points);
  
  var c = -1; // the counter

  const polyGeometry = new THREE.Geometry();

  for ( var i=0; i <= triangles.length -3; i += 3)
  {
    // clock wise triangle
    /*************
        tb--------tc 
        \       /
          \   /
            ta
            
    ************/
    var ia = triangles[i]; 
    var ib = triangles[i+1];
    var ic = triangles[i+2];

    

    var ta = points[ia].clone().normalize().multiplyScalar(sphereRadius);
    var tb =points[ib].clone().normalize().multiplyScalar(sphereRadius);
    var tc =points[ic].clone().normalize().multiplyScalar(sphereRadius);

    // push ta into the vertice array
    c++;
    polyGeometry.vertices.push(ta);
    var taCounter = c;

    var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
    var sectionPoints = getArcPoints(tb, tc, smooth);

    for (var j =0; j< smooth - 1; j++)
    {
      var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
      var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
      var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
      
      for (var k =0; k < cordSmooth; k++)
      {
        polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
        c++;
        polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
        c++;

        if (k == 0)
        {
        // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
          polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
        }
        else
        {
          //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

        // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
          polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

        }
      }
    }
  }  // end of for ( var i=0; i < triangles.length -3; i += 3)

  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      wireframe: true,   
      vertexColors: THREE.FaceColors
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);  
  

  
}


function drawPolyAzimuthal (gPoints, theColor )
{
  var conv = v3toGeoAndThreeArray (gPoints);
  var geoArray = conv[0];
  var points = conv[1];

  var area = getArea(geoArray);
  console.log ("poly " + polyCounter + " area:" + area);

  if (area < 1.8)  // entire sphere area  is 4*PI = 12.
  {
    drawPolyAzimuthal2 (geoArray, points, theColor );
    return;
  }
  
  var split = splitPolyTo(geoArray, points, 1.8);

  for (var i=0; i< split.length; i++)
  {
   drawPolyAzimuthal2 (split[i][0], split[i][1], theColor )
  }
  /*
  var l = geoArray.length/2;
  l = Math.floor(l);
  var geo1 = [];
  var geo2 =[];
  var p1 = [];
  var p2 =[];
  for (var i=0; i<= l; i++)
  {
    geo1.push(geoArray[i]);
    p1.push(points[i]);
  }
  geo1.push(geoArray[0]);
  p1.push(points[0]);

  for (var i=l; i< points.length; i++)
  {
    geo2.push(geoArray[i]);
    p2.push(points[i]);
  }
  geo2.push(geoArray[l]);
  p2.push(points[l]);
  */

  //drawPolyAzimuthal2 (geo1, p1, theColor );
  //drawPolyAzimuthal2 (geo2, p2, theColor );

 // drawPolyAzimuthal2 (geo1, p1, getRandomColor() );
 // drawPolyAzimuthal2 (geo2, p2, theColor );


}
function drawPolyAzimuthal2 (geoArray, points , theColor)
{
  /*
  var conv = v3toGeoAndThreeArray (gPoints);
  var geoArray = conv[0];
  var points = conv[1];
  */
  var aziArray = azimuthalProjection (geoArray, theColor);

  // debugging only: did not work
  //var clockwise = checkClockWise(aziArray);
  //console.log(clockwise);
  ////////////

 
    

    var wrapper =[];
    wrapper.push(aziArray);
  
    var data = earcut.flatten(wrapper);
    var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

    var c = -1; // the counter

    const polyGeometry = new THREE.Geometry();

    for ( var i=0; i <= triangles.length -3; i += 3)
    {
      // clock wise triangle
      /*************
          tb--------tc 
          \       /
            \   /
              ta
              
      ************/
      var ia = triangles[i]; 
      var ib = triangles[i+1];
      var ic = triangles[i+2];

      

      var ta = points[ia];
      var tb =points[ib];
      var tc =points[ic];


      // test out wrong clockwise direction.
      
       if (triFaceInside (ta, tb, tc) )
       {
         // switch tb, tc
         tb = points[ic];
         tc = points[ib];
       }
       

      // push ta into the vertice array
      c++;
      polyGeometry.vertices.push(ta);
      var taCounter = c;

      var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
      var sectionPoints = getArcPoints(tb, tc, smooth);

      for (var j =0; j< smooth - 1; j++)
      {
        var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
        var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
        var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
        
        for (var k =0; k < cordSmooth; k++)
        {
          polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (k == 0)
          {
            polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
           // polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
          }
          else
          {
            polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
           // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

             polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
            //polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

          }
        }
      }
    }  // end of for ( var i=0; i < triangles.length -3; i += 3)

    const polyMaterial = new THREE.MeshBasicMaterial(
      {color: theColor,
        side: THREE.DoubleSide,
       /*wireframe: true,  */ 
        vertexColors: THREE.FaceColors
      });

    const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
    scene.add(myPoly);  
  

}

function drawPolyEarcut2 (gPoints, theColor, )
{
  var geoArray = v3toGeoArray (gPoints);

  var splitPolysBig = cutAlong180(geoArray);
  var splitPolys = [];
  for (var xx=0; xx < splitPolysBig.length; xx++)
  {
    splitPolys = splitPolys.concat(slicePoly(splitPolysBig[xx], 90));
  }

  for (var q=0; q< splitPolys.length; q++)
  {
    //test color
    theColor = getRandomColor();


    var points = [];
    for (var t=0; t< splitPolys[q].length; t++)
    {
      var tmp = lonLatToVector3(splitPolys[q][t][0], splitPolys[q][t][1] ).normalize().multiplyScalar(sphereRadius);
      points.push(tmp);
    }

    var wrapper =[];
    wrapper.push(splitPolys[q]);
    //wrapper.push(points);
    var data = earcut.flatten(wrapper);
    var triangles = earcut(data.vertices, data.holes, data.dimensions); // the output triangles seem to be clockwise.

    var c = -1; // the counter

    const polyGeometry = new THREE.Geometry();

    for ( var i=0; i <= triangles.length -3; i += 3)
    {
      // clock wise triangle
      /*************
          tb--------tc 
          \       /
            \   /
              ta
              
      ************/
      var ia = triangles[i]; 
      var ib = triangles[i+1];
      var ic = triangles[i+2];

      

      var ta = points[ia];
      var tb =points[ib];
      var tc =points[ic];

      // push ta into the vertice array
      c++;
      polyGeometry.vertices.push(ta);
      var taCounter = c;

      var smooth = GetSmoothness(tb, tc);  // cut line between tb and tc into smaller arcs
      var sectionPoints = getArcPoints(tb, tc, smooth);

      for (var j =0; j< smooth - 1; j++)
      {
        var cordSmooth =  GetSmoothness (ta, sectionPoints[j]);
        var cordPointsAb = getArcPoints(ta, sectionPoints[j], cordSmooth);
        var cordPointsAc = getArcPoints(ta, sectionPoints[j+1], cordSmooth);
        
        for (var k =0; k < cordSmooth; k++)
        {
          polyGeometry.vertices.push(cordPointsAb[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsAc[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (k == 0)
          {
          // polyGeometry.faces.push( new THREE.Face3 (taCounter, c, c-1));   //Face3 needs counter clockwise points
            polyGeometry.faces.push( new THREE.Face3 (taCounter, c-1, c));   //Face3 needs  clockwise points?
          }
          else
          {
            //polyGeometry.faces.push( new THREE.Face3 (c-3, c-2, c));  //counter clockwise
            polyGeometry.faces.push( new THREE.Face3 (c-3, c, c-2));  // clockwise

          // polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));  // counter clockwise
            polyGeometry.faces.push( new THREE.Face3 (c-3, c-1, c));  // clockwise

          }
        }
      }
    }  // end of for ( var i=0; i < triangles.length -3; i += 3)

    const polyMaterial = new THREE.MeshBasicMaterial(
      {color: theColor,
       /*wireframe: true,   */
        vertexColors: THREE.FaceColors
      });

    const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
    scene.add(myPoly);  
  }

}

function randColorPolyLine (poly, index, array)
{
  var clr = getRandomColor();

  if ((polyCounter ==34) /*|| (polyCounter % 2 == 0) */ )
  {
    var points = [];
    var geoPoints =[];
    for (var i=0; i< poly.length; i++)
    {
      var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
      points.push(tempV.clone());

      var geoPoint = vector3toLonLat(tempV);
      geoPoints.push(geoPoint);
      //if( (i == 2 ) || (i== 10) || (i ==20) || (i==30 ) || (i== 60) || (i== 150) || (i== poly.length - 1))
      {
      // drawLabelAt(tempV, i.toString());
      }

    }



    //var hulls = d3.polygonHull(geoPoints);
   //var hulls = geoPoints;


   points.push(points[0]);
   geoPoints.push(vector3toLonLat(points[0].clone()));
   

   

  for (var i=0; i< points.length-1; i++)
  {
    var start = points[i];
    var end =  points[i+1 ];
    var ret = setArcGetGeoPoints(start, end, 6, clr);
    scene.add(ret[0]);
  }
  

  var ctr = findCenterPoint(points);
  drawLabelAt(ctr.normalize().multiplyScalar(sphereRadius), 'c' + polyCounter.toString());


  

  
  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};

  
      
      geometry.computeFaceNormals();

      for ( var j = 0; j < geometry.faces.length; j ++ )
      {
        var normalGeo = vector3toLonLat (geometry.faces[j].normal);
        //var idx = geometry.faces[j].a;
       // var normalGeo = vector3toLonLat (geometry.vertices[idx]);
        if (d3.geoContains(geoPolyformat, normalGeo) )
       // if (d3.polygonContains(hulls, normalGeo) )
        {
          geometry.faces[ j ].color.setHex(  0xffff00 );
           //geometry.faces.splice(j, 1) ;
        }
    
      }
      //geometry.elementsNeedUpdate = true;///////////////
      geometry.colorsNeedUpdate = true;
      
      
      
  }
  polyCounter++;
  
  
}

// split along the +- 180 lontitude line
function splitPolygon (geoPts)
{
  var retPolys = []
  
}


function  PointInPoly(polyPoints, L)
{
  var x = L[0], y = L[1];

  var inside = false;

  var intersections = 0;

  var ss;

  for (var i = 0, j = polyPoints.length -1; i < polyPoints.length; j = i++)
   {

    var xi = polyPoints[i][0], yi = polyPoints[i][1]; var xj = polyPoints[j][0], yj = polyPoints[j][1];
    if (yj == yi && yj == y && x > Math.min(xj, xi) && x < Math.max(xj, xi)) 
    { // Check if point is on an horizontal polygon boundary
     return true;

    }

    if (y > Math.min(yj, yi) && y <= Math.max(yj, yi) && x <= Math.max(xj, xi) && yj != yi)
    {
      ss = (y - yj) * (xi - xj) / (yi - yj) + xj;
      if (ss == x) 
      { // Check if point is on the polygon boundary (other than horizontal)
        return true;
      }

      if (xj == xi || x <= ss) 
      {
        intersections++;
      } 
    }
  }

  // If the number of edges we passed through is odd, then it’s in the polygon.

  if (intersections % 2 != 0) 
  {
    return true;
  } 
  else
  {
    return false;
  }
}



function randColorPoly2 (poly, index, array)
{
   if (poly.length < 3)
   {
     return
   }

   var points = [];
   for (var i=0; i< poly.length; i++)
   {
    var tempV = new THREE.Vector3(poly[i][0],poly[i][1], poly[i][2]).normalize().multiplyScalar(sphereRadius);
    points.push(tempV);
   }
   var polyCenter = findCenterPoint(points);

   //if ((index > 10) && (index < 13))
   //{
     spot(polyCenter.normalize().multiplyScalar(sphereRadius), 'pink');
   
    //drawPolygon2(points, polyCenter, getRandomColor(), true);

    drawPolygon3(points, getRandomColor(), false);
  //}
}

function drawPolygon( abcde, theColor)
{
  //abcde are points (vertex) in vector3 format.
  // walk from a to b to c to d to e... and back to a. After every degree create an additional point (lat, lon).
  var geoJsonArray =[];
  var polyArray =[];

  var smoothness = 8;
  for (var i=0; i< abcde.length-1; i++)
  {
  var smoothness = 8;
  var arcAndGeoPoints = setArcGetGeoPoints(abcde[i], abcde[i+1], smoothness, theColor);
     // scene.add(arcAndGeoPoints[0]);
      polyArray = polyArray.concat(arcAndGeoPoints[1]);
  }
  var closing = setArcGetGeoPoints(abcde[abcde.length-1], abcde[0], smoothness, theColor);
 // scene.add(closing[0]);
  polyArray = polyArray.concat(closing[1]);
  geoJsonArray.push(polyArray);

  //draw a polygon with color
const polyMesh = new THREE.Mesh(
  //new THREE.ConicPolygonGeometry(polygonGeoJson, 0, sphereRadius, false, true, false ),
  new THREE.ConicPolygonBufferGeometry(geoJsonArray, 0, sphereRadius, false, true, false ),
 
  new THREE.MeshBasicMaterial({ color: theColor })
);
scene.add(polyMesh);
}

/***
 *  sides: THREE.Vector3 arrays of 3d point forming the outsides of the polygon.
 *  center: a THREE.Vector3 3d point inside the polygon, does not have to be exactly the center point.
 * sidesCounterClockWise: weather the side point array goes couterclockwise or not.
 */
function drawPolygon2 (sides, center, theColor, sidesCounterClockWise = true)
{
  /***
   * idea:  connect the central point to every out edge point, to form trianles, then sub divide each triangle to more smaller triangles to form a mesh.
   */

  const polyGeometry = new THREE.Geometry();
  polyGeometry.vertices.push(center.normalize().multiplyScalar(sphereRadius));
   var c = 0;

   if (false == sides[0].equals(sides[sides.length-1]))
   {
     sides.push(sides[0]);
   }

  for (var i=0; i < sides.length-1; i++)
  {
      var smooth = GetSmoothness(sides[i], sides[i+1]);
      var sectionPoints = getArcPoints(sides[i], sides[i+1], smooth);
      for (var j =0; j< smooth - 1; j++)
      {
         var cordSmooth =  GetSmoothness (center, sectionPoints[j]);
         var cordPointsA = getArcPoints(center, sectionPoints[j], cordSmooth);
         var cordPointsB = getArcPoints(center, sectionPoints[j+1], cordSmooth);
         for (var k =0; k < cordSmooth; k++)
         {
          polyGeometry.vertices.push(cordPointsA[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsB[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (true == sidesCounterClockWise)
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c-1, c));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -1, c- 2));
              polyGeometry.faces.push( new THREE.Face3 (c-2, c -1, c));
            }

          }
          else
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c, c-1));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -2, c));
              polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));
            }
          }

        }
      }
  }
 


  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      /* wireframe: true, */
      vertexColors: THREE.FaceColors
      
      
      
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  scene.add(myPoly);
}



function drawPolygon3(sides, theColor, sidesCounterClockWise = true)
{
  /***
   * idea:  connect the central point to every out edge point, to form trianles, then sub divide each triangle to more smaller triangles to form a mesh.
   */


  var geoPoints =[];
  for (var i=0; i< sides.length; i++)
  {
    
    
    var geoPoint = vector3toLonLat(sides[i].clone());
    geoPoints.push(geoPoint);
  }
  geoPoints.push(geoPoints[0]);

  var geoPolyformat = {type: "Polygon", coordinates: [geoPoints]};
   
  var geoCenter = d3.geoCentroid(geoPolyformat);
  var center = lonLatToVector3(geoCenter[0], geoCenter[1]);



  const polyGeometry = new THREE.Geometry();
  polyGeometry.vertices.push(center.normalize().multiplyScalar(sphereRadius));
   var c = 0;

   if (false == sides[0].equals(sides[sides.length-1]))
   {
     sides.push(sides[0]);
   }

  for (var i=0; i < sides.length-1; i++)
  {
      var smooth = GetSmoothness(sides[i], sides[i+1]);
      var sectionPoints = getArcPoints(sides[i], sides[i+1], smooth);
      for (var j =0; j< smooth - 1; j++)
      {
         var cordSmooth =  GetSmoothness (center, sectionPoints[j]);
         var cordPointsA = getArcPoints(center, sectionPoints[j], cordSmooth);
         var cordPointsB = getArcPoints(center, sectionPoints[j+1], cordSmooth);
         for (var k =0; k < cordSmooth; k++)
         {
          polyGeometry.vertices.push(cordPointsA[k].normalize().multiplyScalar(sphereRadius));
          c++;
          polyGeometry.vertices.push(cordPointsB[k].normalize().multiplyScalar(sphereRadius));
          c++;

          if (true == sidesCounterClockWise)
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c-1, c));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -1, c- 2));
              polyGeometry.faces.push( new THREE.Face3 (c-2, c -1, c));
            }

          }
          else
          {
            if (k == 0)
            {
              polyGeometry.faces.push( new THREE.Face3 (0, c, c-1));
            }
            else
            {
              polyGeometry.faces.push( new THREE.Face3 (c-3, c -2, c));
              polyGeometry.faces.push( new THREE.Face3 (c-3, c, c -1));
            }
          }

        }
      }
  }
 


  const polyMaterial = new THREE.MeshBasicMaterial(
    {color: theColor,
      /* wireframe: true, */
      vertexColors: THREE.FaceColors
      
      
      
    });

  const myPoly = new THREE.Mesh(polyGeometry, polyMaterial);
  
  scene.add(myPoly);
  
  polyGeometry.computeFaceNormals();

  for ( var j = 0; j < polyGeometry.faces.length; j ++ )
  {
    var normalGeo = vector3toLonLat (polyGeometry.faces[j].normal);
    //var idx = geometry.faces[j].a;
    // var normalGeo = vector3toLonLat (geometry.vertices[idx]);
    if (false == d3.geoContains(geoPolyformat, normalGeo) )
    // if (d3.polygonContains(hulls, normalGeo) )
    {
      //polyGeometry.faces[ j ].color.setHex(  0xffffff );
        polyGeometry.faces.splice(j, 1) ;
    }

  }
  geometry.elementsNeedUpdate = true;///////////////
  polyGeometry.colorsNeedUpdate = true;
  

  
  }


////////////////
function vector3toLonLat( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [ lng*(180.0/Math.PI),lat*(180.0/Math.PI) ];

}

function vector3toLonLatRadians( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [ lng,lat ];

}


function vector3toLatLon( vector3 )
{

    vector3.normalize();

    //longitude = angle of the vector around the Y axis
    //-( ) : negate to flip the longitude (3d space specific )
    //- PI / 2 to face the Z axis
    var lng = -( Math.atan2( -vector3.z, -vector3.x ) ) - Math.PI / 2;

    //to bind between -PI / PI
    if( lng < - Math.PI )lng += Math.PI * 2;

    //latitude : angle between the vector & the vector projected on the XZ plane on a unit sphere

    //project on the XZ plane
    var p = new THREE.Vector3( vector3.x, 0, vector3.z );
    //project on the unit sphere
    p.normalize();

    //commpute the angle ( both vectors are normalized, no division by the sum of lengths )
    var lat = Math.acos( p.dot( vector3 ) );

    //invert if Y is negative to ensure teh latitude is comprised between -PI/2 & PI / 2
    if( vector3.y < 0 ) lat *= -1;

    return [lat*(180.0/Math.PI), lng*(180.0/Math.PI) ];

}

/**
 * converts a XYZ vector3 to longitude latitude (Direct Polar)
 * @param lng longitude, in degree ( -180 to + 180)
 * @param lat latitude, in degree ( -90 to + 50)
 * @param vector3 optional output vector3
 * @returns a unit vector of the 3d position
 */
function lonLatToVector3( lng, lat, out )
{
    lng = lng*Math.PI/180;
    lat = lat*Math.PI/180;

    out = out || new THREE.Vector3();

    //flips the Y axis
    lat = Math.PI / 2 - lat;

    //distribute to sphere
    out.set(
                Math.sin( lat ) * Math.sin( lng ),
                Math.cos( lat ),
                Math.sin( lat ) * Math.cos( lng )
    );

    return out;

}

function getCrossLatFromLonLat (lon0, lat0, lon1, lat1, lont)
{
  if (Math.abs(lat1 - lat0) < 0.01)
  {
    return (lat1 + lat0)/2.0;
  }
 
  var est =  lat0 + (lat1 -lat0) *( lont  - lon0)/ ( lon1 -lon0);

  var v0 = lonLatToVector3(lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);
  v0.cross(v1);

  var l0 = lonLatToVector3(lont, lat0);
  var l1 = lonLatToVector3(lont, lat1);
  l0.cross(l1);

  var x1 = v0.clone().cross(l0);
  var x2 = l0.clone().cross(v0);

  var lonlat1 = vector3toLonLat(x1);
  var lonlat2 = vector3toLonLat(x2);
 
  if (Math.abs(lonlat1[1] - est) < Math.abs(lonlat2[1] -est) )
  {
    return lonlat1[1];
  }
  else
  return lonlat2[1];


}


function getCross180LatFromLonLat (lon0, lat0, lon1, lat1)
{
  if (Math.abs(lat1 - lat0) < 0.01)
  {
    return (lat1 + lat0)/2.0;
  }

  
  //return getCrossLatFromLonLat(lon0, lat0, lon1, lat1, 180);

 var est =  lat0 + (lat1 -lat0) *( 180  - Math.abs(lon0) )/ ( 180  - Math.abs(lon0) + 180 - Math.abs(lon1));

 var v0 = lonLatToVector3(lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);
  v0.cross(v1);

  var l0 = lonLatToVector3(180, lat0);
  var l1 = lonLatToVector3(180, lat1);
  l0.cross(l1);

  var x1 = v0.clone().cross(l0);
  var x2 = l0.clone().cross(v0);

  var lonlat1 = vector3toLonLat(x1);
  var lonlat2 = vector3toLonLat(x2);
 
  if (Math.abs(lonlat1[1] - est) < Math.abs(lonlat2[1] -est) )
  {
    return lonlat1[1];
  }
  else
  return lonlat2[1];

  //https://gis.stackexchange.com/questions/18562/how-can-i-make-a-polyline-wrap-around-the-world
  // original post is in Cartesian coordinates
 
  //(x0, y0, z0) = (cos(lon0)*sin(lat0), sin(lon0)*sin(lat0), cos(lat0))
  
   var x0 = Math.cos(lon0*Math.PI/180)*Math.sin(lat0*Math.PI/180);
   var y0 = Math.sin(lon0*Math.PI/180) * Math.sin(lat0*Math.PI/180);
   var z0 = Math.cos(lat0*Math.PI/180);

   var x1 = Math.cos(lon1*Math.PI/180)*Math.sin(lat1*Math.PI/180);
   var y1 = Math.sin(lon1*Math.PI/180) * Math.sin(lat1*Math.PI/180);
   var z1 = Math.cos(lat1*Math.PI/180);

   var t = y1 / (y1 - y0);

   //(x, y, z) = (t * x0 + (1-t) * x1, 0, t * z0 + (1-t) * z1)
   var x = t * x0 + (1-t) * x1;
   var z =  t * z0 + (1-t) * z1;
   
   //lat2 = ATan(z/x).
   var lat2 = Math.atan(z/x)*180/Math.PI;
   return lat2;






  // based on   
  //https://gis.stackexchange.com/questions/18562/how-can-i-make-a-polyline-wrap-around-the-world
  // original post is in Cartesian coordinates, not Three.js's, so  bit conversion. 
  /**
    Cartesin:   z                             WebGL THREE.JS:           y
                |                                                       |
                |                                                       |
                --------y                                                --------- x
               /                                                       /
              /                                                       /
            x                                                        z

  var v0 = lonLatToVector3 (lon0, lat0);
  var v1 = lonLatToVector3(lon1, lat1);

  var t = v1.z/(v1.x - v0.x);
  var z = t*v0.z + (1-t)*v1.z;
  var y = t*v0.y + (1-t)*v1.y

  var lat2 = Math.atan(y/z)*180/Math.PI;

  return lat2;
  */


}

function slicePoly (poly, wlont)
{
  var ret =[];
  var minMax = polyMinMaxLon (poly);
  if (minMax[1] - minMax[0] <=wlont)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    var polyArray = cutAlongLont (poly, minMax[0] + (minMax[1] - minMax[0])/2);
    for (var i=0; i < polyArray.length; i++)
    {
       var newPolyArray = slicePoly(polyArray[i], wlont);
       ret = ret.concat(newPolyArray);

    }
    return ret;
  }
}

function polyMinMaxLon (poly)
{
  var min = poly[0][0];
  var max = min;
  for (var i=1; i<poly.length; i++)
  {
    if (poly[i][0] < min)
    {
      min = poly[i][0];
    }
    if (poly[i][0] > max)
    {
      max = poly[i][0];
    }
  }

  return [min, max];
}

// the poly arrray in  geo point.
function cutAlong180 (poly)
{
  var ret = [];
  var crossIndice =[];   // contain [beforeIdx, afterIdx, crossLat]


  var counter =0;  // how many times crossed the line

  for (var i=0; i < poly.length-1; i++)
  {
    if (Math.abs(poly[i][0] - poly[i+1][0]) > 180)
    {
      counter++;
      var crossLat = getCross180LatFromLonLat(poly[i][0], poly[i][1], poly[i+1][0], poly[i+1][1]);
      var cross = [i, i+1, crossLat];
      if ((crossIndice.length == 0) || (crossLat <= crossIndice[crossIndice.length-1][2]) )
      {
        crossIndice.push(cross);
      }
      else
      {
        for (var j=0; j< crossIndice.length; j++)
        {
          if (crossLat > crossIndice[j][2])
          {
            crossIndice.splice(j, 0, cross);
            break; 
          }
        }
        
      }
    }
  }

  // check end point to start point
  var end = poly.length -1;
  if (Math.abs(poly[end][0] - poly[0][0]) > 180)
  {
    counter++;
    var crossLat2 = getCross180LatFromLonLat(poly[end][0], poly[End][1], poly[0][0], poly[0][1]);
    var cross2 = [end, 0, crossLat2];
    if ((crossIndice.length == 0) || (crossLat2 <= crossIndice[crossIndice.length-1][2]) )
    {
      crossIndice.push(cross2);
    }
    else
    {
      for (var j=0; j< crossIndice.length; j++)
      {
        if (crossLat2 > crossIndice[j][2])
        {
          crossIndice.splice(j, 0, cross2);
          break; 
        }
      }
      
    }
  }


  if (counter == 0)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    // split into two poly, and recursively keep spliting
    var rightPoly =[];  // negative lon
     var rstart = [-180, crossIndice[0][2]];
     rightPoly.push(rstart);

     // then copy from after index of top cross all the way to the before index of the 2nd cross
     if (crossIndice[1][0] >= crossIndice[0][1])
     {
       for (var k = crossIndice[0][1];k <= crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }
     else
     {
       // rounded back to o, 1, 2, ...
       for (var k = crossIndice[0][1]; k <= poly.length -1; k++)
       {
         rightPoly.push(poly[k]);
       }

       for (var k = 0; k < crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }

     var rend = [ -180, crossIndice[1][2] ];
     rightPoly.push (rend);


     var leftPoly = [];
     var lstart = [180, crossIndice[1][2]];
     leftPoly.push(lstart);

     // then copy from after index of 2nd top cross all the to the before index of the 1st top cross
     if (crossIndice[0][0] >= crossIndice[1][1])
     {
       for (var k = crossIndice[1][1]; k  <= crossIndice[0][0]; k++ )
       {
         leftPoly.push(poly[k]);
       }
     }
     else
     {
       for (var k= crossIndice[1][1]; k <= poly.length -1; k++)
       {
         leftPoly.push(poly[k]);

       }
       for (var k=0; k <= crossIndice[0][0]; k++)
       {
        leftPoly.push(poly[k]);
       }
     }

     var lend = [180, crossIndice[0][2]];
     leftPoly.push(lend);

     return cutAlong180(leftPoly).concat(cutAlong180(rightPoly));





  }



}

function crossedLont (leftLon, crossLon, rightLon)
{
   if ( ( ( leftLon < crossLon) && (rightLon > crossLon) ) ||   ((rightLon < crossLon) && (leftLon > crossLon)))
    {
      return true;
    }
    return false;

}

// cut along a latitude, the poly is not cross 180
function cutAlongLont (poly, lont)
{
  var ret = [];
  var crossIndice =[];   // contain [beforeIdx, afterIdx, crossLat]


  var counter =0;  // how many times crossed the line

  for (var i=0; i < poly.length-1; i++)
  {
    if ( crossedLont(poly[i][0], lont, poly[i+1][0]) )
    {
      counter++;
      var crossLat = getCrossLatFromLonLat(poly[i][0], poly[i][1], poly[i+1][0], poly[i+1][1], lont);
      var cross = [i, i+1, crossLat];
      if ((crossIndice.length == 0) || (crossLat <= crossIndice[crossIndice.length-1][2]) )
      {
        crossIndice.push(cross);
      }
      else
      {
        for (var j=0; j< crossIndice.length; j++)
        {
          if (crossLat > crossIndice[j][2])
          {
            crossIndice.splice(j, 0, cross);
            break; 
          }
        }
        
      }
    }
  }

  // check end point to start point
  var end = poly.length -1;
  if (crossedLont(poly[end][0], lont, poly[0][0]))
  {
    counter++;
    var crossLat2 = getCrossLatFromLonLat(poly[end][0], poly[End][1], poly[0][0], poly[0][1], lont);
    var cross2 = [end, 0, crossLat2];
    if ((crossIndice.length == 0) || (crossLat2 <= crossIndice[crossIndice.length-1][2]) )
    {
      crossIndice.push(cross2);
    }
    else
    {
      for (var j=0; j< crossIndice.length; j++)
      {
        if (crossLat2 > crossIndice[j][2])
        {
          crossIndice.splice(j, 0, cross2);
          break; 
        }
      }
      
    }
  }


  if (counter == 0)
  {
    ret.push(poly);
    return ret;
  }
  else
  {
    // split into two poly, and recursively keep spliting
    var rightPoly =[];  // 
     var rstart = [lont, crossIndice[0][2]];
     rightPoly.push(rstart);

     // then copy from after index of top cross all the way to the before index of the 2nd cross
     if (crossIndice[1][0] >= crossIndice[0][1])
     {
       for (var k = crossIndice[0][1];k <= crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }
     else
     {
       // rounded back to o, 1, 2, ...
       for (var k = crossIndice[0][1]; k <= poly.length -1; k++)
       {
         rightPoly.push(poly[k]);
       }

       for (var k = 0; k < crossIndice[1][0]; k++)
       {
         rightPoly.push(poly[k]);
       }
     }

     var rend = [ lont, crossIndice[1][2] ];
     rightPoly.push (rend);


     var leftPoly = [];
     var lstart = [lont, crossIndice[1][2]];
     leftPoly.push(lstart);

     // then copy from after index of 2nd top cross all the to the before index of the 1st top cross
     if (crossIndice[0][0] >= crossIndice[1][1])
     {
       for (var k = crossIndice[1][1]; k  <= crossIndice[0][0]; k++ )
       {
         leftPoly.push(poly[k]);
       }
     }
     else
     {
       for (var k= crossIndice[1][1]; k <= poly.length -1; k++)
       {
         leftPoly.push(poly[k]);

       }
       for (var k=0; k <= crossIndice[0][0]; k++)
       {
        leftPoly.push(poly[k]);
       }
     }

     var lend = [lont, crossIndice[0][2]];
     leftPoly.push(lend);

     return cutAlongLont(leftPoly, lont).concat(cutAlongLont(rightPoly, lont));





  }



}

/**
 * Find the bounding regtangle and uses the mid point of the rectangle in terms of lon. and lat.
 * 
 * @param polySides  Vecter3 array composing the sides of the polygon.
 */
function findCenterPoint (polySides)
{
  var minLat, maxLat, minLon, maxLon;

  var init = vector3toLonLat(polySides[0]);
  minLon = maxLon = init[0];
  minLat = maxLat = init[1];

  for (var i=1; i<polySides.length; i++)
  {
    var temp = vector3toLonLat(polySides[i]);
    var lon = temp[0];
    var lat = temp[1];
    if (lon < minLon)
    {
      minLon = lon;
    }
    if (lon > maxLon)
    {
      maxLon = lon;
    }
    if (lat < minLat)
    {
      minLat = lat;
    }
    if (lat > maxLat)
    {
      maxLat = lat;
    }
  }

  var midLat = (minLat + maxLat)/2.0;

  //we have to take care of +180 and -180 scenarios
  var midLon;
  // all positives or all negative
  if  (((minLon >=0) && (maxLon >=0)) || ((minLon <=0) && (maxLon <=0)))
  {
   midLon = (minLon + maxLon)/2.0;
  }
  else
  {
    // one positive and one negative, which mean minLon is negative.
    if (Math.abs(minLon) + Math.abs(maxLon) <= 180.0)
    {
      midLon = (minLon + maxLon)/2.0;
    }
    else
    {
      var reverseMid = ((180 - Math.abs(minLon) ) + (180 -Math.abs(maxLon)))/2;
      if (Math.abs(minLon) < Math.abs(maxLon))
      {
        midLon = minLon - reverseMid;
      }
      else
      {
        midLon = maxLon + reverseMid;
      }
    }
  }
  //return lonLatToVector3(midLon*Math.PI/180, midLat*Math.PI/180);
  return lonLatToVector3(midLon, midLat);
}


function getRandomColor() {
  var letters = '0123456789ABCDEF';
  var color = '#';
  for (var i = 0; i < 6; i++) {
  color += letters[Math.floor(Math.random() * 16)];
  }
  return color;
  }

function convertFlatCoordsToSphereCoords(x, y) {
  // Calculate the relative 3d coordinates using Mercator projection relative to the radius of the globe.
  // Convert latitude and longitude on the 90/180 degree axis.
  let latitude = ((x - globeWidth) / globeWidth) * -180
  let longitude = ((y - globeHeight) / globeHeight) * -90
  latitude = (latitude * Math.PI) / 180 //(latitude / 180) * Math.PI
  longitude = (longitude * Math.PI) / 180 //(longitude / 180) * Math.PI // Calculate the projected starting point
  const radius = Math.cos(longitude) * globeRadius
  const targetX = Math.cos(latitude) * radius
  const targetY = Math.sin(longitude) * globeRadius
  const targetZ = Math.sin(latitude) * radius

  
 

  return new THREE.Vector3(targetX, targetY, targetZ);
}

render();


function resizeRendererToDisplaySize(renderer) {
  const canvas = renderer.domElement;
  const width = canvas.clientWidth;
  const height = canvas.clientHeight;
  const needResize = canvas.width !== width || canvas.height !== height;
  if (needResize) {
    renderer.setSize(width, height, false);
  }
  return needResize;
}



function render() {

  if (resizeRendererToDisplaySize(renderer)) {
    const canvas = renderer.domElement;
    camera.aspect = canvas.clientWidth / canvas.clientHeight;
    camera.updateProjectionMatrix();
  }
  sphere.updateWorldMatrix(true, false);

  ///
  normalMatrix.getNormalMatrix(camera.matrixWorldInverse);
  camera.getWorldPosition(cameraPosition);
  labels.forEach((info, ndx) => {
    const {elem, meshPoint} = info;
    
    meshPoint.updateWorldMatrix(true, false);
    meshPoint.getWorldPosition(tempV);
    myV.copy(tempV);
    // 
    cameraToPoint.copy(myV);
    // get the normalized screen coordinate of that position
    // x and y will be in the -1 to +1 range with x = -1 being
    // on the left and y = -1 being on the bottom
    tempV.project(camera);

    //////////////////////////// make label invisible if on the other side of the sphere
    // Orient the position based on the camera's orientation.
    // Since the sphere is at the origin and the sphere is a unit sphere
    // this gives us a camera relative direction vector for the position.
    
    myV.applyMatrix3(normalMatrix);
    

    // compute the direction to this position from the camera
    
    cameraToPoint.applyMatrix4(camera.matrixWorldInverse).normalize();

    // get the dot product of camera relative direction to this position
    // on the globe with the direction from the camera to that point.
    // -1 = facing directly towards the camera
    // 0 = exactly on tangent of the sphere from the camera
    // > 0 = facing away
    const dot = myV.dot(cameraToPoint);

    // if the orientation is not facing us hide it.
    if (dot > settings.maxVisibleDot) {
      elem.style.display = 'none';
      
    }
    else {

       // restore the element to its default display style
       elem.style.display = '';
    ////////////////////////////////////////////////

    // convert the normalized position to CSS coordinates
    const x = (tempV.x *  .5 + .5) * canvas.clientWidth;
    const y = (tempV.y * -.5 + .5) * canvas.clientHeight;
    
   /* 
   const x = ((tempV.x *  .5 + .5) * canvas.clientWidth)%canvas.clientWidth;
   const y = ((tempV.y * -.5 + .5) * canvas.clientHeight)%canvas.clientHeight;
   */

    // move the elem to that position
    elem.style.transform = `translate(-50%, -50%) translate(${x}px,${y}px)`;
    }
  });
  ////



  requestAnimationFrame(render);
  renderer.render(scene, camera);
}
